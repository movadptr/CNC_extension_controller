
CNC_extension_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000445c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bb8  0800451c  0800451c  0000551c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050d4  080050d4  00007010  2**0
                  CONTENTS
  4 .ARM          00000000  080050d4  080050d4  00007010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050d4  080050d4  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050d4  080050d4  000060d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080050d8  080050d8  000060d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080050dc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e4  20000010  080050ec  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004f4  080050ec  000074f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae64  00000000  00000000  00007038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023cc  00000000  00000000  00011e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  00014268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00011e94  00000000  00000000  00014ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000f208  00000000  00000000  00026d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00065a28  00000000  00000000  00035f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0009b9a4  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 0000097b  00000000  00000000  0009b9e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c48  00000000  00000000  0009c364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0009efac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004504 	.word	0x08004504

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08004504 	.word	0x08004504

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <print_disp_mat>:
#ifdef ssd1315_stm32_HAL

extern I2C_HandleTypeDef hi2c2;

void print_disp_mat(void)
{
 8000404:	b590      	push	{r4, r7, lr}
 8000406:	b0a5      	sub	sp, #148	@ 0x94
 8000408:	af02      	add	r7, sp, #8
	volatile uint8_t i=0, k=0;
 800040a:	2387      	movs	r3, #135	@ 0x87
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	2200      	movs	r2, #0
 8000410:	701a      	strb	r2, [r3, #0]
 8000412:	2486      	movs	r4, #134	@ 0x86
 8000414:	193b      	adds	r3, r7, r4
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	volatile uint8_t tmp[pixels_y+1] = {0};
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	2200      	movs	r2, #0
 800041e:	601a      	str	r2, [r3, #0]
 8000420:	3304      	adds	r3, #4
 8000422:	227d      	movs	r2, #125	@ 0x7d
 8000424:	2100      	movs	r1, #0
 8000426:	0018      	movs	r0, r3
 8000428:	f004 f828 	bl	800447c <memset>
	tmp[0]=Next_Will_Be_Data;
 800042c:	1d3b      	adds	r3, r7, #4
 800042e:	2240      	movs	r2, #64	@ 0x40
 8000430:	701a      	strb	r2, [r3, #0]

	for(k=0; k<8; k++)
 8000432:	193b      	adds	r3, r7, r4
 8000434:	2200      	movs	r2, #0
 8000436:	701a      	strb	r2, [r3, #0]
 8000438:	e040      	b.n	80004bc <print_disp_mat+0xb8>
	{
		go_to_col_page(0, k);
 800043a:	2386      	movs	r3, #134	@ 0x86
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	b2db      	uxtb	r3, r3
 8000442:	0019      	movs	r1, r3
 8000444:	2000      	movs	r0, #0
 8000446:	f000 f8a7 	bl	8000598 <go_to_col_page>
		for(i=0; i<pixels_y; i++)
 800044a:	2387      	movs	r3, #135	@ 0x87
 800044c:	18fb      	adds	r3, r7, r3
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
 8000452:	e01b      	b.n	800048c <print_disp_mat+0x88>
		{
			tmp[i+1]=disp_mat[i][k];
 8000454:	2487      	movs	r4, #135	@ 0x87
 8000456:	193b      	adds	r3, r7, r4
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	b2db      	uxtb	r3, r3
 800045c:	001a      	movs	r2, r3
 800045e:	2386      	movs	r3, #134	@ 0x86
 8000460:	18fb      	adds	r3, r7, r3
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	b2db      	uxtb	r3, r3
 8000466:	0018      	movs	r0, r3
 8000468:	193b      	adds	r3, r7, r4
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	b2db      	uxtb	r3, r3
 800046e:	3301      	adds	r3, #1
 8000470:	4918      	ldr	r1, [pc, #96]	@ (80004d4 <print_disp_mat+0xd0>)
 8000472:	00d2      	lsls	r2, r2, #3
 8000474:	188a      	adds	r2, r1, r2
 8000476:	5c12      	ldrb	r2, [r2, r0]
 8000478:	b2d1      	uxtb	r1, r2
 800047a:	1d3a      	adds	r2, r7, #4
 800047c:	54d1      	strb	r1, [r2, r3]
		for(i=0; i<pixels_y; i++)
 800047e:	193b      	adds	r3, r7, r4
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	b2db      	uxtb	r3, r3
 8000484:	3301      	adds	r3, #1
 8000486:	b2da      	uxtb	r2, r3
 8000488:	193b      	adds	r3, r7, r4
 800048a:	701a      	strb	r2, [r3, #0]
 800048c:	2387      	movs	r3, #135	@ 0x87
 800048e:	18fb      	adds	r3, r7, r3
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	b2db      	uxtb	r3, r3
 8000494:	b25b      	sxtb	r3, r3
 8000496:	2b00      	cmp	r3, #0
 8000498:	dadc      	bge.n	8000454 <print_disp_mat+0x50>
		}
		HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)Disp_Addr, tmp, pixels_y+1, 1000);
 800049a:	1d3a      	adds	r2, r7, #4
 800049c:	480e      	ldr	r0, [pc, #56]	@ (80004d8 <print_disp_mat+0xd4>)
 800049e:	23fa      	movs	r3, #250	@ 0xfa
 80004a0:	009b      	lsls	r3, r3, #2
 80004a2:	9300      	str	r3, [sp, #0]
 80004a4:	2381      	movs	r3, #129	@ 0x81
 80004a6:	2178      	movs	r1, #120	@ 0x78
 80004a8:	f002 f94c 	bl	8002744 <HAL_I2C_Master_Transmit>
	for(k=0; k<8; k++)
 80004ac:	2186      	movs	r1, #134	@ 0x86
 80004ae:	187b      	adds	r3, r7, r1
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	3301      	adds	r3, #1
 80004b6:	b2da      	uxtb	r2, r3
 80004b8:	187b      	adds	r3, r7, r1
 80004ba:	701a      	strb	r2, [r3, #0]
 80004bc:	2386      	movs	r3, #134	@ 0x86
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	b2db      	uxtb	r3, r3
 80004c4:	2b07      	cmp	r3, #7
 80004c6:	d9b8      	bls.n	800043a <print_disp_mat+0x36>
	}
}
 80004c8:	46c0      	nop			@ (mov r8, r8)
 80004ca:	46c0      	nop			@ (mov r8, r8)
 80004cc:	46bd      	mov	sp, r7
 80004ce:	b023      	add	sp, #140	@ 0x8c
 80004d0:	bd90      	pop	{r4, r7, pc}
 80004d2:	46c0      	nop			@ (mov r8, r8)
 80004d4:	2000002c 	.word	0x2000002c
 80004d8:	20000430 	.word	0x20000430

080004dc <delete_RAM>:

void delete_RAM(void)
{
 80004dc:	b590      	push	{r4, r7, lr}
 80004de:	b0a5      	sub	sp, #148	@ 0x94
 80004e0:	af02      	add	r7, sp, #8
	volatile uint8_t k=0;
 80004e2:	2487      	movs	r4, #135	@ 0x87
 80004e4:	193b      	adds	r3, r7, r4
 80004e6:	2200      	movs	r2, #0
 80004e8:	701a      	strb	r2, [r3, #0]
	volatile uint8_t tmp[pixels_y+1] = {0};
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	3304      	adds	r3, #4
 80004f2:	227d      	movs	r2, #125	@ 0x7d
 80004f4:	2100      	movs	r1, #0
 80004f6:	0018      	movs	r0, r3
 80004f8:	f003 ffc0 	bl	800447c <memset>
	tmp[0]=Next_Will_Be_Data;
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	2240      	movs	r2, #64	@ 0x40
 8000500:	701a      	strb	r2, [r3, #0]

	for(k=0; k<8; k++)
 8000502:	193b      	adds	r3, r7, r4
 8000504:	2200      	movs	r2, #0
 8000506:	701a      	strb	r2, [r3, #0]
 8000508:	e018      	b.n	800053c <delete_RAM+0x60>
	{
		go_to_col_page(0, k);
 800050a:	2487      	movs	r4, #135	@ 0x87
 800050c:	193b      	adds	r3, r7, r4
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	b2db      	uxtb	r3, r3
 8000512:	0019      	movs	r1, r3
 8000514:	2000      	movs	r0, #0
 8000516:	f000 f83f 	bl	8000598 <go_to_col_page>
		HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)Disp_Addr, tmp, pixels_y+1, 1000);
 800051a:	1d3a      	adds	r2, r7, #4
 800051c:	480d      	ldr	r0, [pc, #52]	@ (8000554 <delete_RAM+0x78>)
 800051e:	23fa      	movs	r3, #250	@ 0xfa
 8000520:	009b      	lsls	r3, r3, #2
 8000522:	9300      	str	r3, [sp, #0]
 8000524:	2381      	movs	r3, #129	@ 0x81
 8000526:	2178      	movs	r1, #120	@ 0x78
 8000528:	f002 f90c 	bl	8002744 <HAL_I2C_Master_Transmit>
	for(k=0; k<8; k++)
 800052c:	0021      	movs	r1, r4
 800052e:	187b      	adds	r3, r7, r1
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	b2db      	uxtb	r3, r3
 8000534:	3301      	adds	r3, #1
 8000536:	b2da      	uxtb	r2, r3
 8000538:	187b      	adds	r3, r7, r1
 800053a:	701a      	strb	r2, [r3, #0]
 800053c:	2387      	movs	r3, #135	@ 0x87
 800053e:	18fb      	adds	r3, r7, r3
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	b2db      	uxtb	r3, r3
 8000544:	2b07      	cmp	r3, #7
 8000546:	d9e0      	bls.n	800050a <delete_RAM+0x2e>
	}
}
 8000548:	46c0      	nop			@ (mov r8, r8)
 800054a:	46c0      	nop			@ (mov r8, r8)
 800054c:	46bd      	mov	sp, r7
 800054e:	b023      	add	sp, #140	@ 0x8c
 8000550:	bd90      	pop	{r4, r7, pc}
 8000552:	46c0      	nop			@ (mov r8, r8)
 8000554:	20000430 	.word	0x20000430

08000558 <oled_send_cmd>:

void oled_send_cmd(uint8_t cmd)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af02      	add	r7, sp, #8
 800055e:	0002      	movs	r2, r0
 8000560:	1dfb      	adds	r3, r7, #7
 8000562:	701a      	strb	r2, [r3, #0]

	uint8_t tmp[2] = {0};
 8000564:	210c      	movs	r1, #12
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2200      	movs	r2, #0
 800056a:	801a      	strh	r2, [r3, #0]
	tmp[0]=Next_Will_Be_Cmd;
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2280      	movs	r2, #128	@ 0x80
 8000570:	701a      	strb	r2, [r3, #0]
	tmp[1]=cmd;
 8000572:	187b      	adds	r3, r7, r1
 8000574:	1dfa      	adds	r2, r7, #7
 8000576:	7812      	ldrb	r2, [r2, #0]
 8000578:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)Disp_Addr, tmp, 2, 1000);
 800057a:	187a      	adds	r2, r7, r1
 800057c:	4805      	ldr	r0, [pc, #20]	@ (8000594 <oled_send_cmd+0x3c>)
 800057e:	23fa      	movs	r3, #250	@ 0xfa
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2302      	movs	r3, #2
 8000586:	2178      	movs	r1, #120	@ 0x78
 8000588:	f002 f8dc 	bl	8002744 <HAL_I2C_Master_Transmit>
}
 800058c:	46c0      	nop			@ (mov r8, r8)
 800058e:	46bd      	mov	sp, r7
 8000590:	b004      	add	sp, #16
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000430 	.word	0x20000430

08000598 <go_to_col_page>:

#if defined (USE_HAL_DRIVER)	//STM32 mikrokontrollerhez


void go_to_col_page(uint8_t x, uint8_t y)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	0002      	movs	r2, r0
 80005a0:	1dfb      	adds	r3, r7, #7
 80005a2:	701a      	strb	r2, [r3, #0]
 80005a4:	1dbb      	adds	r3, r7, #6
 80005a6:	1c0a      	adds	r2, r1, #0
 80005a8:	701a      	strb	r2, [r3, #0]
	if((x >= 0) && (x <= 127))
 80005aa:	1dfb      	adds	r3, r7, #7
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	b25b      	sxtb	r3, r3
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	db0a      	blt.n	80005ca <go_to_col_page+0x32>
	{
		oled_send_cmd(CMD_Set_Column_Address);
 80005b4:	2021      	movs	r0, #33	@ 0x21
 80005b6:	f7ff ffcf 	bl	8000558 <oled_send_cmd>
		oled_send_cmd(x);
 80005ba:	1dfb      	adds	r3, r7, #7
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	0018      	movs	r0, r3
 80005c0:	f7ff ffca 	bl	8000558 <oled_send_cmd>
		oled_send_cmd(127);
 80005c4:	207f      	movs	r0, #127	@ 0x7f
 80005c6:	f7ff ffc7 	bl	8000558 <oled_send_cmd>
	}	else{}
	if((y >= 0) && (y <= 7))
 80005ca:	1dbb      	adds	r3, r7, #6
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	2b07      	cmp	r3, #7
 80005d0:	d80a      	bhi.n	80005e8 <go_to_col_page+0x50>
	{
		oled_send_cmd(CMD_Set_Page_Address);
 80005d2:	2022      	movs	r0, #34	@ 0x22
 80005d4:	f7ff ffc0 	bl	8000558 <oled_send_cmd>
		oled_send_cmd(y);
 80005d8:	1dbb      	adds	r3, r7, #6
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	0018      	movs	r0, r3
 80005de:	f7ff ffbb 	bl	8000558 <oled_send_cmd>
		oled_send_cmd(7);
 80005e2:	2007      	movs	r0, #7
 80005e4:	f7ff ffb8 	bl	8000558 <oled_send_cmd>
	}	else{}
}
 80005e8:	46c0      	nop			@ (mov r8, r8)
 80005ea:	46bd      	mov	sp, r7
 80005ec:	b002      	add	sp, #8
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <oled_init>:

void oled_init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	oled_send_cmd(CMD_Display_off_sleep_mode);
 80005f4:	20ae      	movs	r0, #174	@ 0xae
 80005f6:	f7ff ffaf 	bl	8000558 <oled_send_cmd>

	oled_send_cmd(CMD_Set_Lower_Column_Start_Address_for_Page_Addressing_Mode+0);
 80005fa:	2000      	movs	r0, #0
 80005fc:	f7ff ffac 	bl	8000558 <oled_send_cmd>
	oled_send_cmd(CMD_Set_Higher_Column_Start_Address_for_Page_Addressing_Mode+0);
 8000600:	2010      	movs	r0, #16
 8000602:	f7ff ffa9 	bl	8000558 <oled_send_cmd>
	oled_send_cmd(CMD_Set_Page_Start_Address_for_Page_Addressing_Mode);
 8000606:	20b0      	movs	r0, #176	@ 0xb0
 8000608:	f7ff ffa6 	bl	8000558 <oled_send_cmd>

	oled_send_cmd(CMD_Set_Display_Clock_Divide_Ratio__Oscillator_Frequency);
 800060c:	20d5      	movs	r0, #213	@ 0xd5
 800060e:	f7ff ffa3 	bl	8000558 <oled_send_cmd>
	oled_send_cmd(0xf0);
 8000612:	20f0      	movs	r0, #240	@ 0xf0
 8000614:	f7ff ffa0 	bl	8000558 <oled_send_cmd>
	oled_send_cmd(CMD_Set_Mux_Ratio);
 8000618:	20a8      	movs	r0, #168	@ 0xa8
 800061a:	f7ff ff9d 	bl	8000558 <oled_send_cmd>
	oled_send_cmd(63);//Screen_Height - 1
 800061e:	203f      	movs	r0, #63	@ 0x3f
 8000620:	f7ff ff9a 	bl	8000558 <oled_send_cmd>
	oled_send_cmd(CMD_NOP);
 8000624:	20e3      	movs	r0, #227	@ 0xe3
 8000626:	f7ff ff97 	bl	8000558 <oled_send_cmd>
	oled_send_cmd(CMD_Set_Display_Offset);
 800062a:	20d3      	movs	r0, #211	@ 0xd3
 800062c:	f7ff ff94 	bl	8000558 <oled_send_cmd>
	oled_send_cmd(0x00);
 8000630:	2000      	movs	r0, #0
 8000632:	f7ff ff91 	bl	8000558 <oled_send_cmd>
	oled_send_cmd(CMD_Set_Charge_Pump);
 8000636:	208d      	movs	r0, #141	@ 0x8d
 8000638:	f7ff ff8e 	bl	8000558 <oled_send_cmd>
	oled_send_cmd(0x94);
 800063c:	2094      	movs	r0, #148	@ 0x94
 800063e:	f7ff ff8b 	bl	8000558 <oled_send_cmd>
	oled_send_cmd(CMD_Set_Display_Start_Line+0);
 8000642:	2040      	movs	r0, #64	@ 0x40
 8000644:	f7ff ff88 	bl	8000558 <oled_send_cmd>
	oled_send_cmd(CMD_Set_Memory_Addressing_Mode);
 8000648:	2020      	movs	r0, #32
 800064a:	f7ff ff85 	bl	8000558 <oled_send_cmd>
	oled_send_cmd(0x02);
 800064e:	2002      	movs	r0, #2
 8000650:	f7ff ff82 	bl	8000558 <oled_send_cmd>
	oled_send_cmd(CMD_Set_Segment_Remap+1);//horizontal mirror
 8000654:	20a1      	movs	r0, #161	@ 0xa1
 8000656:	f7ff ff7f 	bl	8000558 <oled_send_cmd>
	oled_send_cmd(CMD_Set_COM_Output_Scan_Direction_Remapped);//vertical mirror
 800065a:	20c8      	movs	r0, #200	@ 0xc8
 800065c:	f7ff ff7c 	bl	8000558 <oled_send_cmd>
	oled_send_cmd(CMD_Set_COM_Pins_Hardware_Config);
 8000660:	20da      	movs	r0, #218	@ 0xda
 8000662:	f7ff ff79 	bl	8000558 <oled_send_cmd>
	oled_send_cmd(0x12);
 8000666:	2012      	movs	r0, #18
 8000668:	f7ff ff76 	bl	8000558 <oled_send_cmd>
	oled_send_cmd(CMD_Select_Internal_External_IREF);
 800066c:	20ad      	movs	r0, #173	@ 0xad
 800066e:	f7ff ff73 	bl	8000558 <oled_send_cmd>
	oled_send_cmd(0x00);
 8000672:	2000      	movs	r0, #0
 8000674:	f7ff ff70 	bl	8000558 <oled_send_cmd>
	oled_send_cmd(CMD_Set_Contrast_Control);
 8000678:	2081      	movs	r0, #129	@ 0x81
 800067a:	f7ff ff6d 	bl	8000558 <oled_send_cmd>
	oled_send_cmd(0xff);
 800067e:	20ff      	movs	r0, #255	@ 0xff
 8000680:	f7ff ff6a 	bl	8000558 <oled_send_cmd>
	oled_send_cmd(CMD_Set_Pre_charge_Period);
 8000684:	20d9      	movs	r0, #217	@ 0xd9
 8000686:	f7ff ff67 	bl	8000558 <oled_send_cmd>
	oled_send_cmd(0x22);
 800068a:	2022      	movs	r0, #34	@ 0x22
 800068c:	f7ff ff64 	bl	8000558 <oled_send_cmd>
	oled_send_cmd(CMD_Set_VCOMH_Deselect_Level);
 8000690:	20db      	movs	r0, #219	@ 0xdb
 8000692:	f7ff ff61 	bl	8000558 <oled_send_cmd>
	oled_send_cmd(0x20);
 8000696:	2020      	movs	r0, #32
 8000698:	f7ff ff5e 	bl	8000558 <oled_send_cmd>

	delete_disp_mat();
 800069c:	f000 fc84 	bl	8000fa8 <delete_disp_mat>
	oled_send_cmd(CMD_Reset_Entire_Display_ON);
 80006a0:	20a4      	movs	r0, #164	@ 0xa4
 80006a2:	f7ff ff59 	bl	8000558 <oled_send_cmd>
	oled_send_cmd(CMD_Set_Normal_Display);
 80006a6:	20a6      	movs	r0, #166	@ 0xa6
 80006a8:	f7ff ff56 	bl	8000558 <oled_send_cmd>
	oled_send_cmd(0x2E);//stop scroll
 80006ac:	202e      	movs	r0, #46	@ 0x2e
 80006ae:	f7ff ff53 	bl	8000558 <oled_send_cmd>
	delete_RAM();
 80006b2:	f7ff ff13 	bl	80004dc <delete_RAM>
	oled_send_cmd(CMD_Display_on_normal_mode);
 80006b6:	20af      	movs	r0, #175	@ 0xaf
 80006b8:	f7ff ff4e 	bl	8000558 <oled_send_cmd>

	LL_mDelay(200);
 80006bc:	20c8      	movs	r0, #200	@ 0xc8
 80006be:	f003 febb 	bl	8004438 <LL_mDelay>
	oled_send_cmd(CMD_Entire_Display_ON);
 80006c2:	20a5      	movs	r0, #165	@ 0xa5
 80006c4:	f7ff ff48 	bl	8000558 <oled_send_cmd>
	LL_mDelay(200);
 80006c8:	20c8      	movs	r0, #200	@ 0xc8
 80006ca:	f003 feb5 	bl	8004438 <LL_mDelay>
	oled_send_cmd(CMD_Reset_Entire_Display_ON);
 80006ce:	20a4      	movs	r0, #164	@ 0xa4
 80006d0:	f7ff ff42 	bl	8000558 <oled_send_cmd>
}
 80006d4:	46c0      	nop			@ (mov r8, r8)
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <print_bmp_H>:
		}
	}
}
#else
void print_bmp_H(uint8_t col, uint8_t row, constant uint8_t *bmp, uint8_t Pixel_Status, uint8_t write_mode)
{	//bmp[0]=magasság pixelekben, bmp[1]=szélesség pixelekben
 80006da:	b5b0      	push	{r4, r5, r7, lr}
 80006dc:	b086      	sub	sp, #24
 80006de:	af00      	add	r7, sp, #0
 80006e0:	0004      	movs	r4, r0
 80006e2:	0008      	movs	r0, r1
 80006e4:	603a      	str	r2, [r7, #0]
 80006e6:	0019      	movs	r1, r3
 80006e8:	1dfb      	adds	r3, r7, #7
 80006ea:	1c22      	adds	r2, r4, #0
 80006ec:	701a      	strb	r2, [r3, #0]
 80006ee:	1dbb      	adds	r3, r7, #6
 80006f0:	1c02      	adds	r2, r0, #0
 80006f2:	701a      	strb	r2, [r3, #0]
 80006f4:	1d7b      	adds	r3, r7, #5
 80006f6:	1c0a      	adds	r2, r1, #0
 80006f8:	701a      	strb	r2, [r3, #0]
	uint16_t i=2, j=0, notwholelastpage=0;
 80006fa:	2316      	movs	r3, #22
 80006fc:	18fb      	adds	r3, r7, r3
 80006fe:	2202      	movs	r2, #2
 8000700:	801a      	strh	r2, [r3, #0]
 8000702:	2314      	movs	r3, #20
 8000704:	18fb      	adds	r3, r7, r3
 8000706:	2200      	movs	r2, #0
 8000708:	801a      	strh	r2, [r3, #0]
 800070a:	2412      	movs	r4, #18
 800070c:	193b      	adds	r3, r7, r4
 800070e:	2200      	movs	r2, #0
 8000710:	801a      	strh	r2, [r3, #0]
	uint8_t start_col=col, start_row=row, pages=(*(bmp)/8), lastpageheight=(*(bmp)%8), c_page=1;
 8000712:	230e      	movs	r3, #14
 8000714:	18fb      	adds	r3, r7, r3
 8000716:	1dfa      	adds	r2, r7, #7
 8000718:	7812      	ldrb	r2, [r2, #0]
 800071a:	701a      	strb	r2, [r3, #0]
 800071c:	2311      	movs	r3, #17
 800071e:	18fb      	adds	r3, r7, r3
 8000720:	1dba      	adds	r2, r7, #6
 8000722:	7812      	ldrb	r2, [r2, #0]
 8000724:	701a      	strb	r2, [r3, #0]
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	781a      	ldrb	r2, [r3, #0]
 800072a:	2010      	movs	r0, #16
 800072c:	183b      	adds	r3, r7, r0
 800072e:	08d2      	lsrs	r2, r2, #3
 8000730:	701a      	strb	r2, [r3, #0]
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	781a      	ldrb	r2, [r3, #0]
 8000736:	250d      	movs	r5, #13
 8000738:	197b      	adds	r3, r7, r5
 800073a:	2107      	movs	r1, #7
 800073c:	400a      	ands	r2, r1
 800073e:	701a      	strb	r2, [r3, #0]
 8000740:	230f      	movs	r3, #15
 8000742:	18fb      	adds	r3, r7, r3
 8000744:	2201      	movs	r2, #1
 8000746:	701a      	strb	r2, [r3, #0]
	if(lastpageheight!=0) { pages++; notwholelastpage=1;}	else{}
 8000748:	197b      	adds	r3, r7, r5
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d007      	beq.n	8000760 <print_bmp_H+0x86>
 8000750:	183b      	adds	r3, r7, r0
 8000752:	781a      	ldrb	r2, [r3, #0]
 8000754:	183b      	adds	r3, r7, r0
 8000756:	3201      	adds	r2, #1
 8000758:	701a      	strb	r2, [r3, #0]
 800075a:	193b      	adds	r3, r7, r4
 800075c:	2201      	movs	r2, #1
 800075e:	801a      	strh	r2, [r3, #0]
	for(i=2; ((i-2)<(*(bmp+1)*pages)) && (col<pixels_y+1); i++,col++)
 8000760:	2316      	movs	r3, #22
 8000762:	18fb      	adds	r3, r7, r3
 8000764:	2202      	movs	r2, #2
 8000766:	801a      	strh	r2, [r3, #0]
 8000768:	e0c3      	b.n	80008f2 <print_bmp_H+0x218>
	{
		if(((i-2)% *(bmp+1)==0) && ((i-2)!=0))	{col=start_col; start_row-=8; c_page++;}	else{}
 800076a:	2416      	movs	r4, #22
 800076c:	193b      	adds	r3, r7, r4
 800076e:	881b      	ldrh	r3, [r3, #0]
 8000770:	1e9a      	subs	r2, r3, #2
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	3301      	adds	r3, #1
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	0019      	movs	r1, r3
 800077a:	0010      	movs	r0, r2
 800077c:	f7ff fe3c 	bl	80003f8 <__aeabi_idivmod>
 8000780:	1e0b      	subs	r3, r1, #0
 8000782:	d114      	bne.n	80007ae <print_bmp_H+0xd4>
 8000784:	193b      	adds	r3, r7, r4
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	2b02      	cmp	r3, #2
 800078a:	d010      	beq.n	80007ae <print_bmp_H+0xd4>
 800078c:	1dfb      	adds	r3, r7, #7
 800078e:	220e      	movs	r2, #14
 8000790:	18ba      	adds	r2, r7, r2
 8000792:	7812      	ldrb	r2, [r2, #0]
 8000794:	701a      	strb	r2, [r3, #0]
 8000796:	2211      	movs	r2, #17
 8000798:	18bb      	adds	r3, r7, r2
 800079a:	18ba      	adds	r2, r7, r2
 800079c:	7812      	ldrb	r2, [r2, #0]
 800079e:	3a08      	subs	r2, #8
 80007a0:	701a      	strb	r2, [r3, #0]
 80007a2:	210f      	movs	r1, #15
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	781a      	ldrb	r2, [r3, #0]
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	3201      	adds	r2, #1
 80007ac:	701a      	strb	r2, [r3, #0]
		for(row=start_row,j=0; (j<8)&&(row<pixels_x); j++,row--)
 80007ae:	1dbb      	adds	r3, r7, #6
 80007b0:	2211      	movs	r2, #17
 80007b2:	18ba      	adds	r2, r7, r2
 80007b4:	7812      	ldrb	r2, [r2, #0]
 80007b6:	701a      	strb	r2, [r3, #0]
 80007b8:	2314      	movs	r3, #20
 80007ba:	18fb      	adds	r3, r7, r3
 80007bc:	2200      	movs	r2, #0
 80007be:	801a      	strh	r2, [r3, #0]
 80007c0:	e080      	b.n	80008c4 <print_bmp_H+0x1ea>
		{
			if((c_page==pages)&&(j==lastpageheight)&&notwholelastpage)	{break;}	else{}
 80007c2:	230f      	movs	r3, #15
 80007c4:	18fa      	adds	r2, r7, r3
 80007c6:	2310      	movs	r3, #16
 80007c8:	18fb      	adds	r3, r7, r3
 80007ca:	7812      	ldrb	r2, [r2, #0]
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d10e      	bne.n	80007f0 <print_bmp_H+0x116>
 80007d2:	230d      	movs	r3, #13
 80007d4:	18fb      	adds	r3, r7, r3
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	b29b      	uxth	r3, r3
 80007da:	2214      	movs	r2, #20
 80007dc:	18ba      	adds	r2, r7, r2
 80007de:	8812      	ldrh	r2, [r2, #0]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d105      	bne.n	80007f0 <print_bmp_H+0x116>
 80007e4:	2312      	movs	r3, #18
 80007e6:	18fb      	adds	r3, r7, r3
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d000      	beq.n	80007f0 <print_bmp_H+0x116>
 80007ee:	e074      	b.n	80008da <print_bmp_H+0x200>
			if(Pixel_Status==Pixel_on)
 80007f0:	1d7b      	adds	r3, r7, #5
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b80      	cmp	r3, #128	@ 0x80
 80007f6:	d12b      	bne.n	8000850 <print_bmp_H+0x176>
			{
				if( (*(bmp+i) << j) & 0x80)	{ setpixel(pixels_x-1-row,col,Pixel_on);}
 80007f8:	2316      	movs	r3, #22
 80007fa:	18fb      	adds	r3, r7, r3
 80007fc:	881b      	ldrh	r3, [r3, #0]
 80007fe:	683a      	ldr	r2, [r7, #0]
 8000800:	18d3      	adds	r3, r2, r3
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	001a      	movs	r2, r3
 8000806:	2314      	movs	r3, #20
 8000808:	18fb      	adds	r3, r7, r3
 800080a:	881b      	ldrh	r3, [r3, #0]
 800080c:	409a      	lsls	r2, r3
 800080e:	0013      	movs	r3, r2
 8000810:	2280      	movs	r2, #128	@ 0x80
 8000812:	4013      	ands	r3, r2
 8000814:	d00b      	beq.n	800082e <print_bmp_H+0x154>
 8000816:	1dbb      	adds	r3, r7, #6
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	223f      	movs	r2, #63	@ 0x3f
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	b2d8      	uxtb	r0, r3
 8000820:	1dfb      	adds	r3, r7, #7
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2280      	movs	r2, #128	@ 0x80
 8000826:	0019      	movs	r1, r3
 8000828:	f000 fb4e 	bl	8000ec8 <setpixel>
 800082c:	e03f      	b.n	80008ae <print_bmp_H+0x1d4>
				else if(write_mode == Overwrite) { setpixel(pixels_x-1-row,col,Pixel_off);}	else{}
 800082e:	2328      	movs	r3, #40	@ 0x28
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d13a      	bne.n	80008ae <print_bmp_H+0x1d4>
 8000838:	1dbb      	adds	r3, r7, #6
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	223f      	movs	r2, #63	@ 0x3f
 800083e:	1ad3      	subs	r3, r2, r3
 8000840:	b2d8      	uxtb	r0, r3
 8000842:	1dfb      	adds	r3, r7, #7
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	227f      	movs	r2, #127	@ 0x7f
 8000848:	0019      	movs	r1, r3
 800084a:	f000 fb3d 	bl	8000ec8 <setpixel>
 800084e:	e02e      	b.n	80008ae <print_bmp_H+0x1d4>
			}
			else if(Pixel_Status==Pixel_off)
 8000850:	1d7b      	adds	r3, r7, #5
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b7f      	cmp	r3, #127	@ 0x7f
 8000856:	d12a      	bne.n	80008ae <print_bmp_H+0x1d4>
			{
				if( (*(bmp+i) << j) & 0x80)	{ setpixel(pixels_x-1-row,col,Pixel_off);}
 8000858:	2316      	movs	r3, #22
 800085a:	18fb      	adds	r3, r7, r3
 800085c:	881b      	ldrh	r3, [r3, #0]
 800085e:	683a      	ldr	r2, [r7, #0]
 8000860:	18d3      	adds	r3, r2, r3
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	001a      	movs	r2, r3
 8000866:	2314      	movs	r3, #20
 8000868:	18fb      	adds	r3, r7, r3
 800086a:	881b      	ldrh	r3, [r3, #0]
 800086c:	409a      	lsls	r2, r3
 800086e:	0013      	movs	r3, r2
 8000870:	2280      	movs	r2, #128	@ 0x80
 8000872:	4013      	ands	r3, r2
 8000874:	d00b      	beq.n	800088e <print_bmp_H+0x1b4>
 8000876:	1dbb      	adds	r3, r7, #6
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	223f      	movs	r2, #63	@ 0x3f
 800087c:	1ad3      	subs	r3, r2, r3
 800087e:	b2d8      	uxtb	r0, r3
 8000880:	1dfb      	adds	r3, r7, #7
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	227f      	movs	r2, #127	@ 0x7f
 8000886:	0019      	movs	r1, r3
 8000888:	f000 fb1e 	bl	8000ec8 <setpixel>
 800088c:	e00f      	b.n	80008ae <print_bmp_H+0x1d4>
				else if(write_mode == Overwrite) { setpixel(pixels_x-1-row,col,Pixel_on);}	else{}
 800088e:	2328      	movs	r3, #40	@ 0x28
 8000890:	18fb      	adds	r3, r7, r3
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d10a      	bne.n	80008ae <print_bmp_H+0x1d4>
 8000898:	1dbb      	adds	r3, r7, #6
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	223f      	movs	r2, #63	@ 0x3f
 800089e:	1ad3      	subs	r3, r2, r3
 80008a0:	b2d8      	uxtb	r0, r3
 80008a2:	1dfb      	adds	r3, r7, #7
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2280      	movs	r2, #128	@ 0x80
 80008a8:	0019      	movs	r1, r3
 80008aa:	f000 fb0d 	bl	8000ec8 <setpixel>
		for(row=start_row,j=0; (j<8)&&(row<pixels_x); j++,row--)
 80008ae:	2114      	movs	r1, #20
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	881a      	ldrh	r2, [r3, #0]
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	3201      	adds	r2, #1
 80008b8:	801a      	strh	r2, [r3, #0]
 80008ba:	1dbb      	adds	r3, r7, #6
 80008bc:	781a      	ldrb	r2, [r3, #0]
 80008be:	1dbb      	adds	r3, r7, #6
 80008c0:	3a01      	subs	r2, #1
 80008c2:	701a      	strb	r2, [r3, #0]
 80008c4:	2314      	movs	r3, #20
 80008c6:	18fb      	adds	r3, r7, r3
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	2b07      	cmp	r3, #7
 80008cc:	d806      	bhi.n	80008dc <print_bmp_H+0x202>
 80008ce:	1dbb      	adds	r3, r7, #6
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b3f      	cmp	r3, #63	@ 0x3f
 80008d4:	d800      	bhi.n	80008d8 <print_bmp_H+0x1fe>
 80008d6:	e774      	b.n	80007c2 <print_bmp_H+0xe8>
 80008d8:	e000      	b.n	80008dc <print_bmp_H+0x202>
			if((c_page==pages)&&(j==lastpageheight)&&notwholelastpage)	{break;}	else{}
 80008da:	46c0      	nop			@ (mov r8, r8)
	for(i=2; ((i-2)<(*(bmp+1)*pages)) && (col<pixels_y+1); i++,col++)
 80008dc:	2116      	movs	r1, #22
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	881a      	ldrh	r2, [r3, #0]
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	3201      	adds	r2, #1
 80008e6:	801a      	strh	r2, [r3, #0]
 80008e8:	1dfb      	adds	r3, r7, #7
 80008ea:	781a      	ldrb	r2, [r3, #0]
 80008ec:	1dfb      	adds	r3, r7, #7
 80008ee:	3201      	adds	r2, #1
 80008f0:	701a      	strb	r2, [r3, #0]
 80008f2:	2316      	movs	r3, #22
 80008f4:	18fb      	adds	r3, r7, r3
 80008f6:	881b      	ldrh	r3, [r3, #0]
 80008f8:	1e5a      	subs	r2, r3, #1
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	3301      	adds	r3, #1
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	0019      	movs	r1, r3
 8000902:	2310      	movs	r3, #16
 8000904:	18fb      	adds	r3, r7, r3
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	434b      	muls	r3, r1
 800090a:	429a      	cmp	r2, r3
 800090c:	dc04      	bgt.n	8000918 <print_bmp_H+0x23e>
 800090e:	1dfb      	adds	r3, r7, #7
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b80      	cmp	r3, #128	@ 0x80
 8000914:	d800      	bhi.n	8000918 <print_bmp_H+0x23e>
 8000916:	e728      	b.n	800076a <print_bmp_H+0x90>
			}	else{}
		}
	}
}
 8000918:	46c0      	nop			@ (mov r8, r8)
 800091a:	46bd      	mov	sp, r7
 800091c:	b006      	add	sp, #24
 800091e:	bdb0      	pop	{r4, r5, r7, pc}

08000920 <write_text_H>:
	}
	return 0;
}

uint8_t write_text_H(uint8_t col, uint8_t row, char* text, uint8_t Pixel_Status, uint8_t size)
{
 8000920:	b5b0      	push	{r4, r5, r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af02      	add	r7, sp, #8
 8000926:	0004      	movs	r4, r0
 8000928:	0008      	movs	r0, r1
 800092a:	603a      	str	r2, [r7, #0]
 800092c:	0019      	movs	r1, r3
 800092e:	1dfb      	adds	r3, r7, #7
 8000930:	1c22      	adds	r2, r4, #0
 8000932:	701a      	strb	r2, [r3, #0]
 8000934:	1dbb      	adds	r3, r7, #6
 8000936:	1c02      	adds	r2, r0, #0
 8000938:	701a      	strb	r2, [r3, #0]
 800093a:	1d7b      	adds	r3, r7, #5
 800093c:	1c0a      	adds	r2, r1, #0
 800093e:	701a      	strb	r2, [r3, #0]
	while(*(text))
 8000940:	e029      	b.n	8000996 <write_text_H+0x76>
	{
		if(*(text) != ' ')
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b20      	cmp	r3, #32
 8000948:	d012      	beq.n	8000970 <write_text_H+0x50>
		{
			col=write_character_H(col, row, *(text), Pixel_Status, size);
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	781a      	ldrb	r2, [r3, #0]
 800094e:	1dfc      	adds	r4, r7, #7
 8000950:	1d7b      	adds	r3, r7, #5
 8000952:	781d      	ldrb	r5, [r3, #0]
 8000954:	1dbb      	adds	r3, r7, #6
 8000956:	7819      	ldrb	r1, [r3, #0]
 8000958:	1dfb      	adds	r3, r7, #7
 800095a:	7818      	ldrb	r0, [r3, #0]
 800095c:	2318      	movs	r3, #24
 800095e:	18fb      	adds	r3, r7, r3
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	002b      	movs	r3, r5
 8000966:	f000 f81f 	bl	80009a8 <write_character_H>
 800096a:	0003      	movs	r3, r0
 800096c:	7023      	strb	r3, [r4, #0]
 800096e:	e004      	b.n	800097a <write_text_H+0x5a>
		}
		else{ col+=2;}
 8000970:	1dfb      	adds	r3, r7, #7
 8000972:	1dfa      	adds	r2, r7, #7
 8000974:	7812      	ldrb	r2, [r2, #0]
 8000976:	3202      	adds	r2, #2
 8000978:	701a      	strb	r2, [r3, #0]
		if(col==lcd_err)	{ return lcd_err;}//nem fér ki a karakter
 800097a:	1dfb      	adds	r3, r7, #7
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2bff      	cmp	r3, #255	@ 0xff
 8000980:	d101      	bne.n	8000986 <write_text_H+0x66>
 8000982:	23ff      	movs	r3, #255	@ 0xff
 8000984:	e00c      	b.n	80009a0 <write_text_H+0x80>
		else{ text++; col++;}
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	3301      	adds	r3, #1
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	1dfb      	adds	r3, r7, #7
 800098e:	781a      	ldrb	r2, [r3, #0]
 8000990:	1dfb      	adds	r3, r7, #7
 8000992:	3201      	adds	r2, #1
 8000994:	701a      	strb	r2, [r3, #0]
	while(*(text))
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d1d1      	bne.n	8000942 <write_text_H+0x22>
	}
	return 0;
 800099e:	2300      	movs	r3, #0
}
 80009a0:	0018      	movs	r0, r3
 80009a2:	46bd      	mov	sp, r7
 80009a4:	b002      	add	sp, #8
 80009a6:	bdb0      	pop	{r4, r5, r7, pc}

080009a8 <write_character_H>:
	}	else{}
	return col;
}
#else
uint8_t write_character_H(uint8_t start_col, uint8_t start_row, char character, uint8_t Pixel_Status, uint8_t size)
{
 80009a8:	b5b0      	push	{r4, r5, r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	0005      	movs	r5, r0
 80009b0:	000c      	movs	r4, r1
 80009b2:	0010      	movs	r0, r2
 80009b4:	0019      	movs	r1, r3
 80009b6:	1dfb      	adds	r3, r7, #7
 80009b8:	1c2a      	adds	r2, r5, #0
 80009ba:	701a      	strb	r2, [r3, #0]
 80009bc:	1dbb      	adds	r3, r7, #6
 80009be:	1c22      	adds	r2, r4, #0
 80009c0:	701a      	strb	r2, [r3, #0]
 80009c2:	1d7b      	adds	r3, r7, #5
 80009c4:	1c02      	adds	r2, r0, #0
 80009c6:	701a      	strb	r2, [r3, #0]
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	1c0a      	adds	r2, r1, #0
 80009cc:	701a      	strb	r2, [r3, #0]
	uint8_t row=start_row, col=start_col;
 80009ce:	230f      	movs	r3, #15
 80009d0:	18fb      	adds	r3, r7, r3
 80009d2:	1dba      	adds	r2, r7, #6
 80009d4:	7812      	ldrb	r2, [r2, #0]
 80009d6:	701a      	strb	r2, [r3, #0]
 80009d8:	230e      	movs	r3, #14
 80009da:	18fb      	adds	r3, r7, r3
 80009dc:	1dfa      	adds	r2, r7, #7
 80009de:	7812      	ldrb	r2, [r2, #0]
 80009e0:	701a      	strb	r2, [r3, #0]
	uint8_t xi=0, yi=0;//futó változók
 80009e2:	230d      	movs	r3, #13
 80009e4:	18fb      	adds	r3, r7, r3
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]
 80009ea:	230c      	movs	r3, #12
 80009ec:	18fb      	adds	r3, r7, r3
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
	character_info(character, size);
 80009f2:	2320      	movs	r3, #32
 80009f4:	18fb      	adds	r3, r7, r3
 80009f6:	781a      	ldrb	r2, [r3, #0]
 80009f8:	1d7b      	adds	r3, r7, #5
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	0011      	movs	r1, r2
 80009fe:	0018      	movs	r0, r3
 8000a00:	f000 f98c 	bl	8000d1c <character_info>
	if( ((start_col + charwidth) > pixels_y) )
 8000a04:	1dfb      	adds	r3, r7, #7
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	4ac0      	ldr	r2, [pc, #768]	@ (8000d0c <write_character_H+0x364>)
 8000a0a:	7812      	ldrb	r2, [r2, #0]
 8000a0c:	189b      	adds	r3, r3, r2
 8000a0e:	2b80      	cmp	r3, #128	@ 0x80
 8000a10:	dd01      	ble.n	8000a16 <write_character_H+0x6e>
	{
		return lcd_err;
 8000a12:	23ff      	movs	r3, #255	@ 0xff
 8000a14:	e175      	b.n	8000d02 <write_character_H+0x35a>
	}	else{}
	if(size==size_5x8)
 8000a16:	2320      	movs	r3, #32
 8000a18:	18fb      	adds	r3, r7, r3
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b08      	cmp	r3, #8
 8000a1e:	d000      	beq.n	8000a22 <write_character_H+0x7a>
 8000a20:	e099      	b.n	8000b56 <write_character_H+0x1ae>
	{
		for(xi=0; xi<charwidth; xi++,col++)
 8000a22:	230d      	movs	r3, #13
 8000a24:	18fb      	adds	r3, r7, r3
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
 8000a2a:	e08b      	b.n	8000b44 <write_character_H+0x19c>
		{
			for(yi=0,row=start_row; yi<8; yi++,row++)
 8000a2c:	230c      	movs	r3, #12
 8000a2e:	18fb      	adds	r3, r7, r3
 8000a30:	2200      	movs	r2, #0
 8000a32:	701a      	strb	r2, [r3, #0]
 8000a34:	230f      	movs	r3, #15
 8000a36:	18fb      	adds	r3, r7, r3
 8000a38:	1dba      	adds	r2, r7, #6
 8000a3a:	7812      	ldrb	r2, [r2, #0]
 8000a3c:	701a      	strb	r2, [r3, #0]
 8000a3e:	e070      	b.n	8000b22 <write_character_H+0x17a>
			{
				if(Pixel_Status==Pixel_on)
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b80      	cmp	r3, #128	@ 0x80
 8000a46:	d12e      	bne.n	8000aa6 <write_character_H+0xfe>
				{
					if( ( *(_5x8chars+firstcharbyte+xi) >> yi) & 0b1)
 8000a48:	4bb1      	ldr	r3, [pc, #708]	@ (8000d10 <write_character_H+0x368>)
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	001a      	movs	r2, r3
 8000a4e:	230d      	movs	r3, #13
 8000a50:	18fb      	adds	r3, r7, r3
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	18d2      	adds	r2, r2, r3
 8000a56:	4baf      	ldr	r3, [pc, #700]	@ (8000d14 <write_character_H+0x36c>)
 8000a58:	18d3      	adds	r3, r2, r3
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	230c      	movs	r3, #12
 8000a60:	18fb      	adds	r3, r7, r3
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	411a      	asrs	r2, r3
 8000a66:	0013      	movs	r3, r2
 8000a68:	2201      	movs	r2, #1
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	d00d      	beq.n	8000a8a <write_character_H+0xe2>
					{
						setpixel(pixels_x-1-row,col,Pixel_on);
 8000a6e:	230f      	movs	r3, #15
 8000a70:	18fb      	adds	r3, r7, r3
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	223f      	movs	r2, #63	@ 0x3f
 8000a76:	1ad3      	subs	r3, r2, r3
 8000a78:	b2d8      	uxtb	r0, r3
 8000a7a:	230e      	movs	r3, #14
 8000a7c:	18fb      	adds	r3, r7, r3
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2280      	movs	r2, #128	@ 0x80
 8000a82:	0019      	movs	r1, r3
 8000a84:	f000 fa20 	bl	8000ec8 <setpixel>
 8000a88:	e03f      	b.n	8000b0a <write_character_H+0x162>
					}
					else
					{
						setpixel(pixels_x-1-row,col,Pixel_off);
 8000a8a:	230f      	movs	r3, #15
 8000a8c:	18fb      	adds	r3, r7, r3
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	223f      	movs	r2, #63	@ 0x3f
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	b2d8      	uxtb	r0, r3
 8000a96:	230e      	movs	r3, #14
 8000a98:	18fb      	adds	r3, r7, r3
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	227f      	movs	r2, #127	@ 0x7f
 8000a9e:	0019      	movs	r1, r3
 8000aa0:	f000 fa12 	bl	8000ec8 <setpixel>
 8000aa4:	e031      	b.n	8000b0a <write_character_H+0x162>
					}
				}
				else if(Pixel_Status==Pixel_off)
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b7f      	cmp	r3, #127	@ 0x7f
 8000aac:	d12d      	bne.n	8000b0a <write_character_H+0x162>
				{
					if( ( *(_5x8chars+firstcharbyte+xi) >> yi) & 0b1)
 8000aae:	4b98      	ldr	r3, [pc, #608]	@ (8000d10 <write_character_H+0x368>)
 8000ab0:	881b      	ldrh	r3, [r3, #0]
 8000ab2:	001a      	movs	r2, r3
 8000ab4:	230d      	movs	r3, #13
 8000ab6:	18fb      	adds	r3, r7, r3
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	18d2      	adds	r2, r2, r3
 8000abc:	4b95      	ldr	r3, [pc, #596]	@ (8000d14 <write_character_H+0x36c>)
 8000abe:	18d3      	adds	r3, r2, r3
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	001a      	movs	r2, r3
 8000ac4:	230c      	movs	r3, #12
 8000ac6:	18fb      	adds	r3, r7, r3
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	411a      	asrs	r2, r3
 8000acc:	0013      	movs	r3, r2
 8000ace:	2201      	movs	r2, #1
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	d00d      	beq.n	8000af0 <write_character_H+0x148>
					{
						setpixel(pixels_x-1-row,col,Pixel_off);
 8000ad4:	230f      	movs	r3, #15
 8000ad6:	18fb      	adds	r3, r7, r3
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	223f      	movs	r2, #63	@ 0x3f
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	b2d8      	uxtb	r0, r3
 8000ae0:	230e      	movs	r3, #14
 8000ae2:	18fb      	adds	r3, r7, r3
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	227f      	movs	r2, #127	@ 0x7f
 8000ae8:	0019      	movs	r1, r3
 8000aea:	f000 f9ed 	bl	8000ec8 <setpixel>
 8000aee:	e00c      	b.n	8000b0a <write_character_H+0x162>
					}
					else
					{
						setpixel(pixels_x-1-row,col,Pixel_on);
 8000af0:	230f      	movs	r3, #15
 8000af2:	18fb      	adds	r3, r7, r3
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	223f      	movs	r2, #63	@ 0x3f
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	b2d8      	uxtb	r0, r3
 8000afc:	230e      	movs	r3, #14
 8000afe:	18fb      	adds	r3, r7, r3
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2280      	movs	r2, #128	@ 0x80
 8000b04:	0019      	movs	r1, r3
 8000b06:	f000 f9df 	bl	8000ec8 <setpixel>
			for(yi=0,row=start_row; yi<8; yi++,row++)
 8000b0a:	210c      	movs	r1, #12
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	781a      	ldrb	r2, [r3, #0]
 8000b10:	187b      	adds	r3, r7, r1
 8000b12:	3201      	adds	r2, #1
 8000b14:	701a      	strb	r2, [r3, #0]
 8000b16:	210f      	movs	r1, #15
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	781a      	ldrb	r2, [r3, #0]
 8000b1c:	187b      	adds	r3, r7, r1
 8000b1e:	3201      	adds	r2, #1
 8000b20:	701a      	strb	r2, [r3, #0]
 8000b22:	230c      	movs	r3, #12
 8000b24:	18fb      	adds	r3, r7, r3
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b07      	cmp	r3, #7
 8000b2a:	d989      	bls.n	8000a40 <write_character_H+0x98>
		for(xi=0; xi<charwidth; xi++,col++)
 8000b2c:	210d      	movs	r1, #13
 8000b2e:	187b      	adds	r3, r7, r1
 8000b30:	781a      	ldrb	r2, [r3, #0]
 8000b32:	187b      	adds	r3, r7, r1
 8000b34:	3201      	adds	r2, #1
 8000b36:	701a      	strb	r2, [r3, #0]
 8000b38:	210e      	movs	r1, #14
 8000b3a:	187b      	adds	r3, r7, r1
 8000b3c:	781a      	ldrb	r2, [r3, #0]
 8000b3e:	187b      	adds	r3, r7, r1
 8000b40:	3201      	adds	r2, #1
 8000b42:	701a      	strb	r2, [r3, #0]
 8000b44:	4b71      	ldr	r3, [pc, #452]	@ (8000d0c <write_character_H+0x364>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	220d      	movs	r2, #13
 8000b4a:	18ba      	adds	r2, r7, r2
 8000b4c:	7812      	ldrb	r2, [r2, #0]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d200      	bcs.n	8000b54 <write_character_H+0x1ac>
 8000b52:	e76b      	b.n	8000a2c <write_character_H+0x84>
 8000b54:	e0d2      	b.n	8000cfc <write_character_H+0x354>
					}
				}	else{}
			}
		}
	}
	else if(size==size_10x16)
 8000b56:	2320      	movs	r3, #32
 8000b58:	18fb      	adds	r3, r7, r3
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b16      	cmp	r3, #22
 8000b5e:	d000      	beq.n	8000b62 <write_character_H+0x1ba>
 8000b60:	e0cc      	b.n	8000cfc <write_character_H+0x354>
	{
		uint8_t chr_half=0;//futó változó; a 10x16 os karakter két bájt magasságú...
 8000b62:	210b      	movs	r1, #11
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	2200      	movs	r2, #0
 8000b68:	701a      	strb	r2, [r3, #0]
		start_row += 8;
 8000b6a:	1dbb      	adds	r3, r7, #6
 8000b6c:	1dba      	adds	r2, r7, #6
 8000b6e:	7812      	ldrb	r2, [r2, #0]
 8000b70:	3208      	adds	r2, #8
 8000b72:	701a      	strb	r2, [r3, #0]
		for(chr_half=0; chr_half<2; chr_half++,start_row-=8)
 8000b74:	187b      	adds	r3, r7, r1
 8000b76:	2200      	movs	r2, #0
 8000b78:	701a      	strb	r2, [r3, #0]
 8000b7a:	e0b9      	b.n	8000cf0 <write_character_H+0x348>
		{
			for(xi=0,col=start_col; xi<charwidth; xi++,col++)
 8000b7c:	230d      	movs	r3, #13
 8000b7e:	18fb      	adds	r3, r7, r3
 8000b80:	2200      	movs	r2, #0
 8000b82:	701a      	strb	r2, [r3, #0]
 8000b84:	230e      	movs	r3, #14
 8000b86:	18fb      	adds	r3, r7, r3
 8000b88:	1dfa      	adds	r2, r7, #7
 8000b8a:	7812      	ldrb	r2, [r2, #0]
 8000b8c:	701a      	strb	r2, [r3, #0]
 8000b8e:	e09c      	b.n	8000cca <write_character_H+0x322>
			{
				for(yi=0,row=start_row; yi<8; yi++,row++)
 8000b90:	230c      	movs	r3, #12
 8000b92:	18fb      	adds	r3, r7, r3
 8000b94:	2200      	movs	r2, #0
 8000b96:	701a      	strb	r2, [r3, #0]
 8000b98:	230f      	movs	r3, #15
 8000b9a:	18fb      	adds	r3, r7, r3
 8000b9c:	1dba      	adds	r2, r7, #6
 8000b9e:	7812      	ldrb	r2, [r2, #0]
 8000ba0:	701a      	strb	r2, [r3, #0]
 8000ba2:	e080      	b.n	8000ca6 <write_character_H+0x2fe>
				{
					if(Pixel_Status==Pixel_on)
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b80      	cmp	r3, #128	@ 0x80
 8000baa:	d136      	bne.n	8000c1a <write_character_H+0x272>
					{
						if( ( *(_10x16chars+firstcharbyte+(chr_half*10)+xi) >> yi) & 0b1)
 8000bac:	4b58      	ldr	r3, [pc, #352]	@ (8000d10 <write_character_H+0x368>)
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	0019      	movs	r1, r3
 8000bb2:	230b      	movs	r3, #11
 8000bb4:	18fb      	adds	r3, r7, r3
 8000bb6:	781a      	ldrb	r2, [r3, #0]
 8000bb8:	0013      	movs	r3, r2
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	189b      	adds	r3, r3, r2
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	18ca      	adds	r2, r1, r3
 8000bc2:	230d      	movs	r3, #13
 8000bc4:	18fb      	adds	r3, r7, r3
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	18d2      	adds	r2, r2, r3
 8000bca:	4b53      	ldr	r3, [pc, #332]	@ (8000d18 <write_character_H+0x370>)
 8000bcc:	18d3      	adds	r3, r2, r3
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	001a      	movs	r2, r3
 8000bd2:	230c      	movs	r3, #12
 8000bd4:	18fb      	adds	r3, r7, r3
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	411a      	asrs	r2, r3
 8000bda:	0013      	movs	r3, r2
 8000bdc:	2201      	movs	r2, #1
 8000bde:	4013      	ands	r3, r2
 8000be0:	d00d      	beq.n	8000bfe <write_character_H+0x256>
						{
							setpixel(pixels_x-1-row,col,Pixel_on);
 8000be2:	230f      	movs	r3, #15
 8000be4:	18fb      	adds	r3, r7, r3
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	223f      	movs	r2, #63	@ 0x3f
 8000bea:	1ad3      	subs	r3, r2, r3
 8000bec:	b2d8      	uxtb	r0, r3
 8000bee:	230e      	movs	r3, #14
 8000bf0:	18fb      	adds	r3, r7, r3
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	0019      	movs	r1, r3
 8000bf8:	f000 f966 	bl	8000ec8 <setpixel>
 8000bfc:	e047      	b.n	8000c8e <write_character_H+0x2e6>
						}
						else
						{
							setpixel(pixels_x-1-row,col,Pixel_off);
 8000bfe:	230f      	movs	r3, #15
 8000c00:	18fb      	adds	r3, r7, r3
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	223f      	movs	r2, #63	@ 0x3f
 8000c06:	1ad3      	subs	r3, r2, r3
 8000c08:	b2d8      	uxtb	r0, r3
 8000c0a:	230e      	movs	r3, #14
 8000c0c:	18fb      	adds	r3, r7, r3
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	227f      	movs	r2, #127	@ 0x7f
 8000c12:	0019      	movs	r1, r3
 8000c14:	f000 f958 	bl	8000ec8 <setpixel>
 8000c18:	e039      	b.n	8000c8e <write_character_H+0x2e6>
						}
					}
					else if(Pixel_Status==Pixel_off)
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c20:	d135      	bne.n	8000c8e <write_character_H+0x2e6>
					{
						if( ( *(_10x16chars+firstcharbyte+(chr_half*10)+xi) >> yi) & 0b1)
 8000c22:	4b3b      	ldr	r3, [pc, #236]	@ (8000d10 <write_character_H+0x368>)
 8000c24:	881b      	ldrh	r3, [r3, #0]
 8000c26:	0019      	movs	r1, r3
 8000c28:	230b      	movs	r3, #11
 8000c2a:	18fb      	adds	r3, r7, r3
 8000c2c:	781a      	ldrb	r2, [r3, #0]
 8000c2e:	0013      	movs	r3, r2
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	189b      	adds	r3, r3, r2
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	18ca      	adds	r2, r1, r3
 8000c38:	230d      	movs	r3, #13
 8000c3a:	18fb      	adds	r3, r7, r3
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	18d2      	adds	r2, r2, r3
 8000c40:	4b35      	ldr	r3, [pc, #212]	@ (8000d18 <write_character_H+0x370>)
 8000c42:	18d3      	adds	r3, r2, r3
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	001a      	movs	r2, r3
 8000c48:	230c      	movs	r3, #12
 8000c4a:	18fb      	adds	r3, r7, r3
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	411a      	asrs	r2, r3
 8000c50:	0013      	movs	r3, r2
 8000c52:	2201      	movs	r2, #1
 8000c54:	4013      	ands	r3, r2
 8000c56:	d00d      	beq.n	8000c74 <write_character_H+0x2cc>
						{
							setpixel(pixels_x-1-row,col,Pixel_off);
 8000c58:	230f      	movs	r3, #15
 8000c5a:	18fb      	adds	r3, r7, r3
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	223f      	movs	r2, #63	@ 0x3f
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	b2d8      	uxtb	r0, r3
 8000c64:	230e      	movs	r3, #14
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	227f      	movs	r2, #127	@ 0x7f
 8000c6c:	0019      	movs	r1, r3
 8000c6e:	f000 f92b 	bl	8000ec8 <setpixel>
 8000c72:	e00c      	b.n	8000c8e <write_character_H+0x2e6>
						}
						else
						{
							setpixel(pixels_x-1-row,col,Pixel_on);
 8000c74:	230f      	movs	r3, #15
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	223f      	movs	r2, #63	@ 0x3f
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	b2d8      	uxtb	r0, r3
 8000c80:	230e      	movs	r3, #14
 8000c82:	18fb      	adds	r3, r7, r3
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2280      	movs	r2, #128	@ 0x80
 8000c88:	0019      	movs	r1, r3
 8000c8a:	f000 f91d 	bl	8000ec8 <setpixel>
				for(yi=0,row=start_row; yi<8; yi++,row++)
 8000c8e:	210c      	movs	r1, #12
 8000c90:	187b      	adds	r3, r7, r1
 8000c92:	781a      	ldrb	r2, [r3, #0]
 8000c94:	187b      	adds	r3, r7, r1
 8000c96:	3201      	adds	r2, #1
 8000c98:	701a      	strb	r2, [r3, #0]
 8000c9a:	210f      	movs	r1, #15
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	781a      	ldrb	r2, [r3, #0]
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	3201      	adds	r2, #1
 8000ca4:	701a      	strb	r2, [r3, #0]
 8000ca6:	230c      	movs	r3, #12
 8000ca8:	18fb      	adds	r3, r7, r3
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b07      	cmp	r3, #7
 8000cae:	d800      	bhi.n	8000cb2 <write_character_H+0x30a>
 8000cb0:	e778      	b.n	8000ba4 <write_character_H+0x1fc>
			for(xi=0,col=start_col; xi<charwidth; xi++,col++)
 8000cb2:	210d      	movs	r1, #13
 8000cb4:	187b      	adds	r3, r7, r1
 8000cb6:	781a      	ldrb	r2, [r3, #0]
 8000cb8:	187b      	adds	r3, r7, r1
 8000cba:	3201      	adds	r2, #1
 8000cbc:	701a      	strb	r2, [r3, #0]
 8000cbe:	210e      	movs	r1, #14
 8000cc0:	187b      	adds	r3, r7, r1
 8000cc2:	781a      	ldrb	r2, [r3, #0]
 8000cc4:	187b      	adds	r3, r7, r1
 8000cc6:	3201      	adds	r2, #1
 8000cc8:	701a      	strb	r2, [r3, #0]
 8000cca:	4b10      	ldr	r3, [pc, #64]	@ (8000d0c <write_character_H+0x364>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	220d      	movs	r2, #13
 8000cd0:	18ba      	adds	r2, r7, r2
 8000cd2:	7812      	ldrb	r2, [r2, #0]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d200      	bcs.n	8000cda <write_character_H+0x332>
 8000cd8:	e75a      	b.n	8000b90 <write_character_H+0x1e8>
		for(chr_half=0; chr_half<2; chr_half++,start_row-=8)
 8000cda:	210b      	movs	r1, #11
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	781a      	ldrb	r2, [r3, #0]
 8000ce0:	187b      	adds	r3, r7, r1
 8000ce2:	3201      	adds	r2, #1
 8000ce4:	701a      	strb	r2, [r3, #0]
 8000ce6:	1dbb      	adds	r3, r7, #6
 8000ce8:	1dba      	adds	r2, r7, #6
 8000cea:	7812      	ldrb	r2, [r2, #0]
 8000cec:	3a08      	subs	r2, #8
 8000cee:	701a      	strb	r2, [r3, #0]
 8000cf0:	230b      	movs	r3, #11
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d800      	bhi.n	8000cfc <write_character_H+0x354>
 8000cfa:	e73f      	b.n	8000b7c <write_character_H+0x1d4>
					}	else{}
				}
			}
		}
	}	else{}
	return col;
 8000cfc:	230e      	movs	r3, #14
 8000cfe:	18fb      	adds	r3, r7, r3
 8000d00:	781b      	ldrb	r3, [r3, #0]
}
 8000d02:	0018      	movs	r0, r3
 8000d04:	46bd      	mov	sp, r7
 8000d06:	b004      	add	sp, #16
 8000d08:	bdb0      	pop	{r4, r5, r7, pc}
 8000d0a:	46c0      	nop			@ (mov r8, r8)
 8000d0c:	2000042e 	.word	0x2000042e
 8000d10:	2000042c 	.word	0x2000042c
 8000d14:	0800451c 	.word	0x0800451c
 8000d18:	080046e0 	.word	0x080046e0

08000d1c <character_info>:
		}
	}else{}
}
#else
void character_info( char characterf, uint8_t size)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	0002      	movs	r2, r0
 8000d24:	1dfb      	adds	r3, r7, #7
 8000d26:	701a      	strb	r2, [r3, #0]
 8000d28:	1dbb      	adds	r3, r7, #6
 8000d2a:	1c0a      	adds	r2, r1, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
	if( (characterf >= '!') && (characterf <= 'z') )
 8000d2e:	1dfb      	adds	r3, r7, #7
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b20      	cmp	r3, #32
 8000d34:	d95d      	bls.n	8000df2 <character_info+0xd6>
 8000d36:	1dfb      	adds	r3, r7, #7
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b7a      	cmp	r3, #122	@ 0x7a
 8000d3c:	d859      	bhi.n	8000df2 <character_info+0xd6>
	{
		uint16_t ind=0;
 8000d3e:	230e      	movs	r3, #14
 8000d40:	18fb      	adds	r3, r7, r3
 8000d42:	2200      	movs	r2, #0
 8000d44:	801a      	strh	r2, [r3, #0]
		switch(size)
 8000d46:	1dbb      	adds	r3, r7, #6
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b08      	cmp	r3, #8
 8000d4c:	d002      	beq.n	8000d54 <character_info+0x38>
 8000d4e:	2b16      	cmp	r3, #22
 8000d50:	d028      	beq.n	8000da4 <character_info+0x88>
								while( (*(_10x16chars+firstcharbyte+ind) != 0xCC) && (ind<10) )	{ ind++;}
								charwidth = ind;
								break;
		}
	}else{}
}
 8000d52:	e04e      	b.n	8000df2 <character_info+0xd6>
			case size_5x8:	firstcharbyte = ( (characterf - '!')*5 );
 8000d54:	1dfb      	adds	r3, r7, #7
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	3b21      	subs	r3, #33	@ 0x21
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	1c1a      	adds	r2, r3, #0
 8000d5e:	0092      	lsls	r2, r2, #2
 8000d60:	18d3      	adds	r3, r2, r3
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	4b25      	ldr	r3, [pc, #148]	@ (8000dfc <character_info+0xe0>)
 8000d66:	801a      	strh	r2, [r3, #0]
							while( (*(_5x8chars+firstcharbyte+ind) != 0xCC) && (ind<5) )	{ ind++;}
 8000d68:	e005      	b.n	8000d76 <character_info+0x5a>
 8000d6a:	210e      	movs	r1, #14
 8000d6c:	187b      	adds	r3, r7, r1
 8000d6e:	881a      	ldrh	r2, [r3, #0]
 8000d70:	187b      	adds	r3, r7, r1
 8000d72:	3201      	adds	r2, #1
 8000d74:	801a      	strh	r2, [r3, #0]
 8000d76:	4b21      	ldr	r3, [pc, #132]	@ (8000dfc <character_info+0xe0>)
 8000d78:	881b      	ldrh	r3, [r3, #0]
 8000d7a:	001a      	movs	r2, r3
 8000d7c:	210e      	movs	r1, #14
 8000d7e:	187b      	adds	r3, r7, r1
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	18d2      	adds	r2, r2, r3
 8000d84:	4b1e      	ldr	r3, [pc, #120]	@ (8000e00 <character_info+0xe4>)
 8000d86:	18d3      	adds	r3, r2, r3
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2bcc      	cmp	r3, #204	@ 0xcc
 8000d8c:	d003      	beq.n	8000d96 <character_info+0x7a>
 8000d8e:	187b      	adds	r3, r7, r1
 8000d90:	881b      	ldrh	r3, [r3, #0]
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d9e9      	bls.n	8000d6a <character_info+0x4e>
							charwidth = ind;
 8000d96:	230e      	movs	r3, #14
 8000d98:	18fb      	adds	r3, r7, r3
 8000d9a:	881b      	ldrh	r3, [r3, #0]
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4b19      	ldr	r3, [pc, #100]	@ (8000e04 <character_info+0xe8>)
 8000da0:	701a      	strb	r2, [r3, #0]
							break;
 8000da2:	e026      	b.n	8000df2 <character_info+0xd6>
			case size_10x16:	firstcharbyte = ( (characterf - '!')*20 );
 8000da4:	1dfb      	adds	r3, r7, #7
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	3b21      	subs	r3, #33	@ 0x21
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	2214      	movs	r2, #20
 8000dae:	4353      	muls	r3, r2
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	4b12      	ldr	r3, [pc, #72]	@ (8000dfc <character_info+0xe0>)
 8000db4:	801a      	strh	r2, [r3, #0]
								while( (*(_10x16chars+firstcharbyte+ind) != 0xCC) && (ind<10) )	{ ind++;}
 8000db6:	e005      	b.n	8000dc4 <character_info+0xa8>
 8000db8:	210e      	movs	r1, #14
 8000dba:	187b      	adds	r3, r7, r1
 8000dbc:	881a      	ldrh	r2, [r3, #0]
 8000dbe:	187b      	adds	r3, r7, r1
 8000dc0:	3201      	adds	r2, #1
 8000dc2:	801a      	strh	r2, [r3, #0]
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8000dfc <character_info+0xe0>)
 8000dc6:	881b      	ldrh	r3, [r3, #0]
 8000dc8:	001a      	movs	r2, r3
 8000dca:	210e      	movs	r1, #14
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	18d2      	adds	r2, r2, r3
 8000dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8000e08 <character_info+0xec>)
 8000dd4:	18d3      	adds	r3, r2, r3
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2bcc      	cmp	r3, #204	@ 0xcc
 8000dda:	d003      	beq.n	8000de4 <character_info+0xc8>
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	881b      	ldrh	r3, [r3, #0]
 8000de0:	2b09      	cmp	r3, #9
 8000de2:	d9e9      	bls.n	8000db8 <character_info+0x9c>
								charwidth = ind;
 8000de4:	230e      	movs	r3, #14
 8000de6:	18fb      	adds	r3, r7, r3
 8000de8:	881b      	ldrh	r3, [r3, #0]
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	4b05      	ldr	r3, [pc, #20]	@ (8000e04 <character_info+0xe8>)
 8000dee:	701a      	strb	r2, [r3, #0]
								break;
 8000df0:	46c0      	nop			@ (mov r8, r8)
}
 8000df2:	46c0      	nop			@ (mov r8, r8)
 8000df4:	46bd      	mov	sp, r7
 8000df6:	b004      	add	sp, #16
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	46c0      	nop			@ (mov r8, r8)
 8000dfc:	2000042c 	.word	0x2000042c
 8000e00:	0800451c 	.word	0x0800451c
 8000e04:	2000042e 	.word	0x2000042e
 8000e08:	080046e0 	.word	0x080046e0

08000e0c <fill_rectangle_x1y1_x2y2>:
#endif

void fill_rectangle_x1y1_x2y2(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, uint8_t pixel_status)
{
 8000e0c:	b5b0      	push	{r4, r5, r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	0005      	movs	r5, r0
 8000e14:	000c      	movs	r4, r1
 8000e16:	0010      	movs	r0, r2
 8000e18:	0019      	movs	r1, r3
 8000e1a:	1dfb      	adds	r3, r7, #7
 8000e1c:	1c2a      	adds	r2, r5, #0
 8000e1e:	701a      	strb	r2, [r3, #0]
 8000e20:	1dbb      	adds	r3, r7, #6
 8000e22:	1c22      	adds	r2, r4, #0
 8000e24:	701a      	strb	r2, [r3, #0]
 8000e26:	1d7b      	adds	r3, r7, #5
 8000e28:	1c02      	adds	r2, r0, #0
 8000e2a:	701a      	strb	r2, [r3, #0]
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	1c0a      	adds	r2, r1, #0
 8000e30:	701a      	strb	r2, [r3, #0]
	for(; y1<=y2; y1++)
 8000e32:	e010      	b.n	8000e56 <fill_rectangle_x1y1_x2y2+0x4a>
	{
		draw_line_x(x1,x2,y1,pixel_status);
 8000e34:	2318      	movs	r3, #24
 8000e36:	18fb      	adds	r3, r7, r3
 8000e38:	781c      	ldrb	r4, [r3, #0]
 8000e3a:	1dbb      	adds	r3, r7, #6
 8000e3c:	781a      	ldrb	r2, [r3, #0]
 8000e3e:	1d7b      	adds	r3, r7, #5
 8000e40:	7819      	ldrb	r1, [r3, #0]
 8000e42:	1dfb      	adds	r3, r7, #7
 8000e44:	7818      	ldrb	r0, [r3, #0]
 8000e46:	0023      	movs	r3, r4
 8000e48:	f000 f810 	bl	8000e6c <draw_line_x>
	for(; y1<=y2; y1++)
 8000e4c:	1dbb      	adds	r3, r7, #6
 8000e4e:	781a      	ldrb	r2, [r3, #0]
 8000e50:	1dbb      	adds	r3, r7, #6
 8000e52:	3201      	adds	r2, #1
 8000e54:	701a      	strb	r2, [r3, #0]
 8000e56:	1dba      	adds	r2, r7, #6
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	7812      	ldrb	r2, [r2, #0]
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d9e8      	bls.n	8000e34 <fill_rectangle_x1y1_x2y2+0x28>
	}
}
 8000e62:	46c0      	nop			@ (mov r8, r8)
 8000e64:	46c0      	nop			@ (mov r8, r8)
 8000e66:	46bd      	mov	sp, r7
 8000e68:	b002      	add	sp, #8
 8000e6a:	bdb0      	pop	{r4, r5, r7, pc}

08000e6c <draw_line_x>:
		setpixel(x,y1,pixel_status);
	}
}

void draw_line_x(uint8_t x1, uint8_t x2,uint8_t y, uint8_t pixel_status)
{
 8000e6c:	b5b0      	push	{r4, r5, r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	0005      	movs	r5, r0
 8000e74:	000c      	movs	r4, r1
 8000e76:	0010      	movs	r0, r2
 8000e78:	0019      	movs	r1, r3
 8000e7a:	1dfb      	adds	r3, r7, #7
 8000e7c:	1c2a      	adds	r2, r5, #0
 8000e7e:	701a      	strb	r2, [r3, #0]
 8000e80:	1dbb      	adds	r3, r7, #6
 8000e82:	1c22      	adds	r2, r4, #0
 8000e84:	701a      	strb	r2, [r3, #0]
 8000e86:	1d7b      	adds	r3, r7, #5
 8000e88:	1c02      	adds	r2, r0, #0
 8000e8a:	701a      	strb	r2, [r3, #0]
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	1c0a      	adds	r2, r1, #0
 8000e90:	701a      	strb	r2, [r3, #0]
	for(; x1<=x2; x1++)
 8000e92:	e00d      	b.n	8000eb0 <draw_line_x+0x44>
	{
		setpixel(x1,y,pixel_status);
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	781a      	ldrb	r2, [r3, #0]
 8000e98:	1d7b      	adds	r3, r7, #5
 8000e9a:	7819      	ldrb	r1, [r3, #0]
 8000e9c:	1dfb      	adds	r3, r7, #7
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f000 f811 	bl	8000ec8 <setpixel>
	for(; x1<=x2; x1++)
 8000ea6:	1dfb      	adds	r3, r7, #7
 8000ea8:	781a      	ldrb	r2, [r3, #0]
 8000eaa:	1dfb      	adds	r3, r7, #7
 8000eac:	3201      	adds	r2, #1
 8000eae:	701a      	strb	r2, [r3, #0]
 8000eb0:	1dfa      	adds	r2, r7, #7
 8000eb2:	1dbb      	adds	r3, r7, #6
 8000eb4:	7812      	ldrb	r2, [r2, #0]
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d9eb      	bls.n	8000e94 <draw_line_x+0x28>
	}
}
 8000ebc:	46c0      	nop			@ (mov r8, r8)
 8000ebe:	46c0      	nop			@ (mov r8, r8)
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	b002      	add	sp, #8
 8000ec4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000ec8 <setpixel>:

void setpixel(uint8_t x, uint8_t y, uint8_t Pixel_status)
{
 8000ec8:	b5b0      	push	{r4, r5, r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	0004      	movs	r4, r0
 8000ed0:	0008      	movs	r0, r1
 8000ed2:	0011      	movs	r1, r2
 8000ed4:	1dfb      	adds	r3, r7, #7
 8000ed6:	1c22      	adds	r2, r4, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
 8000eda:	1dbb      	adds	r3, r7, #6
 8000edc:	1c02      	adds	r2, r0, #0
 8000ede:	701a      	strb	r2, [r3, #0]
 8000ee0:	1d7b      	adds	r3, r7, #5
 8000ee2:	1c0a      	adds	r2, r1, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
	if(((x>=0)&&(x<pixels_x))&&((y>=0)&&(y<pixels_y)))
 8000ee6:	1dfb      	adds	r3, r7, #7
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b3f      	cmp	r3, #63	@ 0x3f
 8000eec:	d856      	bhi.n	8000f9c <setpixel+0xd4>
 8000eee:	1dbb      	adds	r3, r7, #6
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	b25b      	sxtb	r3, r3
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	db51      	blt.n	8000f9c <setpixel+0xd4>
	{
		uint8_t page=0,dotinpage=0;
 8000ef8:	210f      	movs	r1, #15
 8000efa:	187b      	adds	r3, r7, r1
 8000efc:	2200      	movs	r2, #0
 8000efe:	701a      	strb	r2, [r3, #0]
 8000f00:	250e      	movs	r5, #14
 8000f02:	197b      	adds	r3, r7, r5
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
		page=x/8;
 8000f08:	187b      	adds	r3, r7, r1
 8000f0a:	1dfa      	adds	r2, r7, #7
 8000f0c:	7812      	ldrb	r2, [r2, #0]
 8000f0e:	08d2      	lsrs	r2, r2, #3
 8000f10:	701a      	strb	r2, [r3, #0]
		dotinpage=(0x01<<(x%8));
 8000f12:	1dfb      	adds	r3, r7, #7
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2207      	movs	r2, #7
 8000f18:	4013      	ands	r3, r2
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	409a      	lsls	r2, r3
 8000f1e:	197b      	adds	r3, r7, r5
 8000f20:	701a      	strb	r2, [r3, #0]
		if(Pixel_status == Pixel_on)
 8000f22:	1d7b      	adds	r3, r7, #5
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b80      	cmp	r3, #128	@ 0x80
 8000f28:	d117      	bne.n	8000f5a <setpixel+0x92>
		{
			disp_mat[y][page] |= dotinpage;
 8000f2a:	1dbb      	adds	r3, r7, #6
 8000f2c:	781a      	ldrb	r2, [r3, #0]
 8000f2e:	000c      	movs	r4, r1
 8000f30:	187b      	adds	r3, r7, r1
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	491b      	ldr	r1, [pc, #108]	@ (8000fa4 <setpixel+0xdc>)
 8000f36:	00d2      	lsls	r2, r2, #3
 8000f38:	188a      	adds	r2, r1, r2
 8000f3a:	5cd3      	ldrb	r3, [r2, r3]
 8000f3c:	b2d8      	uxtb	r0, r3
 8000f3e:	1dbb      	adds	r3, r7, #6
 8000f40:	781a      	ldrb	r2, [r3, #0]
 8000f42:	193b      	adds	r3, r7, r4
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	1979      	adds	r1, r7, r5
 8000f48:	7809      	ldrb	r1, [r1, #0]
 8000f4a:	4301      	orrs	r1, r0
 8000f4c:	b2c8      	uxtb	r0, r1
 8000f4e:	4915      	ldr	r1, [pc, #84]	@ (8000fa4 <setpixel+0xdc>)
 8000f50:	00d2      	lsls	r2, r2, #3
 8000f52:	188a      	adds	r2, r1, r2
 8000f54:	1c01      	adds	r1, r0, #0
 8000f56:	54d1      	strb	r1, [r2, r3]
			{
				disp_mat[y][page] &= (~dotinpage);
			}	else{}
		}
	}	else{}
}
 8000f58:	e020      	b.n	8000f9c <setpixel+0xd4>
			if(Pixel_status == Pixel_off)
 8000f5a:	1d7b      	adds	r3, r7, #5
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f60:	d11c      	bne.n	8000f9c <setpixel+0xd4>
				disp_mat[y][page] &= (~dotinpage);
 8000f62:	1dbb      	adds	r3, r7, #6
 8000f64:	781a      	ldrb	r2, [r3, #0]
 8000f66:	200f      	movs	r0, #15
 8000f68:	183b      	adds	r3, r7, r0
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	490d      	ldr	r1, [pc, #52]	@ (8000fa4 <setpixel+0xdc>)
 8000f6e:	00d2      	lsls	r2, r2, #3
 8000f70:	188a      	adds	r2, r1, r2
 8000f72:	5cd3      	ldrb	r3, [r2, r3]
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	b25b      	sxtb	r3, r3
 8000f78:	220e      	movs	r2, #14
 8000f7a:	18ba      	adds	r2, r7, r2
 8000f7c:	7812      	ldrb	r2, [r2, #0]
 8000f7e:	b252      	sxtb	r2, r2
 8000f80:	43d2      	mvns	r2, r2
 8000f82:	b252      	sxtb	r2, r2
 8000f84:	4013      	ands	r3, r2
 8000f86:	b259      	sxtb	r1, r3
 8000f88:	1dbb      	adds	r3, r7, #6
 8000f8a:	781a      	ldrb	r2, [r3, #0]
 8000f8c:	183b      	adds	r3, r7, r0
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	b2c8      	uxtb	r0, r1
 8000f92:	4904      	ldr	r1, [pc, #16]	@ (8000fa4 <setpixel+0xdc>)
 8000f94:	00d2      	lsls	r2, r2, #3
 8000f96:	188a      	adds	r2, r1, r2
 8000f98:	1c01      	adds	r1, r0, #0
 8000f9a:	54d1      	strb	r1, [r2, r3]
}
 8000f9c:	46c0      	nop			@ (mov r8, r8)
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	b004      	add	sp, #16
 8000fa2:	bdb0      	pop	{r4, r5, r7, pc}
 8000fa4:	2000002c 	.word	0x2000002c

08000fa8 <delete_disp_mat>:

void delete_disp_mat(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
	uint8_t j=0,k=0;
 8000fae:	1dfb      	adds	r3, r7, #7
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
 8000fb4:	1dbb      	adds	r3, r7, #6
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
	for(j=0; j<(pixels_x/8); j++)
 8000fba:	1dfb      	adds	r3, r7, #7
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	701a      	strb	r2, [r3, #0]
 8000fc0:	e01b      	b.n	8000ffa <delete_disp_mat+0x52>
	{
		for(k=0; k<pixels_y; k++)
 8000fc2:	1dbb      	adds	r3, r7, #6
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]
 8000fc8:	e00d      	b.n	8000fe6 <delete_disp_mat+0x3e>
		{
			disp_mat[k][j]=0;
 8000fca:	1dbb      	adds	r3, r7, #6
 8000fcc:	781a      	ldrb	r2, [r3, #0]
 8000fce:	1dfb      	adds	r3, r7, #7
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	490e      	ldr	r1, [pc, #56]	@ (800100c <delete_disp_mat+0x64>)
 8000fd4:	00d2      	lsls	r2, r2, #3
 8000fd6:	188a      	adds	r2, r1, r2
 8000fd8:	2100      	movs	r1, #0
 8000fda:	54d1      	strb	r1, [r2, r3]
		for(k=0; k<pixels_y; k++)
 8000fdc:	1dbb      	adds	r3, r7, #6
 8000fde:	781a      	ldrb	r2, [r3, #0]
 8000fe0:	1dbb      	adds	r3, r7, #6
 8000fe2:	3201      	adds	r2, #1
 8000fe4:	701a      	strb	r2, [r3, #0]
 8000fe6:	1dbb      	adds	r3, r7, #6
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	b25b      	sxtb	r3, r3
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	daec      	bge.n	8000fca <delete_disp_mat+0x22>
	for(j=0; j<(pixels_x/8); j++)
 8000ff0:	1dfb      	adds	r3, r7, #7
 8000ff2:	781a      	ldrb	r2, [r3, #0]
 8000ff4:	1dfb      	adds	r3, r7, #7
 8000ff6:	3201      	adds	r2, #1
 8000ff8:	701a      	strb	r2, [r3, #0]
 8000ffa:	1dfb      	adds	r3, r7, #7
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b07      	cmp	r3, #7
 8001000:	d9df      	bls.n	8000fc2 <delete_disp_mat+0x1a>
		}
	}
}
 8001002:	46c0      	nop			@ (mov r8, r8)
 8001004:	46c0      	nop			@ (mov r8, r8)
 8001006:	46bd      	mov	sp, r7
 8001008:	b002      	add	sp, #8
 800100a:	bd80      	pop	{r7, pc}
 800100c:	2000002c 	.word	0x2000002c

08001010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	0002      	movs	r2, r0
 8001018:	1dfb      	adds	r3, r7, #7
 800101a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800101c:	1dfb      	adds	r3, r7, #7
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b7f      	cmp	r3, #127	@ 0x7f
 8001022:	d809      	bhi.n	8001038 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001024:	1dfb      	adds	r3, r7, #7
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	001a      	movs	r2, r3
 800102a:	231f      	movs	r3, #31
 800102c:	401a      	ands	r2, r3
 800102e:	4b04      	ldr	r3, [pc, #16]	@ (8001040 <__NVIC_EnableIRQ+0x30>)
 8001030:	2101      	movs	r1, #1
 8001032:	4091      	lsls	r1, r2
 8001034:	000a      	movs	r2, r1
 8001036:	601a      	str	r2, [r3, #0]
  }
}
 8001038:	46c0      	nop			@ (mov r8, r8)
 800103a:	46bd      	mov	sp, r7
 800103c:	b002      	add	sp, #8
 800103e:	bd80      	pop	{r7, pc}
 8001040:	e000e100 	.word	0xe000e100

08001044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	0002      	movs	r2, r0
 800104c:	6039      	str	r1, [r7, #0]
 800104e:	1dfb      	adds	r3, r7, #7
 8001050:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001052:	1dfb      	adds	r3, r7, #7
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b7f      	cmp	r3, #127	@ 0x7f
 8001058:	d828      	bhi.n	80010ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800105a:	4a2f      	ldr	r2, [pc, #188]	@ (8001118 <__NVIC_SetPriority+0xd4>)
 800105c:	1dfb      	adds	r3, r7, #7
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	b25b      	sxtb	r3, r3
 8001062:	089b      	lsrs	r3, r3, #2
 8001064:	33c0      	adds	r3, #192	@ 0xc0
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	589b      	ldr	r3, [r3, r2]
 800106a:	1dfa      	adds	r2, r7, #7
 800106c:	7812      	ldrb	r2, [r2, #0]
 800106e:	0011      	movs	r1, r2
 8001070:	2203      	movs	r2, #3
 8001072:	400a      	ands	r2, r1
 8001074:	00d2      	lsls	r2, r2, #3
 8001076:	21ff      	movs	r1, #255	@ 0xff
 8001078:	4091      	lsls	r1, r2
 800107a:	000a      	movs	r2, r1
 800107c:	43d2      	mvns	r2, r2
 800107e:	401a      	ands	r2, r3
 8001080:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	019b      	lsls	r3, r3, #6
 8001086:	22ff      	movs	r2, #255	@ 0xff
 8001088:	401a      	ands	r2, r3
 800108a:	1dfb      	adds	r3, r7, #7
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	0018      	movs	r0, r3
 8001090:	2303      	movs	r3, #3
 8001092:	4003      	ands	r3, r0
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001098:	481f      	ldr	r0, [pc, #124]	@ (8001118 <__NVIC_SetPriority+0xd4>)
 800109a:	1dfb      	adds	r3, r7, #7
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	b25b      	sxtb	r3, r3
 80010a0:	089b      	lsrs	r3, r3, #2
 80010a2:	430a      	orrs	r2, r1
 80010a4:	33c0      	adds	r3, #192	@ 0xc0
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80010aa:	e031      	b.n	8001110 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010ac:	4a1b      	ldr	r2, [pc, #108]	@ (800111c <__NVIC_SetPriority+0xd8>)
 80010ae:	1dfb      	adds	r3, r7, #7
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	0019      	movs	r1, r3
 80010b4:	230f      	movs	r3, #15
 80010b6:	400b      	ands	r3, r1
 80010b8:	3b08      	subs	r3, #8
 80010ba:	089b      	lsrs	r3, r3, #2
 80010bc:	3306      	adds	r3, #6
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	18d3      	adds	r3, r2, r3
 80010c2:	3304      	adds	r3, #4
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	1dfa      	adds	r2, r7, #7
 80010c8:	7812      	ldrb	r2, [r2, #0]
 80010ca:	0011      	movs	r1, r2
 80010cc:	2203      	movs	r2, #3
 80010ce:	400a      	ands	r2, r1
 80010d0:	00d2      	lsls	r2, r2, #3
 80010d2:	21ff      	movs	r1, #255	@ 0xff
 80010d4:	4091      	lsls	r1, r2
 80010d6:	000a      	movs	r2, r1
 80010d8:	43d2      	mvns	r2, r2
 80010da:	401a      	ands	r2, r3
 80010dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	019b      	lsls	r3, r3, #6
 80010e2:	22ff      	movs	r2, #255	@ 0xff
 80010e4:	401a      	ands	r2, r3
 80010e6:	1dfb      	adds	r3, r7, #7
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	0018      	movs	r0, r3
 80010ec:	2303      	movs	r3, #3
 80010ee:	4003      	ands	r3, r0
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010f4:	4809      	ldr	r0, [pc, #36]	@ (800111c <__NVIC_SetPriority+0xd8>)
 80010f6:	1dfb      	adds	r3, r7, #7
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	001c      	movs	r4, r3
 80010fc:	230f      	movs	r3, #15
 80010fe:	4023      	ands	r3, r4
 8001100:	3b08      	subs	r3, #8
 8001102:	089b      	lsrs	r3, r3, #2
 8001104:	430a      	orrs	r2, r1
 8001106:	3306      	adds	r3, #6
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	18c3      	adds	r3, r0, r3
 800110c:	3304      	adds	r3, #4
 800110e:	601a      	str	r2, [r3, #0]
}
 8001110:	46c0      	nop			@ (mov r8, r8)
 8001112:	46bd      	mov	sp, r7
 8001114:	b003      	add	sp, #12
 8001116:	bd90      	pop	{r4, r7, pc}
 8001118:	e000e100 	.word	0xe000e100
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2210      	movs	r2, #16
 8001130:	4393      	bics	r3, r2
 8001132:	001a      	movs	r2, r3
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	431a      	orrs	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	605a      	str	r2, [r3, #4]
}
 800113c:	46c0      	nop			@ (mov r8, r8)
 800113e:	46bd      	mov	sp, r7
 8001140:	b002      	add	sp, #8
 8001142:	bd80      	pop	{r7, pc}

08001144 <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	2208      	movs	r2, #8
 8001152:	4393      	bics	r3, r2
 8001154:	001a      	movs	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	605a      	str	r2, [r3, #4]
}
 800115a:	46c0      	nop			@ (mov r8, r8)
 800115c:	46bd      	mov	sp, r7
 800115e:	b002      	add	sp, #8
 8001160:	bd80      	pop	{r7, pc}

08001162 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2201      	movs	r2, #1
 8001170:	431a      	orrs	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	601a      	str	r2, [r3, #0]
}
 8001176:	46c0      	nop			@ (mov r8, r8)
 8001178:	46bd      	mov	sp, r7
 800117a:	b002      	add	sp, #8
 800117c:	bd80      	pop	{r7, pc}

0800117e <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2280      	movs	r2, #128	@ 0x80
 800118c:	4393      	bics	r3, r2
 800118e:	001a      	movs	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	601a      	str	r2, [r3, #0]
}
 8001194:	46c0      	nop			@ (mov r8, r8)
 8001196:	46bd      	mov	sp, r7
 8001198:	b002      	add	sp, #8
 800119a:	bd80      	pop	{r7, pc}

0800119c <LL_TIM_SetCounter>:
  * @param  TIMx Timer instance
  * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80011ac:	46c0      	nop			@ (mov r8, r8)
 80011ae:	46bd      	mov	sp, r7
 80011b0:	b002      	add	sp, #8
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80011c4:	46c0      	nop			@ (mov r8, r8)
 80011c6:	46bd      	mov	sp, r7
 80011c8:	b002      	add	sp, #8
 80011ca:	bd80      	pop	{r7, pc}

080011cc <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a1a      	ldr	r2, [r3, #32]
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	431a      	orrs	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	621a      	str	r2, [r3, #32]
}
 80011e2:	46c0      	nop			@ (mov r8, r8)
 80011e4:	46bd      	mov	sp, r7
 80011e6:	b002      	add	sp, #8
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d01e      	beq.n	800123a <LL_TIM_OC_DisableFast+0x4e>
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	2b04      	cmp	r3, #4
 8001200:	d019      	beq.n	8001236 <LL_TIM_OC_DisableFast+0x4a>
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	2b10      	cmp	r3, #16
 8001206:	d014      	beq.n	8001232 <LL_TIM_OC_DisableFast+0x46>
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	2b40      	cmp	r3, #64	@ 0x40
 800120c:	d00f      	beq.n	800122e <LL_TIM_OC_DisableFast+0x42>
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	2380      	movs	r3, #128	@ 0x80
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	429a      	cmp	r2, r3
 8001216:	d008      	beq.n	800122a <LL_TIM_OC_DisableFast+0x3e>
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	2380      	movs	r3, #128	@ 0x80
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	429a      	cmp	r2, r3
 8001220:	d101      	bne.n	8001226 <LL_TIM_OC_DisableFast+0x3a>
 8001222:	2305      	movs	r3, #5
 8001224:	e00a      	b.n	800123c <LL_TIM_OC_DisableFast+0x50>
 8001226:	2306      	movs	r3, #6
 8001228:	e008      	b.n	800123c <LL_TIM_OC_DisableFast+0x50>
 800122a:	2304      	movs	r3, #4
 800122c:	e006      	b.n	800123c <LL_TIM_OC_DisableFast+0x50>
 800122e:	2303      	movs	r3, #3
 8001230:	e004      	b.n	800123c <LL_TIM_OC_DisableFast+0x50>
 8001232:	2302      	movs	r3, #2
 8001234:	e002      	b.n	800123c <LL_TIM_OC_DisableFast+0x50>
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <LL_TIM_OC_DisableFast+0x50>
 800123a:	2300      	movs	r3, #0
 800123c:	200f      	movs	r0, #15
 800123e:	183a      	adds	r2, r7, r0
 8001240:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	3318      	adds	r3, #24
 8001246:	0019      	movs	r1, r3
 8001248:	183b      	adds	r3, r7, r0
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	4a0a      	ldr	r2, [pc, #40]	@ (8001278 <LL_TIM_OC_DisableFast+0x8c>)
 800124e:	5cd3      	ldrb	r3, [r2, r3]
 8001250:	18cb      	adds	r3, r1, r3
 8001252:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	183a      	adds	r2, r7, r0
 800125a:	7812      	ldrb	r2, [r2, #0]
 800125c:	4907      	ldr	r1, [pc, #28]	@ (800127c <LL_TIM_OC_DisableFast+0x90>)
 800125e:	5c8a      	ldrb	r2, [r1, r2]
 8001260:	0011      	movs	r1, r2
 8001262:	2204      	movs	r2, #4
 8001264:	408a      	lsls	r2, r1
 8001266:	43d2      	mvns	r2, r2
 8001268:	401a      	ands	r2, r3
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	601a      	str	r2, [r3, #0]

}
 800126e:	46c0      	nop			@ (mov r8, r8)
 8001270:	46bd      	mov	sp, r7
 8001272:	b004      	add	sp, #16
 8001274:	bd80      	pop	{r7, pc}
 8001276:	46c0      	nop			@ (mov r8, r8)
 8001278:	08005094 	.word	0x08005094
 800127c:	0800509c 	.word	0x0800509c

08001280 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001290:	46c0      	nop			@ (mov r8, r8)
 8001292:	46bd      	mov	sp, r7
 8001294:	b002      	add	sp, #8
 8001296:	bd80      	pop	{r7, pc}

08001298 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	4a05      	ldr	r2, [pc, #20]	@ (80012bc <LL_TIM_SetClockSource+0x24>)
 80012a8:	401a      	ands	r2, r3
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	431a      	orrs	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	609a      	str	r2, [r3, #8]
}
 80012b2:	46c0      	nop			@ (mov r8, r8)
 80012b4:	46bd      	mov	sp, r7
 80012b6:	b002      	add	sp, #8
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	46c0      	nop			@ (mov r8, r8)
 80012bc:	ffffbff8 	.word	0xffffbff8

080012c0 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	2270      	movs	r2, #112	@ 0x70
 80012d0:	4393      	bics	r3, r2
 80012d2:	001a      	movs	r2, r3
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	431a      	orrs	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	605a      	str	r2, [r3, #4]
}
 80012dc:	46c0      	nop			@ (mov r8, r8)
 80012de:	46bd      	mov	sp, r7
 80012e0:	b002      	add	sp, #8
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	2280      	movs	r2, #128	@ 0x80
 80012f2:	4393      	bics	r3, r2
 80012f4:	001a      	movs	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	609a      	str	r2, [r3, #8]
}
 80012fa:	46c0      	nop			@ (mov r8, r8)
 80012fc:	46bd      	mov	sp, r7
 80012fe:	b002      	add	sp, #8
 8001300:	bd80      	pop	{r7, pc}

08001302 <LL_TIM_EnableIT_CC1>:
  * @rmtoll DIER         CC1IE         LL_TIM_EnableIT_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	2202      	movs	r2, #2
 8001310:	431a      	orrs	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	60da      	str	r2, [r3, #12]
}
 8001316:	46c0      	nop			@ (mov r8, r8)
 8001318:	46bd      	mov	sp, r7
 800131a:	b002      	add	sp, #8
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001320:	b590      	push	{r4, r7, lr}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], SYSCFG_EXTICR1_EXTI0 << (Line >> 16), Port << (Line >> 16));
 800132a:	4a0f      	ldr	r2, [pc, #60]	@ (8001368 <LL_SYSCFG_SetEXTISource+0x48>)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	21ff      	movs	r1, #255	@ 0xff
 8001330:	400b      	ands	r3, r1
 8001332:	3302      	adds	r3, #2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	589b      	ldr	r3, [r3, r2]
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	0c12      	lsrs	r2, r2, #16
 800133c:	210f      	movs	r1, #15
 800133e:	4091      	lsls	r1, r2
 8001340:	000a      	movs	r2, r1
 8001342:	43d2      	mvns	r2, r2
 8001344:	401a      	ands	r2, r3
 8001346:	0011      	movs	r1, r2
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	0c1b      	lsrs	r3, r3, #16
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	409a      	lsls	r2, r3
 8001350:	4805      	ldr	r0, [pc, #20]	@ (8001368 <LL_SYSCFG_SetEXTISource+0x48>)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	24ff      	movs	r4, #255	@ 0xff
 8001356:	4023      	ands	r3, r4
 8001358:	430a      	orrs	r2, r1
 800135a:	3302      	adds	r3, #2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	501a      	str	r2, [r3, r0]
}
 8001360:	46c0      	nop			@ (mov r8, r8)
 8001362:	46bd      	mov	sp, r7
 8001364:	b003      	add	sp, #12
 8001366:	bd90      	pop	{r4, r7, pc}
 8001368:	40010000 	.word	0x40010000

0800136c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6819      	ldr	r1, [r3, #0]
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	435b      	muls	r3, r3
 8001380:	001a      	movs	r2, r3
 8001382:	0013      	movs	r3, r2
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	43db      	mvns	r3, r3
 800138a:	400b      	ands	r3, r1
 800138c:	001a      	movs	r2, r3
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	435b      	muls	r3, r3
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	434b      	muls	r3, r1
 8001396:	431a      	orrs	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	601a      	str	r2, [r3, #0]
}
 800139c:	46c0      	nop			@ (mov r8, r8)
 800139e:	46bd      	mov	sp, r7
 80013a0:	b004      	add	sp, #16
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	68d9      	ldr	r1, [r3, #12]
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	435b      	muls	r3, r3
 80013b8:	001a      	movs	r2, r3
 80013ba:	0013      	movs	r3, r2
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	189b      	adds	r3, r3, r2
 80013c0:	43db      	mvns	r3, r3
 80013c2:	400b      	ands	r3, r1
 80013c4:	001a      	movs	r2, r3
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	435b      	muls	r3, r3
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	434b      	muls	r3, r1
 80013ce:	431a      	orrs	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	60da      	str	r2, [r3, #12]
}
 80013d4:	46c0      	nop			@ (mov r8, r8)
 80013d6:	46bd      	mov	sp, r7
 80013d8:	b004      	add	sp, #16
 80013da:	bd80      	pop	{r7, pc}

080013dc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013ec:	46c0      	nop			@ (mov r8, r8)
 80013ee:	46bd      	mov	sp, r7
 80013f0:	b002      	add	sp, #8
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80013fc:	4b07      	ldr	r3, [pc, #28]	@ (800141c <LL_AHB1_GRP1_EnableClock+0x28>)
 80013fe:	6959      	ldr	r1, [r3, #20]
 8001400:	4b06      	ldr	r3, [pc, #24]	@ (800141c <LL_AHB1_GRP1_EnableClock+0x28>)
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	430a      	orrs	r2, r1
 8001406:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001408:	4b04      	ldr	r3, [pc, #16]	@ (800141c <LL_AHB1_GRP1_EnableClock+0x28>)
 800140a:	695b      	ldr	r3, [r3, #20]
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	4013      	ands	r3, r2
 8001410:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001412:	68fb      	ldr	r3, [r7, #12]
}
 8001414:	46c0      	nop			@ (mov r8, r8)
 8001416:	46bd      	mov	sp, r7
 8001418:	b004      	add	sp, #16
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40021000 	.word	0x40021000

08001420 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001428:	4b07      	ldr	r3, [pc, #28]	@ (8001448 <LL_APB1_GRP1_EnableClock+0x28>)
 800142a:	69d9      	ldr	r1, [r3, #28]
 800142c:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <LL_APB1_GRP1_EnableClock+0x28>)
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	430a      	orrs	r2, r1
 8001432:	61da      	str	r2, [r3, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001434:	4b04      	ldr	r3, [pc, #16]	@ (8001448 <LL_APB1_GRP1_EnableClock+0x28>)
 8001436:	69db      	ldr	r3, [r3, #28]
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	4013      	ands	r3, r2
 800143c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800143e:	68fb      	ldr	r3, [r7, #12]
}
 8001440:	46c0      	nop			@ (mov r8, r8)
 8001442:	46bd      	mov	sp, r7
 8001444:	b004      	add	sp, #16
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40021000 	.word	0x40021000

0800144c <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001454:	4b07      	ldr	r3, [pc, #28]	@ (8001474 <LL_APB1_GRP2_EnableClock+0x28>)
 8001456:	6999      	ldr	r1, [r3, #24]
 8001458:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <LL_APB1_GRP2_EnableClock+0x28>)
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	430a      	orrs	r2, r1
 800145e:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001460:	4b04      	ldr	r3, [pc, #16]	@ (8001474 <LL_APB1_GRP2_EnableClock+0x28>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	4013      	ands	r3, r2
 8001468:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800146a:	68fb      	ldr	r3, [r7, #12]
}
 800146c:	46c0      	nop			@ (mov r8, r8)
 800146e:	46bd      	mov	sp, r7
 8001470:	b004      	add	sp, #16
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40021000 	.word	0x40021000

08001478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800147e:	f000 fe33 	bl	80020e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001482:	f000 f81d 	bl	80014c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001486:	f000 f9df 	bl	8001848 <MX_GPIO_Init>
  MX_SPI2_Init();
 800148a:	f000 f8a3 	bl	80015d4 <MX_SPI2_Init>
  MX_TIM15_Init();
 800148e:	f000 f945 	bl	800171c <MX_TIM15_Init>
  MX_I2C2_Init();
 8001492:	f000 f85d 	bl	8001550 <MX_I2C2_Init>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001496:	b662      	cpsie	i
}
 8001498:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN 2 */

  __enable_irq();

  msDelay(10);
 800149a:	200a      	movs	r0, #10
 800149c:	f000 fa4a 	bl	8001934 <msDelay>

  //LCD_init();
  oled_init();
 80014a0:	f7ff f8a6 	bl	80005f0 <oled_init>

  print_bmp_H(21, 63, stpcat, Pixel_on, Overwrite);
 80014a4:	4a05      	ldr	r2, [pc, #20]	@ (80014bc <main+0x44>)
 80014a6:	2300      	movs	r3, #0
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	2380      	movs	r3, #128	@ 0x80
 80014ac:	213f      	movs	r1, #63	@ 0x3f
 80014ae:	2015      	movs	r0, #21
 80014b0:	f7ff f913 	bl	80006da <print_bmp_H>
  print_disp_mat();
 80014b4:	f7fe ffa6 	bl	8000404 <print_disp_mat>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  __NOP();
 80014b8:	46c0      	nop			@ (mov r8, r8)
 80014ba:	e7fd      	b.n	80014b8 <main+0x40>
 80014bc:	08004de8 	.word	0x08004de8

080014c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c0:	b590      	push	{r4, r7, lr}
 80014c2:	b091      	sub	sp, #68	@ 0x44
 80014c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c6:	2410      	movs	r4, #16
 80014c8:	193b      	adds	r3, r7, r4
 80014ca:	0018      	movs	r0, r3
 80014cc:	2330      	movs	r3, #48	@ 0x30
 80014ce:	001a      	movs	r2, r3
 80014d0:	2100      	movs	r1, #0
 80014d2:	f002 ffd3 	bl	800447c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d6:	003b      	movs	r3, r7
 80014d8:	0018      	movs	r0, r3
 80014da:	2310      	movs	r3, #16
 80014dc:	001a      	movs	r2, r3
 80014de:	2100      	movs	r1, #0
 80014e0:	f002 ffcc 	bl	800447c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014e4:	0021      	movs	r1, r4
 80014e6:	187b      	adds	r3, r7, r1
 80014e8:	2201      	movs	r2, #1
 80014ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014ec:	187b      	adds	r3, r7, r1
 80014ee:	2201      	movs	r2, #1
 80014f0:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f2:	187b      	adds	r3, r7, r1
 80014f4:	2202      	movs	r2, #2
 80014f6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014f8:	187b      	adds	r3, r7, r1
 80014fa:	2280      	movs	r2, #128	@ 0x80
 80014fc:	0252      	lsls	r2, r2, #9
 80014fe:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001500:	187b      	adds	r3, r7, r1
 8001502:	2280      	movs	r2, #128	@ 0x80
 8001504:	0352      	lsls	r2, r2, #13
 8001506:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001508:	187b      	adds	r3, r7, r1
 800150a:	2200      	movs	r2, #0
 800150c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800150e:	187b      	adds	r3, r7, r1
 8001510:	0018      	movs	r0, r3
 8001512:	f001 fd0f 	bl	8002f34 <HAL_RCC_OscConfig>
 8001516:	1e03      	subs	r3, r0, #0
 8001518:	d001      	beq.n	800151e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800151a:	f000 fa55 	bl	80019c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800151e:	003b      	movs	r3, r7
 8001520:	2207      	movs	r2, #7
 8001522:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001524:	003b      	movs	r3, r7
 8001526:	2202      	movs	r2, #2
 8001528:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800152a:	003b      	movs	r3, r7
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001530:	003b      	movs	r3, r7
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001536:	003b      	movs	r3, r7
 8001538:	2101      	movs	r1, #1
 800153a:	0018      	movs	r0, r3
 800153c:	f002 f814 	bl	8003568 <HAL_RCC_ClockConfig>
 8001540:	1e03      	subs	r3, r0, #0
 8001542:	d001      	beq.n	8001548 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001544:	f000 fa40 	bl	80019c8 <Error_Handler>
  }
}
 8001548:	46c0      	nop			@ (mov r8, r8)
 800154a:	46bd      	mov	sp, r7
 800154c:	b011      	add	sp, #68	@ 0x44
 800154e:	bd90      	pop	{r4, r7, pc}

08001550 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001554:	4b1c      	ldr	r3, [pc, #112]	@ (80015c8 <MX_I2C2_Init+0x78>)
 8001556:	4a1d      	ldr	r2, [pc, #116]	@ (80015cc <MX_I2C2_Init+0x7c>)
 8001558:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10805E89;
 800155a:	4b1b      	ldr	r3, [pc, #108]	@ (80015c8 <MX_I2C2_Init+0x78>)
 800155c:	4a1c      	ldr	r2, [pc, #112]	@ (80015d0 <MX_I2C2_Init+0x80>)
 800155e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001560:	4b19      	ldr	r3, [pc, #100]	@ (80015c8 <MX_I2C2_Init+0x78>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001566:	4b18      	ldr	r3, [pc, #96]	@ (80015c8 <MX_I2C2_Init+0x78>)
 8001568:	2201      	movs	r2, #1
 800156a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800156c:	4b16      	ldr	r3, [pc, #88]	@ (80015c8 <MX_I2C2_Init+0x78>)
 800156e:	2200      	movs	r2, #0
 8001570:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001572:	4b15      	ldr	r3, [pc, #84]	@ (80015c8 <MX_I2C2_Init+0x78>)
 8001574:	2200      	movs	r2, #0
 8001576:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001578:	4b13      	ldr	r3, [pc, #76]	@ (80015c8 <MX_I2C2_Init+0x78>)
 800157a:	2200      	movs	r2, #0
 800157c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800157e:	4b12      	ldr	r3, [pc, #72]	@ (80015c8 <MX_I2C2_Init+0x78>)
 8001580:	2200      	movs	r2, #0
 8001582:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001584:	4b10      	ldr	r3, [pc, #64]	@ (80015c8 <MX_I2C2_Init+0x78>)
 8001586:	2200      	movs	r2, #0
 8001588:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800158a:	4b0f      	ldr	r3, [pc, #60]	@ (80015c8 <MX_I2C2_Init+0x78>)
 800158c:	0018      	movs	r0, r3
 800158e:	f001 f833 	bl	80025f8 <HAL_I2C_Init>
 8001592:	1e03      	subs	r3, r0, #0
 8001594:	d001      	beq.n	800159a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001596:	f000 fa17 	bl	80019c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 800159a:	2380      	movs	r3, #128	@ 0x80
 800159c:	015a      	lsls	r2, r3, #5
 800159e:	4b0a      	ldr	r3, [pc, #40]	@ (80015c8 <MX_I2C2_Init+0x78>)
 80015a0:	0011      	movs	r1, r2
 80015a2:	0018      	movs	r0, r3
 80015a4:	f001 fc2e 	bl	8002e04 <HAL_I2CEx_ConfigAnalogFilter>
 80015a8:	1e03      	subs	r3, r0, #0
 80015aa:	d001      	beq.n	80015b0 <MX_I2C2_Init+0x60>
  {
    Error_Handler();
 80015ac:	f000 fa0c 	bl	80019c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80015b0:	4b05      	ldr	r3, [pc, #20]	@ (80015c8 <MX_I2C2_Init+0x78>)
 80015b2:	2100      	movs	r1, #0
 80015b4:	0018      	movs	r0, r3
 80015b6:	f001 fc71 	bl	8002e9c <HAL_I2CEx_ConfigDigitalFilter>
 80015ba:	1e03      	subs	r3, r0, #0
 80015bc:	d001      	beq.n	80015c2 <MX_I2C2_Init+0x72>
  {
    Error_Handler();
 80015be:	f000 fa03 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80015c2:	46c0      	nop			@ (mov r8, r8)
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000430 	.word	0x20000430
 80015cc:	40005800 	.word	0x40005800
 80015d0:	10805e89 	.word	0x10805e89

080015d4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80015d4:	b590      	push	{r4, r7, lr}
 80015d6:	b091      	sub	sp, #68	@ 0x44
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80015da:	2418      	movs	r4, #24
 80015dc:	193b      	adds	r3, r7, r4
 80015de:	0018      	movs	r0, r3
 80015e0:	2328      	movs	r3, #40	@ 0x28
 80015e2:	001a      	movs	r2, r3
 80015e4:	2100      	movs	r1, #0
 80015e6:	f002 ff49 	bl	800447c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ea:	003b      	movs	r3, r7
 80015ec:	0018      	movs	r0, r3
 80015ee:	2318      	movs	r3, #24
 80015f0:	001a      	movs	r2, r3
 80015f2:	2100      	movs	r1, #0
 80015f4:	f002 ff42 	bl	800447c <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80015f8:	2380      	movs	r3, #128	@ 0x80
 80015fa:	01db      	lsls	r3, r3, #7
 80015fc:	0018      	movs	r0, r3
 80015fe:	f7ff ff0f 	bl	8001420 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001602:	2380      	movs	r3, #128	@ 0x80
 8001604:	02db      	lsls	r3, r3, #11
 8001606:	0018      	movs	r0, r3
 8001608:	f7ff fef4 	bl	80013f4 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 800160c:	003b      	movs	r3, r7
 800160e:	2280      	movs	r2, #128	@ 0x80
 8001610:	0192      	lsls	r2, r2, #6
 8001612:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001614:	003b      	movs	r3, r7
 8001616:	2202      	movs	r2, #2
 8001618:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800161a:	003b      	movs	r3, r7
 800161c:	2203      	movs	r2, #3
 800161e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001620:	003b      	movs	r3, r7
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001626:	003b      	movs	r3, r7
 8001628:	2202      	movs	r2, #2
 800162a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 800162c:	003b      	movs	r3, r7
 800162e:	2200      	movs	r2, #0
 8001630:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001632:	003b      	movs	r3, r7
 8001634:	4a37      	ldr	r2, [pc, #220]	@ (8001714 <MX_SPI2_Init+0x140>)
 8001636:	0019      	movs	r1, r3
 8001638:	0010      	movs	r0, r2
 800163a:	f002 fa81 	bl	8003b40 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 800163e:	003b      	movs	r3, r7
 8001640:	2280      	movs	r2, #128	@ 0x80
 8001642:	01d2      	lsls	r2, r2, #7
 8001644:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001646:	003b      	movs	r3, r7
 8001648:	2202      	movs	r2, #2
 800164a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800164c:	003b      	movs	r3, r7
 800164e:	2203      	movs	r2, #3
 8001650:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001652:	003b      	movs	r3, r7
 8001654:	2200      	movs	r2, #0
 8001656:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001658:	003b      	movs	r3, r7
 800165a:	2200      	movs	r2, #0
 800165c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 800165e:	003b      	movs	r3, r7
 8001660:	2200      	movs	r2, #0
 8001662:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001664:	003b      	movs	r3, r7
 8001666:	4a2b      	ldr	r2, [pc, #172]	@ (8001714 <MX_SPI2_Init+0x140>)
 8001668:	0019      	movs	r1, r3
 800166a:	0010      	movs	r0, r2
 800166c:	f002 fa68 	bl	8003b40 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001670:	003b      	movs	r3, r7
 8001672:	2280      	movs	r2, #128	@ 0x80
 8001674:	0212      	lsls	r2, r2, #8
 8001676:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001678:	003b      	movs	r3, r7
 800167a:	2202      	movs	r2, #2
 800167c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800167e:	003b      	movs	r3, r7
 8001680:	2203      	movs	r2, #3
 8001682:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001684:	003b      	movs	r3, r7
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800168a:	003b      	movs	r3, r7
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8001690:	003b      	movs	r3, r7
 8001692:	2200      	movs	r2, #0
 8001694:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001696:	003b      	movs	r3, r7
 8001698:	4a1e      	ldr	r2, [pc, #120]	@ (8001714 <MX_SPI2_Init+0x140>)
 800169a:	0019      	movs	r1, r3
 800169c:	0010      	movs	r0, r2
 800169e:	f002 fa4f 	bl	8003b40 <LL_GPIO_Init>

  /* SPI2 interrupt Init */
  NVIC_SetPriority(SPI2_IRQn, 2);
 80016a2:	2102      	movs	r1, #2
 80016a4:	201a      	movs	r0, #26
 80016a6:	f7ff fccd 	bl	8001044 <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI2_IRQn);
 80016aa:	201a      	movs	r0, #26
 80016ac:	f7ff fcb0 	bl	8001010 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80016b0:	0021      	movs	r1, r4
 80016b2:	187b      	adds	r3, r7, r1
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
  SPI_InitStruct.Mode = LL_SPI_MODE_SLAVE;
 80016b8:	187b      	adds	r3, r7, r1
 80016ba:	2200      	movs	r2, #0
 80016bc:	605a      	str	r2, [r3, #4]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80016be:	187b      	adds	r3, r7, r1
 80016c0:	22e0      	movs	r2, #224	@ 0xe0
 80016c2:	00d2      	lsls	r2, r2, #3
 80016c4:	609a      	str	r2, [r3, #8]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80016c6:	187b      	adds	r3, r7, r1
 80016c8:	2200      	movs	r2, #0
 80016ca:	60da      	str	r2, [r3, #12]
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80016cc:	187b      	adds	r3, r7, r1
 80016ce:	2200      	movs	r2, #0
 80016d0:	611a      	str	r2, [r3, #16]
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80016d2:	187b      	adds	r3, r7, r1
 80016d4:	2280      	movs	r2, #128	@ 0x80
 80016d6:	0092      	lsls	r2, r2, #2
 80016d8:	615a      	str	r2, [r3, #20]
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80016da:	187b      	adds	r3, r7, r1
 80016dc:	2200      	movs	r2, #0
 80016de:	61da      	str	r2, [r3, #28]
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80016e0:	187b      	adds	r3, r7, r1
 80016e2:	2200      	movs	r2, #0
 80016e4:	621a      	str	r2, [r3, #32]
  SPI_InitStruct.CRCPoly = 7;
 80016e6:	187b      	adds	r3, r7, r1
 80016e8:	2207      	movs	r2, #7
 80016ea:	625a      	str	r2, [r3, #36]	@ 0x24
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 80016ec:	187b      	adds	r3, r7, r1
 80016ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001718 <MX_SPI2_Init+0x144>)
 80016f0:	0019      	movs	r1, r3
 80016f2:	0010      	movs	r0, r2
 80016f4:	f002 fab4 	bl	8003c60 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 80016f8:	4b07      	ldr	r3, [pc, #28]	@ (8001718 <MX_SPI2_Init+0x144>)
 80016fa:	2100      	movs	r1, #0
 80016fc:	0018      	movs	r0, r3
 80016fe:	f7ff fd0f 	bl	8001120 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI2);
 8001702:	4b05      	ldr	r3, [pc, #20]	@ (8001718 <MX_SPI2_Init+0x144>)
 8001704:	0018      	movs	r0, r3
 8001706:	f7ff fd1d 	bl	8001144 <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800170a:	46c0      	nop			@ (mov r8, r8)
 800170c:	46bd      	mov	sp, r7
 800170e:	b011      	add	sp, #68	@ 0x44
 8001710:	bd90      	pop	{r4, r7, pc}
 8001712:	46c0      	nop			@ (mov r8, r8)
 8001714:	48000400 	.word	0x48000400
 8001718:	40003800 	.word	0x40003800

0800171c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800171c:	b5b0      	push	{r4, r5, r7, lr}
 800171e:	b094      	sub	sp, #80	@ 0x50
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001722:	253c      	movs	r5, #60	@ 0x3c
 8001724:	197b      	adds	r3, r7, r5
 8001726:	0018      	movs	r0, r3
 8001728:	2314      	movs	r3, #20
 800172a:	001a      	movs	r2, r3
 800172c:	2100      	movs	r1, #0
 800172e:	f002 fea5 	bl	800447c <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001732:	241c      	movs	r4, #28
 8001734:	193b      	adds	r3, r7, r4
 8001736:	0018      	movs	r0, r3
 8001738:	2320      	movs	r3, #32
 800173a:	001a      	movs	r2, r3
 800173c:	2100      	movs	r1, #0
 800173e:	f002 fe9d 	bl	800447c <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	0018      	movs	r0, r3
 8001746:	2318      	movs	r3, #24
 8001748:	001a      	movs	r2, r3
 800174a:	2100      	movs	r1, #0
 800174c:	f002 fe96 	bl	800447c <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_TIM15);
 8001750:	2380      	movs	r3, #128	@ 0x80
 8001752:	025b      	lsls	r3, r3, #9
 8001754:	0018      	movs	r0, r3
 8001756:	f7ff fe79 	bl	800144c <LL_APB1_GRP2_EnableClock>

  /* TIM15 interrupt Init */
  NVIC_SetPriority(TIM15_IRQn, 0);
 800175a:	2100      	movs	r1, #0
 800175c:	2014      	movs	r0, #20
 800175e:	f7ff fc71 	bl	8001044 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM15_IRQn);
 8001762:	2014      	movs	r0, #20
 8001764:	f7ff fc54 	bl	8001010 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  TIM_InitStruct.Prescaler = 48;
 8001768:	197b      	adds	r3, r7, r5
 800176a:	2230      	movs	r2, #48	@ 0x30
 800176c:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800176e:	0029      	movs	r1, r5
 8001770:	187b      	adds	r3, r7, r1
 8001772:	2200      	movs	r2, #0
 8001774:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 65535;
 8001776:	187b      	adds	r3, r7, r1
 8001778:	4a31      	ldr	r2, [pc, #196]	@ (8001840 <MX_TIM15_Init+0x124>)
 800177a:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800177c:	187b      	adds	r3, r7, r1
 800177e:	2200      	movs	r2, #0
 8001780:	60da      	str	r2, [r3, #12]
  TIM_InitStruct.RepetitionCounter = 0;
 8001782:	187b      	adds	r3, r7, r1
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  LL_TIM_Init(TIM15, &TIM_InitStruct);
 8001788:	187b      	adds	r3, r7, r1
 800178a:	4a2e      	ldr	r2, [pc, #184]	@ (8001844 <MX_TIM15_Init+0x128>)
 800178c:	0019      	movs	r1, r3
 800178e:	0010      	movs	r0, r2
 8001790:	f002 fb2c 	bl	8003dec <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM15);
 8001794:	4b2b      	ldr	r3, [pc, #172]	@ (8001844 <MX_TIM15_Init+0x128>)
 8001796:	0018      	movs	r0, r3
 8001798:	f7ff fcf1 	bl	800117e <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM15, LL_TIM_CLOCKSOURCE_INTERNAL);
 800179c:	4b29      	ldr	r3, [pc, #164]	@ (8001844 <MX_TIM15_Init+0x128>)
 800179e:	2100      	movs	r1, #0
 80017a0:	0018      	movs	r0, r3
 80017a2:	f7ff fd79 	bl	8001298 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 80017a6:	0021      	movs	r1, r4
 80017a8:	187b      	adds	r3, r7, r1
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80017ae:	187b      	adds	r3, r7, r1
 80017b0:	2200      	movs	r2, #0
 80017b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80017b4:	187b      	adds	r3, r7, r1
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct.CompareValue = 1;
 80017ba:	187b      	adds	r3, r7, r1
 80017bc:	2201      	movs	r2, #1
 80017be:	60da      	str	r2, [r3, #12]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80017c0:	187b      	adds	r3, r7, r1
 80017c2:	2200      	movs	r2, #0
 80017c4:	611a      	str	r2, [r3, #16]
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 80017c6:	187b      	adds	r3, r7, r1
 80017c8:	2200      	movs	r2, #0
 80017ca:	615a      	str	r2, [r3, #20]
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 80017cc:	187b      	adds	r3, r7, r1
 80017ce:	2200      	movs	r2, #0
 80017d0:	619a      	str	r2, [r3, #24]
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 80017d2:	187b      	adds	r3, r7, r1
 80017d4:	2200      	movs	r2, #0
 80017d6:	61da      	str	r2, [r3, #28]
  LL_TIM_OC_Init(TIM15, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80017d8:	187b      	adds	r3, r7, r1
 80017da:	481a      	ldr	r0, [pc, #104]	@ (8001844 <MX_TIM15_Init+0x128>)
 80017dc:	001a      	movs	r2, r3
 80017de:	2101      	movs	r1, #1
 80017e0:	f002 fb7c 	bl	8003edc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM15, LL_TIM_CHANNEL_CH1);
 80017e4:	4b17      	ldr	r3, [pc, #92]	@ (8001844 <MX_TIM15_Init+0x128>)
 80017e6:	2101      	movs	r1, #1
 80017e8:	0018      	movs	r0, r3
 80017ea:	f7ff fcff 	bl	80011ec <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM15, LL_TIM_TRGO_RESET);
 80017ee:	4b15      	ldr	r3, [pc, #84]	@ (8001844 <MX_TIM15_Init+0x128>)
 80017f0:	2100      	movs	r1, #0
 80017f2:	0018      	movs	r0, r3
 80017f4:	f7ff fd64 	bl	80012c0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM15);
 80017f8:	4b12      	ldr	r3, [pc, #72]	@ (8001844 <MX_TIM15_Init+0x128>)
 80017fa:	0018      	movs	r0, r3
 80017fc:	f7ff fd72 	bl	80012e4 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8001806:	1d3b      	adds	r3, r7, #4
 8001808:	2200      	movs	r2, #0
 800180a:	605a      	str	r2, [r3, #4]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 800180c:	1d3b      	adds	r3, r7, #4
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]
  TIM_BDTRInitStruct.DeadTime = 0;
 8001812:	1d3b      	adds	r3, r7, #4
 8001814:	2200      	movs	r2, #0
 8001816:	731a      	strb	r2, [r3, #12]
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8001818:	1d3b      	adds	r3, r7, #4
 800181a:	2200      	movs	r2, #0
 800181c:	81da      	strh	r2, [r3, #14]
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	2280      	movs	r2, #128	@ 0x80
 8001822:	0192      	lsls	r2, r2, #6
 8001824:	611a      	str	r2, [r3, #16]
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8001826:	1d3b      	adds	r3, r7, #4
 8001828:	2200      	movs	r2, #0
 800182a:	615a      	str	r2, [r3, #20]
  LL_TIM_BDTR_Init(TIM15, &TIM_BDTRInitStruct);
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	4a05      	ldr	r2, [pc, #20]	@ (8001844 <MX_TIM15_Init+0x128>)
 8001830:	0019      	movs	r1, r3
 8001832:	0010      	movs	r0, r2
 8001834:	f002 fbac 	bl	8003f90 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001838:	46c0      	nop			@ (mov r8, r8)
 800183a:	46bd      	mov	sp, r7
 800183c:	b014      	add	sp, #80	@ 0x50
 800183e:	bdb0      	pop	{r4, r5, r7, pc}
 8001840:	0000ffff 	.word	0x0000ffff
 8001844:	40014000 	.word	0x40014000

08001848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001848:	b590      	push	{r4, r7, lr}
 800184a:	b089      	sub	sp, #36	@ 0x24
 800184c:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800184e:	2418      	movs	r4, #24
 8001850:	193b      	adds	r3, r7, r4
 8001852:	0018      	movs	r0, r3
 8001854:	2308      	movs	r3, #8
 8001856:	001a      	movs	r2, r3
 8001858:	2100      	movs	r1, #0
 800185a:	f002 fe0f 	bl	800447c <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185e:	003b      	movs	r3, r7
 8001860:	0018      	movs	r0, r3
 8001862:	2318      	movs	r3, #24
 8001864:	001a      	movs	r2, r3
 8001866:	2100      	movs	r1, #0
 8001868:	f002 fe08 	bl	800447c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800186c:	2380      	movs	r3, #128	@ 0x80
 800186e:	031b      	lsls	r3, r3, #12
 8001870:	0018      	movs	r0, r3
 8001872:	f7ff fdbf 	bl	80013f4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8001876:	2380      	movs	r3, #128	@ 0x80
 8001878:	03db      	lsls	r3, r3, #15
 800187a:	0018      	movs	r0, r3
 800187c:	f7ff fdba 	bl	80013f4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001880:	2380      	movs	r3, #128	@ 0x80
 8001882:	02db      	lsls	r3, r3, #11
 8001884:	0018      	movs	r0, r3
 8001886:	f7ff fdb5 	bl	80013f4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800188a:	2380      	movs	r3, #128	@ 0x80
 800188c:	029b      	lsls	r3, r3, #10
 800188e:	0018      	movs	r0, r3
 8001890:	f7ff fdb0 	bl	80013f4 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(SPI2_EXT_CTR_BSY_GPIO_Port, SPI2_EXT_CTR_BSY_Pin);
 8001894:	2380      	movs	r3, #128	@ 0x80
 8001896:	01db      	lsls	r3, r3, #7
 8001898:	4a24      	ldr	r2, [pc, #144]	@ (800192c <MX_GPIO_Init+0xe4>)
 800189a:	0019      	movs	r1, r3
 800189c:	0010      	movs	r0, r2
 800189e:	f7ff fd9d 	bl	80013dc <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = SPI2_EXT_CTR_BSY_Pin;
 80018a2:	003b      	movs	r3, r7
 80018a4:	2280      	movs	r2, #128	@ 0x80
 80018a6:	01d2      	lsls	r2, r2, #7
 80018a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80018aa:	003b      	movs	r3, r7
 80018ac:	2201      	movs	r2, #1
 80018ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80018b0:	003b      	movs	r3, r7
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018b6:	003b      	movs	r3, r7
 80018b8:	2200      	movs	r2, #0
 80018ba:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018bc:	003b      	movs	r3, r7
 80018be:	2200      	movs	r2, #0
 80018c0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(SPI2_EXT_CTR_BSY_GPIO_Port, &GPIO_InitStruct);
 80018c2:	003b      	movs	r3, r7
 80018c4:	4a19      	ldr	r2, [pc, #100]	@ (800192c <MX_GPIO_Init+0xe4>)
 80018c6:	0019      	movs	r1, r3
 80018c8:	0010      	movs	r0, r2
 80018ca:	f002 f939 	bl	8003b40 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE12);
 80018ce:	2103      	movs	r1, #3
 80018d0:	2001      	movs	r0, #1
 80018d2:	f7ff fd25 	bl	8001320 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(SPI2_CS_GPIO_Port, SPI2_CS_Pin, LL_GPIO_PULL_NO);
 80018d6:	2380      	movs	r3, #128	@ 0x80
 80018d8:	015b      	lsls	r3, r3, #5
 80018da:	4815      	ldr	r0, [pc, #84]	@ (8001930 <MX_GPIO_Init+0xe8>)
 80018dc:	2200      	movs	r2, #0
 80018de:	0019      	movs	r1, r3
 80018e0:	f7ff fd60 	bl	80013a4 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(SPI2_CS_GPIO_Port, SPI2_CS_Pin, LL_GPIO_MODE_INPUT);
 80018e4:	2380      	movs	r3, #128	@ 0x80
 80018e6:	015b      	lsls	r3, r3, #5
 80018e8:	4811      	ldr	r0, [pc, #68]	@ (8001930 <MX_GPIO_Init+0xe8>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	0019      	movs	r1, r3
 80018ee:	f7ff fd3d 	bl	800136c <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_12;
 80018f2:	0021      	movs	r1, r4
 80018f4:	187b      	adds	r3, r7, r1
 80018f6:	2280      	movs	r2, #128	@ 0x80
 80018f8:	0152      	lsls	r2, r2, #5
 80018fa:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 80018fc:	187b      	adds	r3, r7, r1
 80018fe:	2201      	movs	r2, #1
 8001900:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001902:	187b      	adds	r3, r7, r1
 8001904:	2200      	movs	r2, #0
 8001906:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8001908:	187b      	adds	r3, r7, r1
 800190a:	2203      	movs	r2, #3
 800190c:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 800190e:	187b      	adds	r3, r7, r1
 8001910:	0018      	movs	r0, r3
 8001912:	f001 ffd5 	bl	80038c0 <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI4_15_IRQn, 1);
 8001916:	2101      	movs	r1, #1
 8001918:	2007      	movs	r0, #7
 800191a:	f7ff fb93 	bl	8001044 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI4_15_IRQn);
 800191e:	2007      	movs	r0, #7
 8001920:	f7ff fb76 	bl	8001010 <__NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001924:	46c0      	nop			@ (mov r8, r8)
 8001926:	46bd      	mov	sp, r7
 8001928:	b009      	add	sp, #36	@ 0x24
 800192a:	bd90      	pop	{r4, r7, pc}
 800192c:	48000800 	.word	0x48000800
 8001930:	48000400 	.word	0x48000400

08001934 <msDelay>:
	}
#endif
}

void msDelay(uint32_t val)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
	while(val)
 800193c:	e007      	b.n	800194e <msDelay+0x1a>
	{
		val--;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3b01      	subs	r3, #1
 8001942:	607b      	str	r3, [r7, #4]
		usDelay(1000);
 8001944:	23fa      	movs	r3, #250	@ 0xfa
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	0018      	movs	r0, r3
 800194a:	f000 f809 	bl	8001960 <usDelay>
	while(val)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1f4      	bne.n	800193e <msDelay+0xa>
	}
}
 8001954:	46c0      	nop			@ (mov r8, r8)
 8001956:	46c0      	nop			@ (mov r8, r8)
 8001958:	46bd      	mov	sp, r7
 800195a:	b002      	add	sp, #8
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <usDelay>:

void usDelay(uint32_t val)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
#ifdef USE_INTERRUPT_US_DELAY
	//__enable_irq();
	LL_TIM_SetCounter(TIM15, 0);
 8001968:	4b15      	ldr	r3, [pc, #84]	@ (80019c0 <usDelay+0x60>)
 800196a:	2100      	movs	r1, #0
 800196c:	0018      	movs	r0, r3
 800196e:	f7ff fc15 	bl	800119c <LL_TIM_SetCounter>
	LL_TIM_EnableIT_CC1(TIM15);
 8001972:	4b13      	ldr	r3, [pc, #76]	@ (80019c0 <usDelay+0x60>)
 8001974:	0018      	movs	r0, r3
 8001976:	f7ff fcc4 	bl	8001302 <LL_TIM_EnableIT_CC1>
	LL_TIM_OC_SetCompareCH1(TIM15, val);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a10      	ldr	r2, [pc, #64]	@ (80019c0 <usDelay+0x60>)
 800197e:	0019      	movs	r1, r3
 8001980:	0010      	movs	r0, r2
 8001982:	f7ff fc7d 	bl	8001280 <LL_TIM_OC_SetCompareCH1>
	LL_TIM_SetAutoReload(TIM15, val);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a0d      	ldr	r2, [pc, #52]	@ (80019c0 <usDelay+0x60>)
 800198a:	0019      	movs	r1, r3
 800198c:	0010      	movs	r0, r2
 800198e:	f7ff fc11 	bl	80011b4 <LL_TIM_SetAutoReload>
	LL_TIM_EnableCounter(TIM15);
 8001992:	4b0b      	ldr	r3, [pc, #44]	@ (80019c0 <usDelay+0x60>)
 8001994:	0018      	movs	r0, r3
 8001996:	f7ff fbe4 	bl	8001162 <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM15, LL_TIM_CHANNEL_CH1);
 800199a:	4b09      	ldr	r3, [pc, #36]	@ (80019c0 <usDelay+0x60>)
 800199c:	2101      	movs	r1, #1
 800199e:	0018      	movs	r0, r3
 80019a0:	f7ff fc14 	bl	80011cc <LL_TIM_CC_EnableChannel>
	while(us_delay_flag != 1)	{ __NOP();}
 80019a4:	e000      	b.n	80019a8 <usDelay+0x48>
 80019a6:	46c0      	nop			@ (mov r8, r8)
 80019a8:	4b06      	ldr	r3, [pc, #24]	@ (80019c4 <usDelay+0x64>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d1f9      	bne.n	80019a6 <usDelay+0x46>
	us_delay_flag=0;
 80019b2:	4b04      	ldr	r3, [pc, #16]	@ (80019c4 <usDelay+0x64>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
		__NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP();
		__NOP(); __NOP(); __NOP(); __NOP(); __NOP(); __NOP();
		val--;
	}
#endif
}
 80019b8:	46c0      	nop			@ (mov r8, r8)
 80019ba:	46bd      	mov	sp, r7
 80019bc:	b002      	add	sp, #8
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40014000 	.word	0x40014000
 80019c4:	20000484 	.word	0x20000484

080019c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019cc:	b672      	cpsid	i
}
 80019ce:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d0:	46c0      	nop			@ (mov r8, r8)
 80019d2:	e7fd      	b.n	80019d0 <Error_Handler+0x8>

080019d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019da:	4b0f      	ldr	r3, [pc, #60]	@ (8001a18 <HAL_MspInit+0x44>)
 80019dc:	699a      	ldr	r2, [r3, #24]
 80019de:	4b0e      	ldr	r3, [pc, #56]	@ (8001a18 <HAL_MspInit+0x44>)
 80019e0:	2101      	movs	r1, #1
 80019e2:	430a      	orrs	r2, r1
 80019e4:	619a      	str	r2, [r3, #24]
 80019e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001a18 <HAL_MspInit+0x44>)
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	2201      	movs	r2, #1
 80019ec:	4013      	ands	r3, r2
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f2:	4b09      	ldr	r3, [pc, #36]	@ (8001a18 <HAL_MspInit+0x44>)
 80019f4:	69da      	ldr	r2, [r3, #28]
 80019f6:	4b08      	ldr	r3, [pc, #32]	@ (8001a18 <HAL_MspInit+0x44>)
 80019f8:	2180      	movs	r1, #128	@ 0x80
 80019fa:	0549      	lsls	r1, r1, #21
 80019fc:	430a      	orrs	r2, r1
 80019fe:	61da      	str	r2, [r3, #28]
 8001a00:	4b05      	ldr	r3, [pc, #20]	@ (8001a18 <HAL_MspInit+0x44>)
 8001a02:	69da      	ldr	r2, [r3, #28]
 8001a04:	2380      	movs	r3, #128	@ 0x80
 8001a06:	055b      	lsls	r3, r3, #21
 8001a08:	4013      	ands	r3, r2
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a0e:	46c0      	nop			@ (mov r8, r8)
 8001a10:	46bd      	mov	sp, r7
 8001a12:	b002      	add	sp, #8
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	46c0      	nop			@ (mov r8, r8)
 8001a18:	40021000 	.word	0x40021000

08001a1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a1c:	b590      	push	{r4, r7, lr}
 8001a1e:	b08b      	sub	sp, #44	@ 0x2c
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	2414      	movs	r4, #20
 8001a26:	193b      	adds	r3, r7, r4
 8001a28:	0018      	movs	r0, r3
 8001a2a:	2314      	movs	r3, #20
 8001a2c:	001a      	movs	r2, r3
 8001a2e:	2100      	movs	r1, #0
 8001a30:	f002 fd24 	bl	800447c <memset>
  if(hi2c->Instance==I2C2)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a1c      	ldr	r2, [pc, #112]	@ (8001aac <HAL_I2C_MspInit+0x90>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d132      	bne.n	8001aa4 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab0 <HAL_I2C_MspInit+0x94>)
 8001a40:	695a      	ldr	r2, [r3, #20]
 8001a42:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab0 <HAL_I2C_MspInit+0x94>)
 8001a44:	2180      	movs	r1, #128	@ 0x80
 8001a46:	02c9      	lsls	r1, r1, #11
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	615a      	str	r2, [r3, #20]
 8001a4c:	4b18      	ldr	r3, [pc, #96]	@ (8001ab0 <HAL_I2C_MspInit+0x94>)
 8001a4e:	695a      	ldr	r2, [r3, #20]
 8001a50:	2380      	movs	r3, #128	@ 0x80
 8001a52:	02db      	lsls	r3, r3, #11
 8001a54:	4013      	ands	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a5a:	193b      	adds	r3, r7, r4
 8001a5c:	22c0      	movs	r2, #192	@ 0xc0
 8001a5e:	0112      	lsls	r2, r2, #4
 8001a60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a62:	0021      	movs	r1, r4
 8001a64:	187b      	adds	r3, r7, r1
 8001a66:	2212      	movs	r2, #18
 8001a68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	187b      	adds	r3, r7, r1
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001a70:	187b      	adds	r3, r7, r1
 8001a72:	2201      	movs	r2, #1
 8001a74:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 8001a76:	187b      	adds	r3, r7, r1
 8001a78:	2201      	movs	r2, #1
 8001a7a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7c:	187b      	adds	r3, r7, r1
 8001a7e:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab4 <HAL_I2C_MspInit+0x98>)
 8001a80:	0019      	movs	r1, r3
 8001a82:	0010      	movs	r0, r2
 8001a84:	f000 fc48 	bl	8002318 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a88:	4b09      	ldr	r3, [pc, #36]	@ (8001ab0 <HAL_I2C_MspInit+0x94>)
 8001a8a:	69da      	ldr	r2, [r3, #28]
 8001a8c:	4b08      	ldr	r3, [pc, #32]	@ (8001ab0 <HAL_I2C_MspInit+0x94>)
 8001a8e:	2180      	movs	r1, #128	@ 0x80
 8001a90:	03c9      	lsls	r1, r1, #15
 8001a92:	430a      	orrs	r2, r1
 8001a94:	61da      	str	r2, [r3, #28]
 8001a96:	4b06      	ldr	r3, [pc, #24]	@ (8001ab0 <HAL_I2C_MspInit+0x94>)
 8001a98:	69da      	ldr	r2, [r3, #28]
 8001a9a:	2380      	movs	r3, #128	@ 0x80
 8001a9c:	03db      	lsls	r3, r3, #15
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001aa4:	46c0      	nop			@ (mov r8, r8)
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	b00b      	add	sp, #44	@ 0x2c
 8001aaa:	bd90      	pop	{r4, r7, pc}
 8001aac:	40005800 	.word	0x40005800
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	48000400 	.word	0x48000400

08001ab8 <LL_SPI_Enable>:
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2240      	movs	r2, #64	@ 0x40
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	601a      	str	r2, [r3, #0]
}
 8001acc:	46c0      	nop			@ (mov r8, r8)
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	b002      	add	sp, #8
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <LL_SPI_Disable>:
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2240      	movs	r2, #64	@ 0x40
 8001ae2:	4393      	bics	r3, r2
 8001ae4:	001a      	movs	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	601a      	str	r2, [r3, #0]
}
 8001aea:	46c0      	nop			@ (mov r8, r8)
 8001aec:	46bd      	mov	sp, r7
 8001aee:	b002      	add	sp, #8
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	2201      	movs	r2, #1
 8001b00:	4013      	ands	r3, r2
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d101      	bne.n	8001b0a <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001b06:	2301      	movs	r3, #1
 8001b08:	e000      	b.n	8001b0c <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	b002      	add	sp, #8
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	2202      	movs	r2, #2
 8001b22:	4013      	ands	r3, r2
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d101      	bne.n	8001b2c <LL_SPI_IsActiveFlag_TXE+0x18>
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e000      	b.n	8001b2e <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	0018      	movs	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	b002      	add	sp, #8
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <LL_SPI_IsActiveFlag_OVR>:
  * @rmtoll SR           OVR           LL_SPI_IsActiveFlag_OVR
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_OVR(SPI_TypeDef *SPIx)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	2240      	movs	r2, #64	@ 0x40
 8001b44:	4013      	ands	r3, r2
 8001b46:	2b40      	cmp	r3, #64	@ 0x40
 8001b48:	d101      	bne.n	8001b4e <LL_SPI_IsActiveFlag_OVR+0x18>
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e000      	b.n	8001b50 <LL_SPI_IsActiveFlag_OVR+0x1a>
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	0018      	movs	r0, r3
 8001b52:	46bd      	mov	sp, r7
 8001b54:	b002      	add	sp, #8
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <LL_SPI_ClearFlag_OVR>:
  * @rmtoll SR           OVR           LL_SPI_ClearFlag_OVR
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_ClearFlag_OVR(SPI_TypeDef *SPIx)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = SPIx->DR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001b66:	68fb      	ldr	r3, [r7, #12]
  tmpreg = SPIx->SR;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
}
 8001b70:	46c0      	nop			@ (mov r8, r8)
 8001b72:	46bd      	mov	sp, r7
 8001b74:	b004      	add	sp, #16
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <LL_SPI_EnableIT_RXNE>:
  * @rmtoll CR2          RXNEIE        LL_SPI_EnableIT_RXNE
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableIT_RXNE(SPI_TypeDef *SPIx)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2240      	movs	r2, #64	@ 0x40
 8001b86:	431a      	orrs	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	605a      	str	r2, [r3, #4]
}
 8001b8c:	46c0      	nop			@ (mov r8, r8)
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	b002      	add	sp, #8
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <LL_SPI_EnableIT_TXE>:
  * @rmtoll CR2          TXEIE         LL_SPI_EnableIT_TXE
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableIT_TXE(SPI_TypeDef *SPIx)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2280      	movs	r2, #128	@ 0x80
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	605a      	str	r2, [r3, #4]
}
 8001ba8:	46c0      	nop			@ (mov r8, r8)
 8001baa:	46bd      	mov	sp, r7
 8001bac:	b002      	add	sp, #8
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <LL_SPI_DisableIT_RXNE>:
  * @rmtoll CR2          RXNEIE        LL_SPI_DisableIT_RXNE
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableIT_RXNE(SPI_TypeDef *SPIx)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2240      	movs	r2, #64	@ 0x40
 8001bbe:	4393      	bics	r3, r2
 8001bc0:	001a      	movs	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	605a      	str	r2, [r3, #4]
}
 8001bc6:	46c0      	nop			@ (mov r8, r8)
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	b002      	add	sp, #8
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <LL_SPI_DisableIT_TXE>:
  * @rmtoll CR2          TXEIE         LL_SPI_DisableIT_TXE
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableIT_TXE(SPI_TypeDef *SPIx)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2280      	movs	r2, #128	@ 0x80
 8001bdc:	4393      	bics	r3, r2
 8001bde:	001a      	movs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	605a      	str	r2, [r3, #4]
}
 8001be4:	46c0      	nop			@ (mov r8, r8)
 8001be6:	46bd      	mov	sp, r7
 8001be8:	b002      	add	sp, #8
 8001bea:	bd80      	pop	{r7, pc}

08001bec <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	330c      	adds	r3, #12
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	b2db      	uxtb	r3, r3
}
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	b002      	add	sp, #8
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	000a      	movs	r2, r1
 8001c0e:	1cfb      	adds	r3, r7, #3
 8001c10:	701a      	strb	r2, [r3, #0]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	330c      	adds	r3, #12
 8001c16:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	1cfa      	adds	r2, r7, #3
 8001c1c:	7812      	ldrb	r2, [r2, #0]
 8001c1e:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8001c20:	46c0      	nop			@ (mov r8, r8)
 8001c22:	46bd      	mov	sp, r7
 8001c24:	b004      	add	sp, #16
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <LL_TIM_DisableCounter>:
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2201      	movs	r2, #1
 8001c36:	4393      	bics	r3, r2
 8001c38:	001a      	movs	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	601a      	str	r2, [r3, #0]
}
 8001c3e:	46c0      	nop			@ (mov r8, r8)
 8001c40:	46bd      	mov	sp, r7
 8001c42:	b002      	add	sp, #8
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <LL_TIM_CC_DisableChannel>:
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	43d2      	mvns	r2, r2
 8001c58:	401a      	ands	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	621a      	str	r2, [r3, #32]
}
 8001c5e:	46c0      	nop			@ (mov r8, r8)
 8001c60:	46bd      	mov	sp, r7
 8001c62:	b002      	add	sp, #8
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <LL_TIM_ClearFlag_CC1>:
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2203      	movs	r2, #3
 8001c72:	4252      	negs	r2, r2
 8001c74:	611a      	str	r2, [r3, #16]
}
 8001c76:	46c0      	nop			@ (mov r8, r8)
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	b002      	add	sp, #8
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <LL_TIM_IsActiveFlag_CC1>:
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d101      	bne.n	8001c96 <LL_TIM_IsActiveFlag_CC1+0x18>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <LL_TIM_IsActiveFlag_CC1+0x1a>
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	0018      	movs	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	b002      	add	sp, #8
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <LL_GPIO_IsInputPinSet>:
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	425a      	negs	r2, r3
 8001cb8:	4153      	adcs	r3, r2
 8001cba:	b2db      	uxtb	r3, r3
}
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	b002      	add	sp, #8
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <LL_GPIO_SetOutputPin>:
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	619a      	str	r2, [r3, #24]
}
 8001cd4:	46c0      	nop			@ (mov r8, r8)
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	b002      	add	sp, #8
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <LL_GPIO_ResetOutputPin>:
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001cec:	46c0      	nop			@ (mov r8, r8)
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	b002      	add	sp, #8
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8001cfc:	4b06      	ldr	r3, [pc, #24]	@ (8001d18 <LL_EXTI_IsActiveFlag_0_31+0x24>)
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	4013      	ands	r3, r2
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	425a      	negs	r2, r3
 8001d0a:	4153      	adcs	r3, r2
 8001d0c:	b2db      	uxtb	r3, r3
}
 8001d0e:	0018      	movs	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	b002      	add	sp, #8
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	46c0      	nop			@ (mov r8, r8)
 8001d18:	40010400 	.word	0x40010400

08001d1c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8001d24:	4b03      	ldr	r3, [pc, #12]	@ (8001d34 <LL_EXTI_ClearFlag_0_31+0x18>)
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	615a      	str	r2, [r3, #20]
}
 8001d2a:	46c0      	nop			@ (mov r8, r8)
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	b002      	add	sp, #8
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	46c0      	nop			@ (mov r8, r8)
 8001d34:	40010400 	.word	0x40010400

08001d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d3c:	46c0      	nop			@ (mov r8, r8)
 8001d3e:	e7fd      	b.n	8001d3c <NMI_Handler+0x4>

08001d40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d44:	46c0      	nop			@ (mov r8, r8)
 8001d46:	e7fd      	b.n	8001d44 <HardFault_Handler+0x4>

08001d48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001d4c:	46c0      	nop			@ (mov r8, r8)
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d56:	46c0      	nop			@ (mov r8, r8)
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d60:	f000 fa0a 	bl	8002178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d64:	46c0      	nop			@ (mov r8, r8)
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d6e:	b0b7      	sub	sp, #220	@ 0xdc
 8001d70:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_12) != RESET)
 8001d72:	2380      	movs	r3, #128	@ 0x80
 8001d74:	015b      	lsls	r3, r3, #5
 8001d76:	0018      	movs	r0, r3
 8001d78:	f7ff ffbc 	bl	8001cf4 <LL_EXTI_IsActiveFlag_0_31>
 8001d7c:	1e03      	subs	r3, r0, #0
 8001d7e:	d100      	bne.n	8001d82 <EXTI4_15_IRQHandler+0x16>
 8001d80:	e110      	b.n	8001fa4 <EXTI4_15_IRQHandler+0x238>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_12);
 8001d82:	2380      	movs	r3, #128	@ 0x80
 8001d84:	015b      	lsls	r3, r3, #5
 8001d86:	0018      	movs	r0, r3
 8001d88:	f7ff ffc8 	bl	8001d1c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_12 */
    if(LL_GPIO_IsInputPinSet(SPI2_CS_GPIO_Port, SPI2_CS_Pin))//CS pin went high -> start of transfer
 8001d8c:	2380      	movs	r3, #128	@ 0x80
 8001d8e:	015b      	lsls	r3, r3, #5
 8001d90:	4a86      	ldr	r2, [pc, #536]	@ (8001fac <EXTI4_15_IRQHandler+0x240>)
 8001d92:	0019      	movs	r1, r3
 8001d94:	0010      	movs	r0, r2
 8001d96:	f7ff ff83 	bl	8001ca0 <LL_GPIO_IsInputPinSet>
 8001d9a:	1e03      	subs	r3, r0, #0
 8001d9c:	d016      	beq.n	8001dcc <EXTI4_15_IRQHandler+0x60>
    {
    	spi2State = SPI2_BUSY_RECEPTION;
 8001d9e:	4b84      	ldr	r3, [pc, #528]	@ (8001fb0 <EXTI4_15_IRQHandler+0x244>)
 8001da0:	2202      	movs	r2, #2
 8001da2:	701a      	strb	r2, [r3, #0]
    	LL_SPI_Enable(SPI2);
 8001da4:	4b83      	ldr	r3, [pc, #524]	@ (8001fb4 <EXTI4_15_IRQHandler+0x248>)
 8001da6:	0018      	movs	r0, r3
 8001da8:	f7ff fe86 	bl	8001ab8 <LL_SPI_Enable>
    	LL_SPI_EnableIT_RXNE(SPI2);
 8001dac:	4b81      	ldr	r3, [pc, #516]	@ (8001fb4 <EXTI4_15_IRQHandler+0x248>)
 8001dae:	0018      	movs	r0, r3
 8001db0:	f7ff fee2 	bl	8001b78 <LL_SPI_EnableIT_RXNE>
    	LL_SPI_EnableIT_TXE(SPI2);
 8001db4:	4b7f      	ldr	r3, [pc, #508]	@ (8001fb4 <EXTI4_15_IRQHandler+0x248>)
 8001db6:	0018      	movs	r0, r3
 8001db8:	f7ff feec 	bl	8001b94 <LL_SPI_EnableIT_TXE>
    	LL_GPIO_SetOutputPin(SPI2_EXT_CTR_BSY_GPIO_Port, SPI2_EXT_CTR_BSY_Pin);
 8001dbc:	2380      	movs	r3, #128	@ 0x80
 8001dbe:	01db      	lsls	r3, r3, #7
 8001dc0:	4a7d      	ldr	r2, [pc, #500]	@ (8001fb8 <EXTI4_15_IRQHandler+0x24c>)
 8001dc2:	0019      	movs	r1, r3
 8001dc4:	0010      	movs	r0, r2
 8001dc6:	f7ff ff7d 	bl	8001cc4 <LL_GPIO_SetOutputPin>
    /* USER CODE END LL_EXTI_LINE_12 */
  }
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001dca:	e0eb      	b.n	8001fa4 <EXTI4_15_IRQHandler+0x238>
    	LL_SPI_DisableIT_RXNE(SPI2);
 8001dcc:	4b79      	ldr	r3, [pc, #484]	@ (8001fb4 <EXTI4_15_IRQHandler+0x248>)
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f7ff feee 	bl	8001bb0 <LL_SPI_DisableIT_RXNE>
    	LL_SPI_DisableIT_TXE(SPI2);
 8001dd4:	4b77      	ldr	r3, [pc, #476]	@ (8001fb4 <EXTI4_15_IRQHandler+0x248>)
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f7ff fef9 	bl	8001bce <LL_SPI_DisableIT_TXE>
    	LL_SPI_Disable(SPI2);
 8001ddc:	4b75      	ldr	r3, [pc, #468]	@ (8001fb4 <EXTI4_15_IRQHandler+0x248>)
 8001dde:	0018      	movs	r0, r3
 8001de0:	f7ff fe78 	bl	8001ad4 <LL_SPI_Disable>
    	spi2State = SPI2_END_OF_TRANSFER;
 8001de4:	4b72      	ldr	r3, [pc, #456]	@ (8001fb0 <EXTI4_15_IRQHandler+0x244>)
 8001de6:	2204      	movs	r2, #4
 8001de8:	701a      	strb	r2, [r3, #0]
    	volatile uint8_t rxcmd = spi2Buff[0];
 8001dea:	4b74      	ldr	r3, [pc, #464]	@ (8001fbc <EXTI4_15_IRQHandler+0x250>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	23c9      	movs	r3, #201	@ 0xc9
 8001df2:	18fb      	adds	r3, r7, r3
 8001df4:	701a      	strb	r2, [r3, #0]
    	spi2Buff[spi2BuffIndx] = 0;//zero terminating the string, because it might not be. spi2BuffIndx increment was done in the receive interrupt, so this points after the last received byte
 8001df6:	4b72      	ldr	r3, [pc, #456]	@ (8001fc0 <EXTI4_15_IRQHandler+0x254>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	001a      	movs	r2, r3
 8001dfe:	4b6f      	ldr	r3, [pc, #444]	@ (8001fbc <EXTI4_15_IRQHandler+0x250>)
 8001e00:	2100      	movs	r1, #0
 8001e02:	5499      	strb	r1, [r3, r2]
    	if(firstMsg==0)//if first msg arrives we clear the bitmap from the screen
 8001e04:	4b6f      	ldr	r3, [pc, #444]	@ (8001fc4 <EXTI4_15_IRQHandler+0x258>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d103      	bne.n	8001e16 <EXTI4_15_IRQHandler+0xaa>
    		delete_disp_mat();
 8001e0e:	f7ff f8cb 	bl	8000fa8 <delete_disp_mat>
    		print_disp_mat();
 8001e12:	f7fe faf7 	bl	8000404 <print_disp_mat>
    	firstMsg=1;
 8001e16:	4b6b      	ldr	r3, [pc, #428]	@ (8001fc4 <EXTI4_15_IRQHandler+0x258>)
 8001e18:	2201      	movs	r2, #1
 8001e1a:	701a      	strb	r2, [r3, #0]
    	switch(rxcmd)
 8001e1c:	23c9      	movs	r3, #201	@ 0xc9
 8001e1e:	18fb      	adds	r3, r7, r3
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d043      	beq.n	8001eb0 <EXTI4_15_IRQHandler+0x144>
 8001e28:	dd00      	ble.n	8001e2c <EXTI4_15_IRQHandler+0xc0>
 8001e2a:	e0ab      	b.n	8001f84 <EXTI4_15_IRQHandler+0x218>
 8001e2c:	2b03      	cmp	r3, #3
 8001e2e:	d02c      	beq.n	8001e8a <EXTI4_15_IRQHandler+0x11e>
 8001e30:	dd00      	ble.n	8001e34 <EXTI4_15_IRQHandler+0xc8>
 8001e32:	e0a7      	b.n	8001f84 <EXTI4_15_IRQHandler+0x218>
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d002      	beq.n	8001e3e <EXTI4_15_IRQHandler+0xd2>
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d013      	beq.n	8001e64 <EXTI4_15_IRQHandler+0xf8>
					 break;
 8001e3c:	e0a2      	b.n	8001f84 <EXTI4_15_IRQHandler+0x218>
    		case PrintFilenameTXT_cmd:	fill_rectangle_x1y1_x2y2(0, 0, 8, 127, Pixel_off);
 8001e3e:	237f      	movs	r3, #127	@ 0x7f
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	237f      	movs	r3, #127	@ 0x7f
 8001e44:	2208      	movs	r2, #8
 8001e46:	2100      	movs	r1, #0
 8001e48:	2000      	movs	r0, #0
 8001e4a:	f7fe ffdf 	bl	8000e0c <fill_rectangle_x1y1_x2y2>
    									write_text_H(0, 55, (char*)&spi2Buff[2], Pixel_on, size_5x8);
 8001e4e:	4a5e      	ldr	r2, [pc, #376]	@ (8001fc8 <EXTI4_15_IRQHandler+0x25c>)
 8001e50:	2308      	movs	r3, #8
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	2380      	movs	r3, #128	@ 0x80
 8001e56:	2137      	movs	r1, #55	@ 0x37
 8001e58:	2000      	movs	r0, #0
 8001e5a:	f7fe fd61 	bl	8000920 <write_text_H>
    									print_disp_mat();
 8001e5e:	f7fe fad1 	bl	8000404 <print_disp_mat>
    									break;
 8001e62:	e092      	b.n	8001f8a <EXTI4_15_IRQHandler+0x21e>
    		case PrintCNCcmd_cmd:	fill_rectangle_x1y1_x2y2(10, 0, 18, 127, Pixel_off);
 8001e64:	237f      	movs	r3, #127	@ 0x7f
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	237f      	movs	r3, #127	@ 0x7f
 8001e6a:	2212      	movs	r2, #18
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	200a      	movs	r0, #10
 8001e70:	f7fe ffcc 	bl	8000e0c <fill_rectangle_x1y1_x2y2>
    								write_text_H(0, 45, (char*)&spi2Buff[2], Pixel_on, size_5x8);
 8001e74:	4a54      	ldr	r2, [pc, #336]	@ (8001fc8 <EXTI4_15_IRQHandler+0x25c>)
 8001e76:	2308      	movs	r3, #8
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	2380      	movs	r3, #128	@ 0x80
 8001e7c:	212d      	movs	r1, #45	@ 0x2d
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f7fe fd4e 	bl	8000920 <write_text_H>
    								print_disp_mat();
 8001e84:	f7fe fabe 	bl	8000404 <print_disp_mat>
    								break;
 8001e88:	e07f      	b.n	8001f8a <EXTI4_15_IRQHandler+0x21e>
    		case PrintInfo_cmd:		fill_rectangle_x1y1_x2y2(20, 0, 28, 127, Pixel_off);
 8001e8a:	237f      	movs	r3, #127	@ 0x7f
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	237f      	movs	r3, #127	@ 0x7f
 8001e90:	221c      	movs	r2, #28
 8001e92:	2100      	movs	r1, #0
 8001e94:	2014      	movs	r0, #20
 8001e96:	f7fe ffb9 	bl	8000e0c <fill_rectangle_x1y1_x2y2>
									write_text_H(0, 35, (char*)&spi2Buff[2], Pixel_on, size_5x8);
 8001e9a:	4a4b      	ldr	r2, [pc, #300]	@ (8001fc8 <EXTI4_15_IRQHandler+0x25c>)
 8001e9c:	2308      	movs	r3, #8
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	2380      	movs	r3, #128	@ 0x80
 8001ea2:	2123      	movs	r1, #35	@ 0x23
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	f7fe fd3b 	bl	8000920 <write_text_H>
									print_disp_mat();
 8001eaa:	f7fe faab 	bl	8000404 <print_disp_mat>
									break;
 8001eae:	e06c      	b.n	8001f8a <EXTI4_15_IRQHandler+0x21e>
    		case PrintCNCcmdAndLineNum_cmd:	char* splitpos = strchr((char*)&spi2Buff[2], '_');//search for the '_'character that is between the 2 strings to print
 8001eb0:	4b45      	ldr	r3, [pc, #276]	@ (8001fc8 <EXTI4_15_IRQHandler+0x25c>)
 8001eb2:	215f      	movs	r1, #95	@ 0x5f
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f002 fae9 	bl	800448c <strchr>
 8001eba:	0003      	movs	r3, r0
 8001ebc:	24cc      	movs	r4, #204	@ 0xcc
 8001ebe:	193a      	adds	r2, r7, r4
 8001ec0:	6013      	str	r3, [r2, #0]
    										if(splitpos != NULL)
 8001ec2:	193b      	adds	r3, r7, r4
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d05e      	beq.n	8001f88 <EXTI4_15_IRQHandler+0x21c>
    											char printcmdstr[SPI2BUFFSIZE] = {0};//too long, can contain much more text than we are able to print to the screen in one line, but it is fine
 8001eca:	003b      	movs	r3, r7
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	2260      	movs	r2, #96	@ 0x60
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f002 fad0 	bl	800447c <memset>
    											uint8_t str1len = (splitpos - (char*)&spi2Buff[2]);
 8001edc:	193b      	adds	r3, r7, r4
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4b39      	ldr	r3, [pc, #228]	@ (8001fc8 <EXTI4_15_IRQHandler+0x25c>)
 8001ee2:	1ad2      	subs	r2, r2, r3
 8001ee4:	24cb      	movs	r4, #203	@ 0xcb
 8001ee6:	193b      	adds	r3, r7, r4
 8001ee8:	701a      	strb	r2, [r3, #0]
    											char linenumstr [SPI2BUFFSIZE] = {0};
 8001eea:	2564      	movs	r5, #100	@ 0x64
 8001eec:	197b      	adds	r3, r7, r5
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	3304      	adds	r3, #4
 8001ef4:	2260      	movs	r2, #96	@ 0x60
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f002 fabf 	bl	800447c <memset>
    											uint8_t str2len = ( strlen((char*)&spi2Buff[2]) - (str1len+1));
 8001efe:	4b32      	ldr	r3, [pc, #200]	@ (8001fc8 <EXTI4_15_IRQHandler+0x25c>)
 8001f00:	0018      	movs	r0, r3
 8001f02:	f7fe f901 	bl	8000108 <strlen>
 8001f06:	0003      	movs	r3, r0
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	193b      	adds	r3, r7, r4
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	26ca      	movs	r6, #202	@ 0xca
 8001f14:	19bb      	adds	r3, r7, r6
 8001f16:	3a01      	subs	r2, #1
 8001f18:	701a      	strb	r2, [r3, #0]
    											memcpy(printcmdstr, (char*)&spi2Buff[2], str1len);
 8001f1a:	193b      	adds	r3, r7, r4
 8001f1c:	781a      	ldrb	r2, [r3, #0]
 8001f1e:	492a      	ldr	r1, [pc, #168]	@ (8001fc8 <EXTI4_15_IRQHandler+0x25c>)
 8001f20:	003b      	movs	r3, r7
 8001f22:	0018      	movs	r0, r3
 8001f24:	f002 fae4 	bl	80044f0 <memcpy>
    											memcpy(linenumstr, (char*)&spi2Buff[2+str1len+1], str2len);
 8001f28:	193b      	adds	r3, r7, r4
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	1cda      	adds	r2, r3, #3
 8001f2e:	4b23      	ldr	r3, [pc, #140]	@ (8001fbc <EXTI4_15_IRQHandler+0x250>)
 8001f30:	18d1      	adds	r1, r2, r3
 8001f32:	19bb      	adds	r3, r7, r6
 8001f34:	781a      	ldrb	r2, [r3, #0]
 8001f36:	197b      	adds	r3, r7, r5
 8001f38:	0018      	movs	r0, r3
 8001f3a:	f002 fad9 	bl	80044f0 <memcpy>
    											fill_rectangle_x1y1_x2y2(10, 0, 18, 127, Pixel_off);
 8001f3e:	237f      	movs	r3, #127	@ 0x7f
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	237f      	movs	r3, #127	@ 0x7f
 8001f44:	2212      	movs	r2, #18
 8001f46:	2100      	movs	r1, #0
 8001f48:	200a      	movs	r0, #10
 8001f4a:	f7fe ff5f 	bl	8000e0c <fill_rectangle_x1y1_x2y2>
												write_text_H(0, 45, printcmdstr, Pixel_on, size_5x8);
 8001f4e:	003a      	movs	r2, r7
 8001f50:	2308      	movs	r3, #8
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	2380      	movs	r3, #128	@ 0x80
 8001f56:	212d      	movs	r1, #45	@ 0x2d
 8001f58:	2000      	movs	r0, #0
 8001f5a:	f7fe fce1 	bl	8000920 <write_text_H>
												fill_rectangle_x1y1_x2y2(30, 0, 38, 127, Pixel_off);
 8001f5e:	237f      	movs	r3, #127	@ 0x7f
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	237f      	movs	r3, #127	@ 0x7f
 8001f64:	2226      	movs	r2, #38	@ 0x26
 8001f66:	2100      	movs	r1, #0
 8001f68:	201e      	movs	r0, #30
 8001f6a:	f7fe ff4f 	bl	8000e0c <fill_rectangle_x1y1_x2y2>
												write_text_H(0, 25, linenumstr, Pixel_on, size_5x8);
 8001f6e:	197a      	adds	r2, r7, r5
 8001f70:	2308      	movs	r3, #8
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	2380      	movs	r3, #128	@ 0x80
 8001f76:	2119      	movs	r1, #25
 8001f78:	2000      	movs	r0, #0
 8001f7a:	f7fe fcd1 	bl	8000920 <write_text_H>
												print_disp_mat();
 8001f7e:	f7fe fa41 	bl	8000404 <print_disp_mat>
											break;
 8001f82:	e001      	b.n	8001f88 <EXTI4_15_IRQHandler+0x21c>
					 break;
 8001f84:	46c0      	nop			@ (mov r8, r8)
 8001f86:	e000      	b.n	8001f8a <EXTI4_15_IRQHandler+0x21e>
											break;
 8001f88:	46c0      	nop			@ (mov r8, r8)
    	spi2BuffIndx = 0;
 8001f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc0 <EXTI4_15_IRQHandler+0x254>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	701a      	strb	r2, [r3, #0]
    	spi2State = SPI2_FREE;
 8001f90:	4b07      	ldr	r3, [pc, #28]	@ (8001fb0 <EXTI4_15_IRQHandler+0x244>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	701a      	strb	r2, [r3, #0]
    	LL_GPIO_ResetOutputPin(SPI2_EXT_CTR_BSY_GPIO_Port, SPI2_EXT_CTR_BSY_Pin);
 8001f96:	2380      	movs	r3, #128	@ 0x80
 8001f98:	01db      	lsls	r3, r3, #7
 8001f9a:	4a07      	ldr	r2, [pc, #28]	@ (8001fb8 <EXTI4_15_IRQHandler+0x24c>)
 8001f9c:	0019      	movs	r1, r3
 8001f9e:	0010      	movs	r0, r2
 8001fa0:	f7ff fe9c 	bl	8001cdc <LL_GPIO_ResetOutputPin>
}
 8001fa4:	46c0      	nop			@ (mov r8, r8)
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	b035      	add	sp, #212	@ 0xd4
 8001faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fac:	48000400 	.word	0x48000400
 8001fb0:	20000000 	.word	0x20000000
 8001fb4:	40003800 	.word	0x40003800
 8001fb8:	48000800 	.word	0x48000800
 8001fbc:	20000488 	.word	0x20000488
 8001fc0:	200004ec 	.word	0x200004ec
 8001fc4:	200004ed 	.word	0x200004ed
 8001fc8:	2000048a 	.word	0x2000048a

08001fcc <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */
	if(LL_TIM_IsActiveFlag_CC1(TIM15))
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002004 <TIM15_IRQHandler+0x38>)
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	f7ff fe53 	bl	8001c7e <LL_TIM_IsActiveFlag_CC1>
 8001fd8:	1e03      	subs	r3, r0, #0
 8001fda:	d00f      	beq.n	8001ffc <TIM15_IRQHandler+0x30>
	{
		LL_TIM_ClearFlag_CC1(TIM15);
 8001fdc:	4b09      	ldr	r3, [pc, #36]	@ (8002004 <TIM15_IRQHandler+0x38>)
 8001fde:	0018      	movs	r0, r3
 8001fe0:	f7ff fe41 	bl	8001c66 <LL_TIM_ClearFlag_CC1>
		LL_TIM_DisableCounter(TIM15);
 8001fe4:	4b07      	ldr	r3, [pc, #28]	@ (8002004 <TIM15_IRQHandler+0x38>)
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	f7ff fe1e 	bl	8001c28 <LL_TIM_DisableCounter>
		LL_TIM_CC_DisableChannel(TIM15, LL_TIM_CHANNEL_CH1);
 8001fec:	4b05      	ldr	r3, [pc, #20]	@ (8002004 <TIM15_IRQHandler+0x38>)
 8001fee:	2101      	movs	r1, #1
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	f7ff fe28 	bl	8001c46 <LL_TIM_CC_DisableChannel>
		us_delay_flag=1;
 8001ff6:	4b04      	ldr	r3, [pc, #16]	@ (8002008 <TIM15_IRQHandler+0x3c>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM15_IRQn 0 */
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8001ffc:	46c0      	nop			@ (mov r8, r8)
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	46c0      	nop			@ (mov r8, r8)
 8002004:	40014000 	.word	0x40014000
 8002008:	20000484 	.word	0x20000484

0800200c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800200c:	b5b0      	push	{r4, r5, r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */
	if(LL_SPI_IsActiveFlag_RXNE(SPI2))
 8002010:	4b1a      	ldr	r3, [pc, #104]	@ (800207c <SPI2_IRQHandler+0x70>)
 8002012:	0018      	movs	r0, r3
 8002014:	f7ff fd6d 	bl	8001af2 <LL_SPI_IsActiveFlag_RXNE>
 8002018:	1e03      	subs	r3, r0, #0
 800201a:	d017      	beq.n	800204c <SPI2_IRQHandler+0x40>
	{
		if(spi2BuffIndx<SPI2BUFFSIZE)
 800201c:	4b18      	ldr	r3, [pc, #96]	@ (8002080 <SPI2_IRQHandler+0x74>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b63      	cmp	r3, #99	@ 0x63
 8002024:	d812      	bhi.n	800204c <SPI2_IRQHandler+0x40>
		{
			spi2Buff[spi2BuffIndx] = LL_SPI_ReceiveData8(SPI2);
 8002026:	4b16      	ldr	r3, [pc, #88]	@ (8002080 <SPI2_IRQHandler+0x74>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	b2db      	uxtb	r3, r3
 800202c:	001c      	movs	r4, r3
 800202e:	4b13      	ldr	r3, [pc, #76]	@ (800207c <SPI2_IRQHandler+0x70>)
 8002030:	0018      	movs	r0, r3
 8002032:	f7ff fddb 	bl	8001bec <LL_SPI_ReceiveData8>
 8002036:	0003      	movs	r3, r0
 8002038:	001a      	movs	r2, r3
 800203a:	4b12      	ldr	r3, [pc, #72]	@ (8002084 <SPI2_IRQHandler+0x78>)
 800203c:	551a      	strb	r2, [r3, r4]
			spi2BuffIndx++;
 800203e:	4b10      	ldr	r3, [pc, #64]	@ (8002080 <SPI2_IRQHandler+0x74>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	b2db      	uxtb	r3, r3
 8002044:	3301      	adds	r3, #1
 8002046:	b2da      	uxtb	r2, r3
 8002048:	4b0d      	ldr	r3, [pc, #52]	@ (8002080 <SPI2_IRQHandler+0x74>)
 800204a:	701a      	strb	r2, [r3, #0]
		}

	}

	if(LL_SPI_IsActiveFlag_OVR(SPI2))
 800204c:	4b0b      	ldr	r3, [pc, #44]	@ (800207c <SPI2_IRQHandler+0x70>)
 800204e:	0018      	movs	r0, r3
 8002050:	f7ff fd71 	bl	8001b36 <LL_SPI_IsActiveFlag_OVR>
 8002054:	1e03      	subs	r3, r0, #0
 8002056:	d003      	beq.n	8002060 <SPI2_IRQHandler+0x54>
	{
		LL_SPI_ClearFlag_OVR(SPI2);
 8002058:	4b08      	ldr	r3, [pc, #32]	@ (800207c <SPI2_IRQHandler+0x70>)
 800205a:	0018      	movs	r0, r3
 800205c:	f7ff fd7c 	bl	8001b58 <LL_SPI_ClearFlag_OVR>
	}

	if(LL_SPI_IsActiveFlag_TXE(SPI2))
 8002060:	4b06      	ldr	r3, [pc, #24]	@ (800207c <SPI2_IRQHandler+0x70>)
 8002062:	0018      	movs	r0, r3
 8002064:	f7ff fd56 	bl	8001b14 <LL_SPI_IsActiveFlag_TXE>
 8002068:	1e03      	subs	r3, r0, #0
 800206a:	d004      	beq.n	8002076 <SPI2_IRQHandler+0x6a>
	{
		LL_SPI_TransmitData8(SPI2, 0x55);//dummy transfer
 800206c:	4b03      	ldr	r3, [pc, #12]	@ (800207c <SPI2_IRQHandler+0x70>)
 800206e:	2155      	movs	r1, #85	@ 0x55
 8002070:	0018      	movs	r0, r3
 8002072:	f7ff fdc7 	bl	8001c04 <LL_SPI_TransmitData8>
	}
  /* USER CODE END SPI2_IRQn 0 */
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002076:	46c0      	nop			@ (mov r8, r8)
 8002078:	46bd      	mov	sp, r7
 800207a:	bdb0      	pop	{r4, r5, r7, pc}
 800207c:	40003800 	.word	0x40003800
 8002080:	200004ec 	.word	0x200004ec
 8002084:	20000488 	.word	0x20000488

08002088 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800208c:	46c0      	nop			@ (mov r8, r8)
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002094:	480d      	ldr	r0, [pc, #52]	@ (80020cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002096:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002098:	f7ff fff6 	bl	8002088 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800209c:	480c      	ldr	r0, [pc, #48]	@ (80020d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800209e:	490d      	ldr	r1, [pc, #52]	@ (80020d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020a0:	4a0d      	ldr	r2, [pc, #52]	@ (80020d8 <LoopForever+0xe>)
  movs r3, #0
 80020a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020a4:	e002      	b.n	80020ac <LoopCopyDataInit>

080020a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020aa:	3304      	adds	r3, #4

080020ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020b0:	d3f9      	bcc.n	80020a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020b2:	4a0a      	ldr	r2, [pc, #40]	@ (80020dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80020b4:	4c0a      	ldr	r4, [pc, #40]	@ (80020e0 <LoopForever+0x16>)
  movs r3, #0
 80020b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020b8:	e001      	b.n	80020be <LoopFillZerobss>

080020ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020bc:	3204      	adds	r2, #4

080020be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020c0:	d3fb      	bcc.n	80020ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80020c2:	f002 f9f1 	bl	80044a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020c6:	f7ff f9d7 	bl	8001478 <main>

080020ca <LoopForever>:

LoopForever:
    b LoopForever
 80020ca:	e7fe      	b.n	80020ca <LoopForever>
  ldr   r0, =_estack
 80020cc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80020d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020d4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80020d8:	080050dc 	.word	0x080050dc
  ldr r2, =_sbss
 80020dc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80020e0:	200004f4 	.word	0x200004f4

080020e4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020e4:	e7fe      	b.n	80020e4 <ADC1_IRQHandler>
	...

080020e8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020ec:	4b07      	ldr	r3, [pc, #28]	@ (800210c <HAL_Init+0x24>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4b06      	ldr	r3, [pc, #24]	@ (800210c <HAL_Init+0x24>)
 80020f2:	2110      	movs	r1, #16
 80020f4:	430a      	orrs	r2, r1
 80020f6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80020f8:	2003      	movs	r0, #3
 80020fa:	f000 f809 	bl	8002110 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020fe:	f7ff fc69 	bl	80019d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	0018      	movs	r0, r3
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	46c0      	nop			@ (mov r8, r8)
 800210c:	40022000 	.word	0x40022000

08002110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002110:	b590      	push	{r4, r7, lr}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002118:	4b14      	ldr	r3, [pc, #80]	@ (800216c <HAL_InitTick+0x5c>)
 800211a:	681c      	ldr	r4, [r3, #0]
 800211c:	4b14      	ldr	r3, [pc, #80]	@ (8002170 <HAL_InitTick+0x60>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	0019      	movs	r1, r3
 8002122:	23fa      	movs	r3, #250	@ 0xfa
 8002124:	0098      	lsls	r0, r3, #2
 8002126:	f7fd fff7 	bl	8000118 <__udivsi3>
 800212a:	0003      	movs	r3, r0
 800212c:	0019      	movs	r1, r3
 800212e:	0020      	movs	r0, r4
 8002130:	f7fd fff2 	bl	8000118 <__udivsi3>
 8002134:	0003      	movs	r3, r0
 8002136:	0018      	movs	r0, r3
 8002138:	f000 f8e1 	bl	80022fe <HAL_SYSTICK_Config>
 800213c:	1e03      	subs	r3, r0, #0
 800213e:	d001      	beq.n	8002144 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e00f      	b.n	8002164 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b03      	cmp	r3, #3
 8002148:	d80b      	bhi.n	8002162 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	2301      	movs	r3, #1
 800214e:	425b      	negs	r3, r3
 8002150:	2200      	movs	r2, #0
 8002152:	0018      	movs	r0, r3
 8002154:	f000 f8be 	bl	80022d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002158:	4b06      	ldr	r3, [pc, #24]	@ (8002174 <HAL_InitTick+0x64>)
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	e000      	b.n	8002164 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
}
 8002164:	0018      	movs	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	b003      	add	sp, #12
 800216a:	bd90      	pop	{r4, r7, pc}
 800216c:	20000004 	.word	0x20000004
 8002170:	2000000c 	.word	0x2000000c
 8002174:	20000008 	.word	0x20000008

08002178 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800217c:	4b05      	ldr	r3, [pc, #20]	@ (8002194 <HAL_IncTick+0x1c>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	001a      	movs	r2, r3
 8002182:	4b05      	ldr	r3, [pc, #20]	@ (8002198 <HAL_IncTick+0x20>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	18d2      	adds	r2, r2, r3
 8002188:	4b03      	ldr	r3, [pc, #12]	@ (8002198 <HAL_IncTick+0x20>)
 800218a:	601a      	str	r2, [r3, #0]
}
 800218c:	46c0      	nop			@ (mov r8, r8)
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	46c0      	nop			@ (mov r8, r8)
 8002194:	2000000c 	.word	0x2000000c
 8002198:	200004f0 	.word	0x200004f0

0800219c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  return uwTick;
 80021a0:	4b02      	ldr	r3, [pc, #8]	@ (80021ac <HAL_GetTick+0x10>)
 80021a2:	681b      	ldr	r3, [r3, #0]
}
 80021a4:	0018      	movs	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	46c0      	nop			@ (mov r8, r8)
 80021ac:	200004f0 	.word	0x200004f0

080021b0 <__NVIC_SetPriority>:
{
 80021b0:	b590      	push	{r4, r7, lr}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	0002      	movs	r2, r0
 80021b8:	6039      	str	r1, [r7, #0]
 80021ba:	1dfb      	adds	r3, r7, #7
 80021bc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021be:	1dfb      	adds	r3, r7, #7
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80021c4:	d828      	bhi.n	8002218 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021c6:	4a2f      	ldr	r2, [pc, #188]	@ (8002284 <__NVIC_SetPriority+0xd4>)
 80021c8:	1dfb      	adds	r3, r7, #7
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	b25b      	sxtb	r3, r3
 80021ce:	089b      	lsrs	r3, r3, #2
 80021d0:	33c0      	adds	r3, #192	@ 0xc0
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	589b      	ldr	r3, [r3, r2]
 80021d6:	1dfa      	adds	r2, r7, #7
 80021d8:	7812      	ldrb	r2, [r2, #0]
 80021da:	0011      	movs	r1, r2
 80021dc:	2203      	movs	r2, #3
 80021de:	400a      	ands	r2, r1
 80021e0:	00d2      	lsls	r2, r2, #3
 80021e2:	21ff      	movs	r1, #255	@ 0xff
 80021e4:	4091      	lsls	r1, r2
 80021e6:	000a      	movs	r2, r1
 80021e8:	43d2      	mvns	r2, r2
 80021ea:	401a      	ands	r2, r3
 80021ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	019b      	lsls	r3, r3, #6
 80021f2:	22ff      	movs	r2, #255	@ 0xff
 80021f4:	401a      	ands	r2, r3
 80021f6:	1dfb      	adds	r3, r7, #7
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	0018      	movs	r0, r3
 80021fc:	2303      	movs	r3, #3
 80021fe:	4003      	ands	r3, r0
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002204:	481f      	ldr	r0, [pc, #124]	@ (8002284 <__NVIC_SetPriority+0xd4>)
 8002206:	1dfb      	adds	r3, r7, #7
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	b25b      	sxtb	r3, r3
 800220c:	089b      	lsrs	r3, r3, #2
 800220e:	430a      	orrs	r2, r1
 8002210:	33c0      	adds	r3, #192	@ 0xc0
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	501a      	str	r2, [r3, r0]
}
 8002216:	e031      	b.n	800227c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002218:	4a1b      	ldr	r2, [pc, #108]	@ (8002288 <__NVIC_SetPriority+0xd8>)
 800221a:	1dfb      	adds	r3, r7, #7
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	0019      	movs	r1, r3
 8002220:	230f      	movs	r3, #15
 8002222:	400b      	ands	r3, r1
 8002224:	3b08      	subs	r3, #8
 8002226:	089b      	lsrs	r3, r3, #2
 8002228:	3306      	adds	r3, #6
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	18d3      	adds	r3, r2, r3
 800222e:	3304      	adds	r3, #4
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	1dfa      	adds	r2, r7, #7
 8002234:	7812      	ldrb	r2, [r2, #0]
 8002236:	0011      	movs	r1, r2
 8002238:	2203      	movs	r2, #3
 800223a:	400a      	ands	r2, r1
 800223c:	00d2      	lsls	r2, r2, #3
 800223e:	21ff      	movs	r1, #255	@ 0xff
 8002240:	4091      	lsls	r1, r2
 8002242:	000a      	movs	r2, r1
 8002244:	43d2      	mvns	r2, r2
 8002246:	401a      	ands	r2, r3
 8002248:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	019b      	lsls	r3, r3, #6
 800224e:	22ff      	movs	r2, #255	@ 0xff
 8002250:	401a      	ands	r2, r3
 8002252:	1dfb      	adds	r3, r7, #7
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	0018      	movs	r0, r3
 8002258:	2303      	movs	r3, #3
 800225a:	4003      	ands	r3, r0
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002260:	4809      	ldr	r0, [pc, #36]	@ (8002288 <__NVIC_SetPriority+0xd8>)
 8002262:	1dfb      	adds	r3, r7, #7
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	001c      	movs	r4, r3
 8002268:	230f      	movs	r3, #15
 800226a:	4023      	ands	r3, r4
 800226c:	3b08      	subs	r3, #8
 800226e:	089b      	lsrs	r3, r3, #2
 8002270:	430a      	orrs	r2, r1
 8002272:	3306      	adds	r3, #6
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	18c3      	adds	r3, r0, r3
 8002278:	3304      	adds	r3, #4
 800227a:	601a      	str	r2, [r3, #0]
}
 800227c:	46c0      	nop			@ (mov r8, r8)
 800227e:	46bd      	mov	sp, r7
 8002280:	b003      	add	sp, #12
 8002282:	bd90      	pop	{r4, r7, pc}
 8002284:	e000e100 	.word	0xe000e100
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	1e5a      	subs	r2, r3, #1
 8002298:	2380      	movs	r3, #128	@ 0x80
 800229a:	045b      	lsls	r3, r3, #17
 800229c:	429a      	cmp	r2, r3
 800229e:	d301      	bcc.n	80022a4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022a0:	2301      	movs	r3, #1
 80022a2:	e010      	b.n	80022c6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022a4:	4b0a      	ldr	r3, [pc, #40]	@ (80022d0 <SysTick_Config+0x44>)
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	3a01      	subs	r2, #1
 80022aa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ac:	2301      	movs	r3, #1
 80022ae:	425b      	negs	r3, r3
 80022b0:	2103      	movs	r1, #3
 80022b2:	0018      	movs	r0, r3
 80022b4:	f7ff ff7c 	bl	80021b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022b8:	4b05      	ldr	r3, [pc, #20]	@ (80022d0 <SysTick_Config+0x44>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022be:	4b04      	ldr	r3, [pc, #16]	@ (80022d0 <SysTick_Config+0x44>)
 80022c0:	2207      	movs	r2, #7
 80022c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	0018      	movs	r0, r3
 80022c8:	46bd      	mov	sp, r7
 80022ca:	b002      	add	sp, #8
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	46c0      	nop			@ (mov r8, r8)
 80022d0:	e000e010 	.word	0xe000e010

080022d4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60b9      	str	r1, [r7, #8]
 80022dc:	607a      	str	r2, [r7, #4]
 80022de:	210f      	movs	r1, #15
 80022e0:	187b      	adds	r3, r7, r1
 80022e2:	1c02      	adds	r2, r0, #0
 80022e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	187b      	adds	r3, r7, r1
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	b25b      	sxtb	r3, r3
 80022ee:	0011      	movs	r1, r2
 80022f0:	0018      	movs	r0, r3
 80022f2:	f7ff ff5d 	bl	80021b0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80022f6:	46c0      	nop			@ (mov r8, r8)
 80022f8:	46bd      	mov	sp, r7
 80022fa:	b004      	add	sp, #16
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	0018      	movs	r0, r3
 800230a:	f7ff ffbf 	bl	800228c <SysTick_Config>
 800230e:	0003      	movs	r3, r0
}
 8002310:	0018      	movs	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	b002      	add	sp, #8
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002322:	2300      	movs	r3, #0
 8002324:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002326:	e14f      	b.n	80025c8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2101      	movs	r1, #1
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	4091      	lsls	r1, r2
 8002332:	000a      	movs	r2, r1
 8002334:	4013      	ands	r3, r2
 8002336:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d100      	bne.n	8002340 <HAL_GPIO_Init+0x28>
 800233e:	e140      	b.n	80025c2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2203      	movs	r2, #3
 8002346:	4013      	ands	r3, r2
 8002348:	2b01      	cmp	r3, #1
 800234a:	d005      	beq.n	8002358 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2203      	movs	r2, #3
 8002352:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002354:	2b02      	cmp	r3, #2
 8002356:	d130      	bne.n	80023ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	2203      	movs	r2, #3
 8002364:	409a      	lsls	r2, r3
 8002366:	0013      	movs	r3, r2
 8002368:	43da      	mvns	r2, r3
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	4013      	ands	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	68da      	ldr	r2, [r3, #12]
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	409a      	lsls	r2, r3
 800237a:	0013      	movs	r3, r2
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	4313      	orrs	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800238e:	2201      	movs	r2, #1
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	409a      	lsls	r2, r3
 8002394:	0013      	movs	r3, r2
 8002396:	43da      	mvns	r2, r3
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4013      	ands	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	091b      	lsrs	r3, r3, #4
 80023a4:	2201      	movs	r2, #1
 80023a6:	401a      	ands	r2, r3
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	409a      	lsls	r2, r3
 80023ac:	0013      	movs	r3, r2
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2203      	movs	r2, #3
 80023c0:	4013      	ands	r3, r2
 80023c2:	2b03      	cmp	r3, #3
 80023c4:	d017      	beq.n	80023f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	2203      	movs	r2, #3
 80023d2:	409a      	lsls	r2, r3
 80023d4:	0013      	movs	r3, r2
 80023d6:	43da      	mvns	r2, r3
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	4013      	ands	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	409a      	lsls	r2, r3
 80023e8:	0013      	movs	r3, r2
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2203      	movs	r2, #3
 80023fc:	4013      	ands	r3, r2
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d123      	bne.n	800244a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	08da      	lsrs	r2, r3, #3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	3208      	adds	r2, #8
 800240a:	0092      	lsls	r2, r2, #2
 800240c:	58d3      	ldr	r3, [r2, r3]
 800240e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	2207      	movs	r2, #7
 8002414:	4013      	ands	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	220f      	movs	r2, #15
 800241a:	409a      	lsls	r2, r3
 800241c:	0013      	movs	r3, r2
 800241e:	43da      	mvns	r2, r3
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	4013      	ands	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	691a      	ldr	r2, [r3, #16]
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2107      	movs	r1, #7
 800242e:	400b      	ands	r3, r1
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	409a      	lsls	r2, r3
 8002434:	0013      	movs	r3, r2
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4313      	orrs	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	08da      	lsrs	r2, r3, #3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3208      	adds	r2, #8
 8002444:	0092      	lsls	r2, r2, #2
 8002446:	6939      	ldr	r1, [r7, #16]
 8002448:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	2203      	movs	r2, #3
 8002456:	409a      	lsls	r2, r3
 8002458:	0013      	movs	r3, r2
 800245a:	43da      	mvns	r2, r3
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4013      	ands	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2203      	movs	r2, #3
 8002468:	401a      	ands	r2, r3
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	409a      	lsls	r2, r3
 8002470:	0013      	movs	r3, r2
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	23c0      	movs	r3, #192	@ 0xc0
 8002484:	029b      	lsls	r3, r3, #10
 8002486:	4013      	ands	r3, r2
 8002488:	d100      	bne.n	800248c <HAL_GPIO_Init+0x174>
 800248a:	e09a      	b.n	80025c2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800248c:	4b54      	ldr	r3, [pc, #336]	@ (80025e0 <HAL_GPIO_Init+0x2c8>)
 800248e:	699a      	ldr	r2, [r3, #24]
 8002490:	4b53      	ldr	r3, [pc, #332]	@ (80025e0 <HAL_GPIO_Init+0x2c8>)
 8002492:	2101      	movs	r1, #1
 8002494:	430a      	orrs	r2, r1
 8002496:	619a      	str	r2, [r3, #24]
 8002498:	4b51      	ldr	r3, [pc, #324]	@ (80025e0 <HAL_GPIO_Init+0x2c8>)
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	2201      	movs	r2, #1
 800249e:	4013      	ands	r3, r2
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024a4:	4a4f      	ldr	r2, [pc, #316]	@ (80025e4 <HAL_GPIO_Init+0x2cc>)
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	089b      	lsrs	r3, r3, #2
 80024aa:	3302      	adds	r3, #2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	589b      	ldr	r3, [r3, r2]
 80024b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	2203      	movs	r2, #3
 80024b6:	4013      	ands	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	220f      	movs	r2, #15
 80024bc:	409a      	lsls	r2, r3
 80024be:	0013      	movs	r3, r2
 80024c0:	43da      	mvns	r2, r3
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4013      	ands	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	2390      	movs	r3, #144	@ 0x90
 80024cc:	05db      	lsls	r3, r3, #23
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d013      	beq.n	80024fa <HAL_GPIO_Init+0x1e2>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a44      	ldr	r2, [pc, #272]	@ (80025e8 <HAL_GPIO_Init+0x2d0>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d00d      	beq.n	80024f6 <HAL_GPIO_Init+0x1de>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a43      	ldr	r2, [pc, #268]	@ (80025ec <HAL_GPIO_Init+0x2d4>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d007      	beq.n	80024f2 <HAL_GPIO_Init+0x1da>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a42      	ldr	r2, [pc, #264]	@ (80025f0 <HAL_GPIO_Init+0x2d8>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d101      	bne.n	80024ee <HAL_GPIO_Init+0x1d6>
 80024ea:	2303      	movs	r3, #3
 80024ec:	e006      	b.n	80024fc <HAL_GPIO_Init+0x1e4>
 80024ee:	2305      	movs	r3, #5
 80024f0:	e004      	b.n	80024fc <HAL_GPIO_Init+0x1e4>
 80024f2:	2302      	movs	r3, #2
 80024f4:	e002      	b.n	80024fc <HAL_GPIO_Init+0x1e4>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <HAL_GPIO_Init+0x1e4>
 80024fa:	2300      	movs	r3, #0
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	2103      	movs	r1, #3
 8002500:	400a      	ands	r2, r1
 8002502:	0092      	lsls	r2, r2, #2
 8002504:	4093      	lsls	r3, r2
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800250c:	4935      	ldr	r1, [pc, #212]	@ (80025e4 <HAL_GPIO_Init+0x2cc>)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	089b      	lsrs	r3, r3, #2
 8002512:	3302      	adds	r3, #2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800251a:	4b36      	ldr	r3, [pc, #216]	@ (80025f4 <HAL_GPIO_Init+0x2dc>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	43da      	mvns	r2, r3
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	4013      	ands	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	2380      	movs	r3, #128	@ 0x80
 8002530:	035b      	lsls	r3, r3, #13
 8002532:	4013      	ands	r3, r2
 8002534:	d003      	beq.n	800253e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4313      	orrs	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800253e:	4b2d      	ldr	r3, [pc, #180]	@ (80025f4 <HAL_GPIO_Init+0x2dc>)
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002544:	4b2b      	ldr	r3, [pc, #172]	@ (80025f4 <HAL_GPIO_Init+0x2dc>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	43da      	mvns	r2, r3
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	4013      	ands	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	2380      	movs	r3, #128	@ 0x80
 800255a:	039b      	lsls	r3, r3, #14
 800255c:	4013      	ands	r3, r2
 800255e:	d003      	beq.n	8002568 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	4313      	orrs	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002568:	4b22      	ldr	r3, [pc, #136]	@ (80025f4 <HAL_GPIO_Init+0x2dc>)
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800256e:	4b21      	ldr	r3, [pc, #132]	@ (80025f4 <HAL_GPIO_Init+0x2dc>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	43da      	mvns	r2, r3
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	4013      	ands	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	2380      	movs	r3, #128	@ 0x80
 8002584:	029b      	lsls	r3, r3, #10
 8002586:	4013      	ands	r3, r2
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4313      	orrs	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002592:	4b18      	ldr	r3, [pc, #96]	@ (80025f4 <HAL_GPIO_Init+0x2dc>)
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002598:	4b16      	ldr	r3, [pc, #88]	@ (80025f4 <HAL_GPIO_Init+0x2dc>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	43da      	mvns	r2, r3
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4013      	ands	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	2380      	movs	r3, #128	@ 0x80
 80025ae:	025b      	lsls	r3, r3, #9
 80025b0:	4013      	ands	r3, r2
 80025b2:	d003      	beq.n	80025bc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80025bc:	4b0d      	ldr	r3, [pc, #52]	@ (80025f4 <HAL_GPIO_Init+0x2dc>)
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	3301      	adds	r3, #1
 80025c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	40da      	lsrs	r2, r3
 80025d0:	1e13      	subs	r3, r2, #0
 80025d2:	d000      	beq.n	80025d6 <HAL_GPIO_Init+0x2be>
 80025d4:	e6a8      	b.n	8002328 <HAL_GPIO_Init+0x10>
  } 
}
 80025d6:	46c0      	nop			@ (mov r8, r8)
 80025d8:	46c0      	nop			@ (mov r8, r8)
 80025da:	46bd      	mov	sp, r7
 80025dc:	b006      	add	sp, #24
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40021000 	.word	0x40021000
 80025e4:	40010000 	.word	0x40010000
 80025e8:	48000400 	.word	0x48000400
 80025ec:	48000800 	.word	0x48000800
 80025f0:	48000c00 	.word	0x48000c00
 80025f4:	40010400 	.word	0x40010400

080025f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e08f      	b.n	800272a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2241      	movs	r2, #65	@ 0x41
 800260e:	5c9b      	ldrb	r3, [r3, r2]
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d107      	bne.n	8002626 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2240      	movs	r2, #64	@ 0x40
 800261a:	2100      	movs	r1, #0
 800261c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	0018      	movs	r0, r3
 8002622:	f7ff f9fb 	bl	8001a1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2241      	movs	r2, #65	@ 0x41
 800262a:	2124      	movs	r1, #36	@ 0x24
 800262c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2101      	movs	r1, #1
 800263a:	438a      	bics	r2, r1
 800263c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	493b      	ldr	r1, [pc, #236]	@ (8002734 <HAL_I2C_Init+0x13c>)
 8002648:	400a      	ands	r2, r1
 800264a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689a      	ldr	r2, [r3, #8]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4938      	ldr	r1, [pc, #224]	@ (8002738 <HAL_I2C_Init+0x140>)
 8002658:	400a      	ands	r2, r1
 800265a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d108      	bne.n	8002676 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2180      	movs	r1, #128	@ 0x80
 800266e:	0209      	lsls	r1, r1, #8
 8002670:	430a      	orrs	r2, r1
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	e007      	b.n	8002686 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689a      	ldr	r2, [r3, #8]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2184      	movs	r1, #132	@ 0x84
 8002680:	0209      	lsls	r1, r1, #8
 8002682:	430a      	orrs	r2, r1
 8002684:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	2b02      	cmp	r3, #2
 800268c:	d109      	bne.n	80026a2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2180      	movs	r1, #128	@ 0x80
 800269a:	0109      	lsls	r1, r1, #4
 800269c:	430a      	orrs	r2, r1
 800269e:	605a      	str	r2, [r3, #4]
 80026a0:	e007      	b.n	80026b2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4923      	ldr	r1, [pc, #140]	@ (800273c <HAL_I2C_Init+0x144>)
 80026ae:	400a      	ands	r2, r1
 80026b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4920      	ldr	r1, [pc, #128]	@ (8002740 <HAL_I2C_Init+0x148>)
 80026be:	430a      	orrs	r2, r1
 80026c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	491a      	ldr	r1, [pc, #104]	@ (8002738 <HAL_I2C_Init+0x140>)
 80026ce:	400a      	ands	r2, r1
 80026d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691a      	ldr	r2, [r3, #16]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	431a      	orrs	r2, r3
 80026dc:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69d9      	ldr	r1, [r3, #28]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a1a      	ldr	r2, [r3, #32]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2101      	movs	r1, #1
 8002708:	430a      	orrs	r2, r1
 800270a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2241      	movs	r2, #65	@ 0x41
 8002716:	2120      	movs	r1, #32
 8002718:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2242      	movs	r2, #66	@ 0x42
 8002724:	2100      	movs	r1, #0
 8002726:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	0018      	movs	r0, r3
 800272c:	46bd      	mov	sp, r7
 800272e:	b002      	add	sp, #8
 8002730:	bd80      	pop	{r7, pc}
 8002732:	46c0      	nop			@ (mov r8, r8)
 8002734:	f0ffffff 	.word	0xf0ffffff
 8002738:	ffff7fff 	.word	0xffff7fff
 800273c:	fffff7ff 	.word	0xfffff7ff
 8002740:	02008000 	.word	0x02008000

08002744 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002744:	b590      	push	{r4, r7, lr}
 8002746:	b089      	sub	sp, #36	@ 0x24
 8002748:	af02      	add	r7, sp, #8
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	0008      	movs	r0, r1
 800274e:	607a      	str	r2, [r7, #4]
 8002750:	0019      	movs	r1, r3
 8002752:	230a      	movs	r3, #10
 8002754:	18fb      	adds	r3, r7, r3
 8002756:	1c02      	adds	r2, r0, #0
 8002758:	801a      	strh	r2, [r3, #0]
 800275a:	2308      	movs	r3, #8
 800275c:	18fb      	adds	r3, r7, r3
 800275e:	1c0a      	adds	r2, r1, #0
 8002760:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2241      	movs	r2, #65	@ 0x41
 8002766:	5c9b      	ldrb	r3, [r3, r2]
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b20      	cmp	r3, #32
 800276c:	d000      	beq.n	8002770 <HAL_I2C_Master_Transmit+0x2c>
 800276e:	e10a      	b.n	8002986 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2240      	movs	r2, #64	@ 0x40
 8002774:	5c9b      	ldrb	r3, [r3, r2]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d101      	bne.n	800277e <HAL_I2C_Master_Transmit+0x3a>
 800277a:	2302      	movs	r3, #2
 800277c:	e104      	b.n	8002988 <HAL_I2C_Master_Transmit+0x244>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2240      	movs	r2, #64	@ 0x40
 8002782:	2101      	movs	r1, #1
 8002784:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002786:	f7ff fd09 	bl	800219c <HAL_GetTick>
 800278a:	0003      	movs	r3, r0
 800278c:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	0219      	lsls	r1, r3, #8
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	2319      	movs	r3, #25
 800279a:	2201      	movs	r2, #1
 800279c:	f000 f91e 	bl	80029dc <I2C_WaitOnFlagUntilTimeout>
 80027a0:	1e03      	subs	r3, r0, #0
 80027a2:	d001      	beq.n	80027a8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0ef      	b.n	8002988 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2241      	movs	r2, #65	@ 0x41
 80027ac:	2121      	movs	r1, #33	@ 0x21
 80027ae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2242      	movs	r2, #66	@ 0x42
 80027b4:	2110      	movs	r1, #16
 80027b6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2208      	movs	r2, #8
 80027c8:	18ba      	adds	r2, r7, r2
 80027ca:	8812      	ldrh	r2, [r2, #0]
 80027cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d8:	b29b      	uxth	r3, r3
 80027da:	2bff      	cmp	r3, #255	@ 0xff
 80027dc:	d906      	bls.n	80027ec <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	22ff      	movs	r2, #255	@ 0xff
 80027e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80027e4:	2380      	movs	r3, #128	@ 0x80
 80027e6:	045b      	lsls	r3, r3, #17
 80027e8:	617b      	str	r3, [r7, #20]
 80027ea:	e007      	b.n	80027fc <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80027f6:	2380      	movs	r3, #128	@ 0x80
 80027f8:	049b      	lsls	r3, r3, #18
 80027fa:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002800:	2b00      	cmp	r3, #0
 8002802:	d027      	beq.n	8002854 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002808:	781a      	ldrb	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800281e:	b29b      	uxth	r3, r3
 8002820:	3b01      	subs	r3, #1
 8002822:	b29a      	uxth	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800282c:	3b01      	subs	r3, #1
 800282e:	b29a      	uxth	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002838:	b2db      	uxtb	r3, r3
 800283a:	3301      	adds	r3, #1
 800283c:	b2da      	uxtb	r2, r3
 800283e:	697c      	ldr	r4, [r7, #20]
 8002840:	230a      	movs	r3, #10
 8002842:	18fb      	adds	r3, r7, r3
 8002844:	8819      	ldrh	r1, [r3, #0]
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	4b51      	ldr	r3, [pc, #324]	@ (8002990 <HAL_I2C_Master_Transmit+0x24c>)
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	0023      	movs	r3, r4
 800284e:	f000 fa9f 	bl	8002d90 <I2C_TransferConfig>
 8002852:	e06f      	b.n	8002934 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002858:	b2da      	uxtb	r2, r3
 800285a:	697c      	ldr	r4, [r7, #20]
 800285c:	230a      	movs	r3, #10
 800285e:	18fb      	adds	r3, r7, r3
 8002860:	8819      	ldrh	r1, [r3, #0]
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	4b4a      	ldr	r3, [pc, #296]	@ (8002990 <HAL_I2C_Master_Transmit+0x24c>)
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	0023      	movs	r3, r4
 800286a:	f000 fa91 	bl	8002d90 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800286e:	e061      	b.n	8002934 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	0018      	movs	r0, r3
 8002878:	f000 f908 	bl	8002a8c <I2C_WaitOnTXISFlagUntilTimeout>
 800287c:	1e03      	subs	r3, r0, #0
 800287e:	d001      	beq.n	8002884 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e081      	b.n	8002988 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002888:	781a      	ldrb	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d03a      	beq.n	8002934 <HAL_I2C_Master_Transmit+0x1f0>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d136      	bne.n	8002934 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	0013      	movs	r3, r2
 80028d0:	2200      	movs	r2, #0
 80028d2:	2180      	movs	r1, #128	@ 0x80
 80028d4:	f000 f882 	bl	80029dc <I2C_WaitOnFlagUntilTimeout>
 80028d8:	1e03      	subs	r3, r0, #0
 80028da:	d001      	beq.n	80028e0 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e053      	b.n	8002988 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	2bff      	cmp	r3, #255	@ 0xff
 80028e8:	d911      	bls.n	800290e <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	22ff      	movs	r2, #255	@ 0xff
 80028ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	2380      	movs	r3, #128	@ 0x80
 80028f8:	045c      	lsls	r4, r3, #17
 80028fa:	230a      	movs	r3, #10
 80028fc:	18fb      	adds	r3, r7, r3
 80028fe:	8819      	ldrh	r1, [r3, #0]
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	2300      	movs	r3, #0
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	0023      	movs	r3, r4
 8002908:	f000 fa42 	bl	8002d90 <I2C_TransferConfig>
 800290c:	e012      	b.n	8002934 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002912:	b29a      	uxth	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800291c:	b2da      	uxtb	r2, r3
 800291e:	2380      	movs	r3, #128	@ 0x80
 8002920:	049c      	lsls	r4, r3, #18
 8002922:	230a      	movs	r3, #10
 8002924:	18fb      	adds	r3, r7, r3
 8002926:	8819      	ldrh	r1, [r3, #0]
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	2300      	movs	r3, #0
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	0023      	movs	r3, r4
 8002930:	f000 fa2e 	bl	8002d90 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002938:	b29b      	uxth	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d198      	bne.n	8002870 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	0018      	movs	r0, r3
 8002946:	f000 f8e7 	bl	8002b18 <I2C_WaitOnSTOPFlagUntilTimeout>
 800294a:	1e03      	subs	r3, r0, #0
 800294c:	d001      	beq.n	8002952 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e01a      	b.n	8002988 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2220      	movs	r2, #32
 8002958:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	490b      	ldr	r1, [pc, #44]	@ (8002994 <HAL_I2C_Master_Transmit+0x250>)
 8002966:	400a      	ands	r2, r1
 8002968:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2241      	movs	r2, #65	@ 0x41
 800296e:	2120      	movs	r1, #32
 8002970:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2242      	movs	r2, #66	@ 0x42
 8002976:	2100      	movs	r1, #0
 8002978:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2240      	movs	r2, #64	@ 0x40
 800297e:	2100      	movs	r1, #0
 8002980:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002982:	2300      	movs	r3, #0
 8002984:	e000      	b.n	8002988 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8002986:	2302      	movs	r3, #2
  }
}
 8002988:	0018      	movs	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	b007      	add	sp, #28
 800298e:	bd90      	pop	{r4, r7, pc}
 8002990:	80002000 	.word	0x80002000
 8002994:	fe00e800 	.word	0xfe00e800

08002998 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	2202      	movs	r2, #2
 80029a8:	4013      	ands	r3, r2
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d103      	bne.n	80029b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2200      	movs	r2, #0
 80029b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	2201      	movs	r2, #1
 80029be:	4013      	ands	r3, r2
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d007      	beq.n	80029d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699a      	ldr	r2, [r3, #24]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2101      	movs	r1, #1
 80029d0:	430a      	orrs	r2, r1
 80029d2:	619a      	str	r2, [r3, #24]
  }
}
 80029d4:	46c0      	nop			@ (mov r8, r8)
 80029d6:	46bd      	mov	sp, r7
 80029d8:	b002      	add	sp, #8
 80029da:	bd80      	pop	{r7, pc}

080029dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	603b      	str	r3, [r7, #0]
 80029e8:	1dfb      	adds	r3, r7, #7
 80029ea:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029ec:	e03a      	b.n	8002a64 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	6839      	ldr	r1, [r7, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	0018      	movs	r0, r3
 80029f6:	f000 f8d3 	bl	8002ba0 <I2C_IsErrorOccurred>
 80029fa:	1e03      	subs	r3, r0, #0
 80029fc:	d001      	beq.n	8002a02 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e040      	b.n	8002a84 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	3301      	adds	r3, #1
 8002a06:	d02d      	beq.n	8002a64 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a08:	f7ff fbc8 	bl	800219c <HAL_GetTick>
 8002a0c:	0002      	movs	r2, r0
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d302      	bcc.n	8002a1e <I2C_WaitOnFlagUntilTimeout+0x42>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d122      	bne.n	8002a64 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	4013      	ands	r3, r2
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	425a      	negs	r2, r3
 8002a2e:	4153      	adcs	r3, r2
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	001a      	movs	r2, r3
 8002a34:	1dfb      	adds	r3, r7, #7
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d113      	bne.n	8002a64 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a40:	2220      	movs	r2, #32
 8002a42:	431a      	orrs	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2241      	movs	r2, #65	@ 0x41
 8002a4c:	2120      	movs	r1, #32
 8002a4e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2242      	movs	r2, #66	@ 0x42
 8002a54:	2100      	movs	r1, #0
 8002a56:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2240      	movs	r2, #64	@ 0x40
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e00f      	b.n	8002a84 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	425a      	negs	r2, r3
 8002a74:	4153      	adcs	r3, r2
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	001a      	movs	r2, r3
 8002a7a:	1dfb      	adds	r3, r7, #7
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d0b5      	beq.n	80029ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	0018      	movs	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	b004      	add	sp, #16
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a98:	e032      	b.n	8002b00 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	68b9      	ldr	r1, [r7, #8]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f000 f87d 	bl	8002ba0 <I2C_IsErrorOccurred>
 8002aa6:	1e03      	subs	r3, r0, #0
 8002aa8:	d001      	beq.n	8002aae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e030      	b.n	8002b10 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	d025      	beq.n	8002b00 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ab4:	f7ff fb72 	bl	800219c <HAL_GetTick>
 8002ab8:	0002      	movs	r2, r0
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d302      	bcc.n	8002aca <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d11a      	bne.n	8002b00 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	2202      	movs	r2, #2
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d013      	beq.n	8002b00 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002adc:	2220      	movs	r2, #32
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2241      	movs	r2, #65	@ 0x41
 8002ae8:	2120      	movs	r1, #32
 8002aea:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2242      	movs	r2, #66	@ 0x42
 8002af0:	2100      	movs	r1, #0
 8002af2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2240      	movs	r2, #64	@ 0x40
 8002af8:	2100      	movs	r1, #0
 8002afa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e007      	b.n	8002b10 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	2202      	movs	r2, #2
 8002b08:	4013      	ands	r3, r2
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d1c5      	bne.n	8002a9a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	0018      	movs	r0, r3
 8002b12:	46bd      	mov	sp, r7
 8002b14:	b004      	add	sp, #16
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b24:	e02f      	b.n	8002b86 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	68b9      	ldr	r1, [r7, #8]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f000 f837 	bl	8002ba0 <I2C_IsErrorOccurred>
 8002b32:	1e03      	subs	r3, r0, #0
 8002b34:	d001      	beq.n	8002b3a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e02d      	b.n	8002b96 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b3a:	f7ff fb2f 	bl	800219c <HAL_GetTick>
 8002b3e:	0002      	movs	r2, r0
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	68ba      	ldr	r2, [r7, #8]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d302      	bcc.n	8002b50 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d11a      	bne.n	8002b86 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	2220      	movs	r2, #32
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b20      	cmp	r3, #32
 8002b5c:	d013      	beq.n	8002b86 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b62:	2220      	movs	r2, #32
 8002b64:	431a      	orrs	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2241      	movs	r2, #65	@ 0x41
 8002b6e:	2120      	movs	r1, #32
 8002b70:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2242      	movs	r2, #66	@ 0x42
 8002b76:	2100      	movs	r1, #0
 8002b78:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2240      	movs	r2, #64	@ 0x40
 8002b7e:	2100      	movs	r1, #0
 8002b80:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e007      	b.n	8002b96 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	4013      	ands	r3, r2
 8002b90:	2b20      	cmp	r3, #32
 8002b92:	d1c8      	bne.n	8002b26 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	0018      	movs	r0, r3
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	b004      	add	sp, #16
 8002b9c:	bd80      	pop	{r7, pc}
	...

08002ba0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08a      	sub	sp, #40	@ 0x28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bac:	2327      	movs	r3, #39	@ 0x27
 8002bae:	18fb      	adds	r3, r7, r3
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	2210      	movs	r2, #16
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d100      	bne.n	8002bce <I2C_IsErrorOccurred+0x2e>
 8002bcc:	e079      	b.n	8002cc2 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2210      	movs	r2, #16
 8002bd4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002bd6:	e057      	b.n	8002c88 <I2C_IsErrorOccurred+0xe8>
 8002bd8:	2227      	movs	r2, #39	@ 0x27
 8002bda:	18bb      	adds	r3, r7, r2
 8002bdc:	18ba      	adds	r2, r7, r2
 8002bde:	7812      	ldrb	r2, [r2, #0]
 8002be0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	3301      	adds	r3, #1
 8002be6:	d04f      	beq.n	8002c88 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002be8:	f7ff fad8 	bl	800219c <HAL_GetTick>
 8002bec:	0002      	movs	r2, r0
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d302      	bcc.n	8002bfe <I2C_IsErrorOccurred+0x5e>
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d144      	bne.n	8002c88 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	2380      	movs	r3, #128	@ 0x80
 8002c06:	01db      	lsls	r3, r3, #7
 8002c08:	4013      	ands	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c0c:	2013      	movs	r0, #19
 8002c0e:	183b      	adds	r3, r7, r0
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	2142      	movs	r1, #66	@ 0x42
 8002c14:	5c52      	ldrb	r2, [r2, r1]
 8002c16:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	699a      	ldr	r2, [r3, #24]
 8002c1e:	2380      	movs	r3, #128	@ 0x80
 8002c20:	021b      	lsls	r3, r3, #8
 8002c22:	401a      	ands	r2, r3
 8002c24:	2380      	movs	r3, #128	@ 0x80
 8002c26:	021b      	lsls	r3, r3, #8
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d126      	bne.n	8002c7a <I2C_IsErrorOccurred+0xda>
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	2380      	movs	r3, #128	@ 0x80
 8002c30:	01db      	lsls	r3, r3, #7
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d021      	beq.n	8002c7a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002c36:	183b      	adds	r3, r7, r0
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	2b20      	cmp	r3, #32
 8002c3c:	d01d      	beq.n	8002c7a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2180      	movs	r1, #128	@ 0x80
 8002c4a:	01c9      	lsls	r1, r1, #7
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c50:	f7ff faa4 	bl	800219c <HAL_GetTick>
 8002c54:	0003      	movs	r3, r0
 8002c56:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c58:	e00f      	b.n	8002c7a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c5a:	f7ff fa9f 	bl	800219c <HAL_GetTick>
 8002c5e:	0002      	movs	r2, r0
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b19      	cmp	r3, #25
 8002c66:	d908      	bls.n	8002c7a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002c70:	2327      	movs	r3, #39	@ 0x27
 8002c72:	18fb      	adds	r3, r7, r3
 8002c74:	2201      	movs	r2, #1
 8002c76:	701a      	strb	r2, [r3, #0]

              break;
 8002c78:	e006      	b.n	8002c88 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	2220      	movs	r2, #32
 8002c82:	4013      	ands	r3, r2
 8002c84:	2b20      	cmp	r3, #32
 8002c86:	d1e8      	bne.n	8002c5a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	2220      	movs	r2, #32
 8002c90:	4013      	ands	r3, r2
 8002c92:	2b20      	cmp	r3, #32
 8002c94:	d004      	beq.n	8002ca0 <I2C_IsErrorOccurred+0x100>
 8002c96:	2327      	movs	r3, #39	@ 0x27
 8002c98:	18fb      	adds	r3, r7, r3
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d09b      	beq.n	8002bd8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002ca0:	2327      	movs	r3, #39	@ 0x27
 8002ca2:	18fb      	adds	r3, r7, r3
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d103      	bne.n	8002cb2 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	2204      	movs	r2, #4
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002cba:	2327      	movs	r3, #39	@ 0x27
 8002cbc:	18fb      	adds	r3, r7, r3
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	2380      	movs	r3, #128	@ 0x80
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d00c      	beq.n	8002cee <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002cd4:	6a3b      	ldr	r3, [r7, #32]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2280      	movs	r2, #128	@ 0x80
 8002ce2:	0052      	lsls	r2, r2, #1
 8002ce4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ce6:	2327      	movs	r3, #39	@ 0x27
 8002ce8:	18fb      	adds	r3, r7, r3
 8002cea:	2201      	movs	r2, #1
 8002cec:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	2380      	movs	r3, #128	@ 0x80
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	d00c      	beq.n	8002d12 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
 8002cfa:	2208      	movs	r2, #8
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2280      	movs	r2, #128	@ 0x80
 8002d06:	00d2      	lsls	r2, r2, #3
 8002d08:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d0a:	2327      	movs	r3, #39	@ 0x27
 8002d0c:	18fb      	adds	r3, r7, r3
 8002d0e:	2201      	movs	r2, #1
 8002d10:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	2380      	movs	r3, #128	@ 0x80
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4013      	ands	r3, r2
 8002d1a:	d00c      	beq.n	8002d36 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	4313      	orrs	r3, r2
 8002d22:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2280      	movs	r2, #128	@ 0x80
 8002d2a:	0092      	lsls	r2, r2, #2
 8002d2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d2e:	2327      	movs	r3, #39	@ 0x27
 8002d30:	18fb      	adds	r3, r7, r3
 8002d32:	2201      	movs	r2, #1
 8002d34:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002d36:	2327      	movs	r3, #39	@ 0x27
 8002d38:	18fb      	adds	r3, r7, r3
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d01d      	beq.n	8002d7c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	0018      	movs	r0, r3
 8002d44:	f7ff fe28 	bl	8002998 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	490e      	ldr	r1, [pc, #56]	@ (8002d8c <I2C_IsErrorOccurred+0x1ec>)
 8002d54:	400a      	ands	r2, r1
 8002d56:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2241      	movs	r2, #65	@ 0x41
 8002d68:	2120      	movs	r1, #32
 8002d6a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2242      	movs	r2, #66	@ 0x42
 8002d70:	2100      	movs	r1, #0
 8002d72:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2240      	movs	r2, #64	@ 0x40
 8002d78:	2100      	movs	r1, #0
 8002d7a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002d7c:	2327      	movs	r3, #39	@ 0x27
 8002d7e:	18fb      	adds	r3, r7, r3
 8002d80:	781b      	ldrb	r3, [r3, #0]
}
 8002d82:	0018      	movs	r0, r3
 8002d84:	46bd      	mov	sp, r7
 8002d86:	b00a      	add	sp, #40	@ 0x28
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	46c0      	nop			@ (mov r8, r8)
 8002d8c:	fe00e800 	.word	0xfe00e800

08002d90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d90:	b590      	push	{r4, r7, lr}
 8002d92:	b087      	sub	sp, #28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	0008      	movs	r0, r1
 8002d9a:	0011      	movs	r1, r2
 8002d9c:	607b      	str	r3, [r7, #4]
 8002d9e:	240a      	movs	r4, #10
 8002da0:	193b      	adds	r3, r7, r4
 8002da2:	1c02      	adds	r2, r0, #0
 8002da4:	801a      	strh	r2, [r3, #0]
 8002da6:	2009      	movs	r0, #9
 8002da8:	183b      	adds	r3, r7, r0
 8002daa:	1c0a      	adds	r2, r1, #0
 8002dac:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dae:	193b      	adds	r3, r7, r4
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	059b      	lsls	r3, r3, #22
 8002db4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002db6:	183b      	adds	r3, r7, r0
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	0419      	lsls	r1, r3, #16
 8002dbc:	23ff      	movs	r3, #255	@ 0xff
 8002dbe:	041b      	lsls	r3, r3, #16
 8002dc0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dc2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	085b      	lsrs	r3, r3, #1
 8002dd0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002dda:	0d51      	lsrs	r1, r2, #21
 8002ddc:	2280      	movs	r2, #128	@ 0x80
 8002dde:	00d2      	lsls	r2, r2, #3
 8002de0:	400a      	ands	r2, r1
 8002de2:	4907      	ldr	r1, [pc, #28]	@ (8002e00 <I2C_TransferConfig+0x70>)
 8002de4:	430a      	orrs	r2, r1
 8002de6:	43d2      	mvns	r2, r2
 8002de8:	401a      	ands	r2, r3
 8002dea:	0011      	movs	r1, r2
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002df6:	46c0      	nop			@ (mov r8, r8)
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	b007      	add	sp, #28
 8002dfc:	bd90      	pop	{r4, r7, pc}
 8002dfe:	46c0      	nop			@ (mov r8, r8)
 8002e00:	03ff63ff 	.word	0x03ff63ff

08002e04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2241      	movs	r2, #65	@ 0x41
 8002e12:	5c9b      	ldrb	r3, [r3, r2]
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b20      	cmp	r3, #32
 8002e18:	d138      	bne.n	8002e8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2240      	movs	r2, #64	@ 0x40
 8002e1e:	5c9b      	ldrb	r3, [r3, r2]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d101      	bne.n	8002e28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e24:	2302      	movs	r3, #2
 8002e26:	e032      	b.n	8002e8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2240      	movs	r2, #64	@ 0x40
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2241      	movs	r2, #65	@ 0x41
 8002e34:	2124      	movs	r1, #36	@ 0x24
 8002e36:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2101      	movs	r1, #1
 8002e44:	438a      	bics	r2, r1
 8002e46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4911      	ldr	r1, [pc, #68]	@ (8002e98 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002e54:	400a      	ands	r2, r1
 8002e56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6819      	ldr	r1, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2101      	movs	r1, #1
 8002e74:	430a      	orrs	r2, r1
 8002e76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2241      	movs	r2, #65	@ 0x41
 8002e7c:	2120      	movs	r1, #32
 8002e7e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2240      	movs	r2, #64	@ 0x40
 8002e84:	2100      	movs	r1, #0
 8002e86:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	e000      	b.n	8002e8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e8c:	2302      	movs	r3, #2
  }
}
 8002e8e:	0018      	movs	r0, r3
 8002e90:	46bd      	mov	sp, r7
 8002e92:	b002      	add	sp, #8
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	46c0      	nop			@ (mov r8, r8)
 8002e98:	ffffefff 	.word	0xffffefff

08002e9c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2241      	movs	r2, #65	@ 0x41
 8002eaa:	5c9b      	ldrb	r3, [r3, r2]
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b20      	cmp	r3, #32
 8002eb0:	d139      	bne.n	8002f26 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2240      	movs	r2, #64	@ 0x40
 8002eb6:	5c9b      	ldrb	r3, [r3, r2]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e033      	b.n	8002f28 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2240      	movs	r2, #64	@ 0x40
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2241      	movs	r2, #65	@ 0x41
 8002ecc:	2124      	movs	r1, #36	@ 0x24
 8002ece:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2101      	movs	r1, #1
 8002edc:	438a      	bics	r2, r1
 8002ede:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4a11      	ldr	r2, [pc, #68]	@ (8002f30 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002eec:	4013      	ands	r3, r2
 8002eee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	021b      	lsls	r3, r3, #8
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2241      	movs	r2, #65	@ 0x41
 8002f16:	2120      	movs	r1, #32
 8002f18:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2240      	movs	r2, #64	@ 0x40
 8002f1e:	2100      	movs	r1, #0
 8002f20:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002f22:	2300      	movs	r3, #0
 8002f24:	e000      	b.n	8002f28 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f26:	2302      	movs	r3, #2
  }
}
 8002f28:	0018      	movs	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	b004      	add	sp, #16
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	fffff0ff 	.word	0xfffff0ff

08002f34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b088      	sub	sp, #32
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e301      	b.n	800354a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	d100      	bne.n	8002f52 <HAL_RCC_OscConfig+0x1e>
 8002f50:	e08d      	b.n	800306e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002f52:	4bc3      	ldr	r3, [pc, #780]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	220c      	movs	r2, #12
 8002f58:	4013      	ands	r3, r2
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	d00e      	beq.n	8002f7c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f5e:	4bc0      	ldr	r3, [pc, #768]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	220c      	movs	r2, #12
 8002f64:	4013      	ands	r3, r2
 8002f66:	2b08      	cmp	r3, #8
 8002f68:	d116      	bne.n	8002f98 <HAL_RCC_OscConfig+0x64>
 8002f6a:	4bbd      	ldr	r3, [pc, #756]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	2380      	movs	r3, #128	@ 0x80
 8002f70:	025b      	lsls	r3, r3, #9
 8002f72:	401a      	ands	r2, r3
 8002f74:	2380      	movs	r3, #128	@ 0x80
 8002f76:	025b      	lsls	r3, r3, #9
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d10d      	bne.n	8002f98 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f7c:	4bb8      	ldr	r3, [pc, #736]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	2380      	movs	r3, #128	@ 0x80
 8002f82:	029b      	lsls	r3, r3, #10
 8002f84:	4013      	ands	r3, r2
 8002f86:	d100      	bne.n	8002f8a <HAL_RCC_OscConfig+0x56>
 8002f88:	e070      	b.n	800306c <HAL_RCC_OscConfig+0x138>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d000      	beq.n	8002f94 <HAL_RCC_OscConfig+0x60>
 8002f92:	e06b      	b.n	800306c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e2d8      	b.n	800354a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d107      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x7c>
 8002fa0:	4baf      	ldr	r3, [pc, #700]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	4bae      	ldr	r3, [pc, #696]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 8002fa6:	2180      	movs	r1, #128	@ 0x80
 8002fa8:	0249      	lsls	r1, r1, #9
 8002faa:	430a      	orrs	r2, r1
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	e02f      	b.n	8003010 <HAL_RCC_OscConfig+0xdc>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10c      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x9e>
 8002fb8:	4ba9      	ldr	r3, [pc, #676]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	4ba8      	ldr	r3, [pc, #672]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 8002fbe:	49a9      	ldr	r1, [pc, #676]	@ (8003264 <HAL_RCC_OscConfig+0x330>)
 8002fc0:	400a      	ands	r2, r1
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	4ba6      	ldr	r3, [pc, #664]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	4ba5      	ldr	r3, [pc, #660]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 8002fca:	49a7      	ldr	r1, [pc, #668]	@ (8003268 <HAL_RCC_OscConfig+0x334>)
 8002fcc:	400a      	ands	r2, r1
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	e01e      	b.n	8003010 <HAL_RCC_OscConfig+0xdc>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b05      	cmp	r3, #5
 8002fd8:	d10e      	bne.n	8002ff8 <HAL_RCC_OscConfig+0xc4>
 8002fda:	4ba1      	ldr	r3, [pc, #644]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	4ba0      	ldr	r3, [pc, #640]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 8002fe0:	2180      	movs	r1, #128	@ 0x80
 8002fe2:	02c9      	lsls	r1, r1, #11
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	4b9d      	ldr	r3, [pc, #628]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	4b9c      	ldr	r3, [pc, #624]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 8002fee:	2180      	movs	r1, #128	@ 0x80
 8002ff0:	0249      	lsls	r1, r1, #9
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	e00b      	b.n	8003010 <HAL_RCC_OscConfig+0xdc>
 8002ff8:	4b99      	ldr	r3, [pc, #612]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	4b98      	ldr	r3, [pc, #608]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 8002ffe:	4999      	ldr	r1, [pc, #612]	@ (8003264 <HAL_RCC_OscConfig+0x330>)
 8003000:	400a      	ands	r2, r1
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	4b96      	ldr	r3, [pc, #600]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	4b95      	ldr	r3, [pc, #596]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 800300a:	4997      	ldr	r1, [pc, #604]	@ (8003268 <HAL_RCC_OscConfig+0x334>)
 800300c:	400a      	ands	r2, r1
 800300e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d014      	beq.n	8003042 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003018:	f7ff f8c0 	bl	800219c <HAL_GetTick>
 800301c:	0003      	movs	r3, r0
 800301e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003022:	f7ff f8bb 	bl	800219c <HAL_GetTick>
 8003026:	0002      	movs	r2, r0
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b64      	cmp	r3, #100	@ 0x64
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e28a      	b.n	800354a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003034:	4b8a      	ldr	r3, [pc, #552]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	2380      	movs	r3, #128	@ 0x80
 800303a:	029b      	lsls	r3, r3, #10
 800303c:	4013      	ands	r3, r2
 800303e:	d0f0      	beq.n	8003022 <HAL_RCC_OscConfig+0xee>
 8003040:	e015      	b.n	800306e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003042:	f7ff f8ab 	bl	800219c <HAL_GetTick>
 8003046:	0003      	movs	r3, r0
 8003048:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800304c:	f7ff f8a6 	bl	800219c <HAL_GetTick>
 8003050:	0002      	movs	r2, r0
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b64      	cmp	r3, #100	@ 0x64
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e275      	b.n	800354a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800305e:	4b80      	ldr	r3, [pc, #512]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	2380      	movs	r3, #128	@ 0x80
 8003064:	029b      	lsls	r3, r3, #10
 8003066:	4013      	ands	r3, r2
 8003068:	d1f0      	bne.n	800304c <HAL_RCC_OscConfig+0x118>
 800306a:	e000      	b.n	800306e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800306c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2202      	movs	r2, #2
 8003074:	4013      	ands	r3, r2
 8003076:	d100      	bne.n	800307a <HAL_RCC_OscConfig+0x146>
 8003078:	e069      	b.n	800314e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800307a:	4b79      	ldr	r3, [pc, #484]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	220c      	movs	r2, #12
 8003080:	4013      	ands	r3, r2
 8003082:	d00b      	beq.n	800309c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003084:	4b76      	ldr	r3, [pc, #472]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	220c      	movs	r2, #12
 800308a:	4013      	ands	r3, r2
 800308c:	2b08      	cmp	r3, #8
 800308e:	d11c      	bne.n	80030ca <HAL_RCC_OscConfig+0x196>
 8003090:	4b73      	ldr	r3, [pc, #460]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	2380      	movs	r3, #128	@ 0x80
 8003096:	025b      	lsls	r3, r3, #9
 8003098:	4013      	ands	r3, r2
 800309a:	d116      	bne.n	80030ca <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800309c:	4b70      	ldr	r3, [pc, #448]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2202      	movs	r2, #2
 80030a2:	4013      	ands	r3, r2
 80030a4:	d005      	beq.n	80030b2 <HAL_RCC_OscConfig+0x17e>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d001      	beq.n	80030b2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e24b      	b.n	800354a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b2:	4b6b      	ldr	r3, [pc, #428]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	22f8      	movs	r2, #248	@ 0xf8
 80030b8:	4393      	bics	r3, r2
 80030ba:	0019      	movs	r1, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	00da      	lsls	r2, r3, #3
 80030c2:	4b67      	ldr	r3, [pc, #412]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 80030c4:	430a      	orrs	r2, r1
 80030c6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030c8:	e041      	b.n	800314e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d024      	beq.n	800311c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030d2:	4b63      	ldr	r3, [pc, #396]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	4b62      	ldr	r3, [pc, #392]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 80030d8:	2101      	movs	r1, #1
 80030da:	430a      	orrs	r2, r1
 80030dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030de:	f7ff f85d 	bl	800219c <HAL_GetTick>
 80030e2:	0003      	movs	r3, r0
 80030e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030e8:	f7ff f858 	bl	800219c <HAL_GetTick>
 80030ec:	0002      	movs	r2, r0
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e227      	b.n	800354a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030fa:	4b59      	ldr	r3, [pc, #356]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2202      	movs	r2, #2
 8003100:	4013      	ands	r3, r2
 8003102:	d0f1      	beq.n	80030e8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003104:	4b56      	ldr	r3, [pc, #344]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	22f8      	movs	r2, #248	@ 0xf8
 800310a:	4393      	bics	r3, r2
 800310c:	0019      	movs	r1, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	00da      	lsls	r2, r3, #3
 8003114:	4b52      	ldr	r3, [pc, #328]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 8003116:	430a      	orrs	r2, r1
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	e018      	b.n	800314e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800311c:	4b50      	ldr	r3, [pc, #320]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	4b4f      	ldr	r3, [pc, #316]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 8003122:	2101      	movs	r1, #1
 8003124:	438a      	bics	r2, r1
 8003126:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003128:	f7ff f838 	bl	800219c <HAL_GetTick>
 800312c:	0003      	movs	r3, r0
 800312e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003132:	f7ff f833 	bl	800219c <HAL_GetTick>
 8003136:	0002      	movs	r2, r0
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e202      	b.n	800354a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003144:	4b46      	ldr	r3, [pc, #280]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2202      	movs	r2, #2
 800314a:	4013      	ands	r3, r2
 800314c:	d1f1      	bne.n	8003132 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2208      	movs	r2, #8
 8003154:	4013      	ands	r3, r2
 8003156:	d036      	beq.n	80031c6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	69db      	ldr	r3, [r3, #28]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d019      	beq.n	8003194 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003160:	4b3f      	ldr	r3, [pc, #252]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 8003162:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003164:	4b3e      	ldr	r3, [pc, #248]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 8003166:	2101      	movs	r1, #1
 8003168:	430a      	orrs	r2, r1
 800316a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800316c:	f7ff f816 	bl	800219c <HAL_GetTick>
 8003170:	0003      	movs	r3, r0
 8003172:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003176:	f7ff f811 	bl	800219c <HAL_GetTick>
 800317a:	0002      	movs	r2, r0
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e1e0      	b.n	800354a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003188:	4b35      	ldr	r3, [pc, #212]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 800318a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318c:	2202      	movs	r2, #2
 800318e:	4013      	ands	r3, r2
 8003190:	d0f1      	beq.n	8003176 <HAL_RCC_OscConfig+0x242>
 8003192:	e018      	b.n	80031c6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003194:	4b32      	ldr	r3, [pc, #200]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 8003196:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003198:	4b31      	ldr	r3, [pc, #196]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 800319a:	2101      	movs	r1, #1
 800319c:	438a      	bics	r2, r1
 800319e:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031a0:	f7fe fffc 	bl	800219c <HAL_GetTick>
 80031a4:	0003      	movs	r3, r0
 80031a6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031a8:	e008      	b.n	80031bc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031aa:	f7fe fff7 	bl	800219c <HAL_GetTick>
 80031ae:	0002      	movs	r2, r0
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e1c6      	b.n	800354a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031bc:	4b28      	ldr	r3, [pc, #160]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 80031be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c0:	2202      	movs	r2, #2
 80031c2:	4013      	ands	r3, r2
 80031c4:	d1f1      	bne.n	80031aa <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2204      	movs	r2, #4
 80031cc:	4013      	ands	r3, r2
 80031ce:	d100      	bne.n	80031d2 <HAL_RCC_OscConfig+0x29e>
 80031d0:	e0b4      	b.n	800333c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031d2:	201f      	movs	r0, #31
 80031d4:	183b      	adds	r3, r7, r0
 80031d6:	2200      	movs	r2, #0
 80031d8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031da:	4b21      	ldr	r3, [pc, #132]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 80031dc:	69da      	ldr	r2, [r3, #28]
 80031de:	2380      	movs	r3, #128	@ 0x80
 80031e0:	055b      	lsls	r3, r3, #21
 80031e2:	4013      	ands	r3, r2
 80031e4:	d110      	bne.n	8003208 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 80031e8:	69da      	ldr	r2, [r3, #28]
 80031ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 80031ec:	2180      	movs	r1, #128	@ 0x80
 80031ee:	0549      	lsls	r1, r1, #21
 80031f0:	430a      	orrs	r2, r1
 80031f2:	61da      	str	r2, [r3, #28]
 80031f4:	4b1a      	ldr	r3, [pc, #104]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 80031f6:	69da      	ldr	r2, [r3, #28]
 80031f8:	2380      	movs	r3, #128	@ 0x80
 80031fa:	055b      	lsls	r3, r3, #21
 80031fc:	4013      	ands	r3, r2
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003202:	183b      	adds	r3, r7, r0
 8003204:	2201      	movs	r2, #1
 8003206:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003208:	4b18      	ldr	r3, [pc, #96]	@ (800326c <HAL_RCC_OscConfig+0x338>)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	2380      	movs	r3, #128	@ 0x80
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	4013      	ands	r3, r2
 8003212:	d11a      	bne.n	800324a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003214:	4b15      	ldr	r3, [pc, #84]	@ (800326c <HAL_RCC_OscConfig+0x338>)
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	4b14      	ldr	r3, [pc, #80]	@ (800326c <HAL_RCC_OscConfig+0x338>)
 800321a:	2180      	movs	r1, #128	@ 0x80
 800321c:	0049      	lsls	r1, r1, #1
 800321e:	430a      	orrs	r2, r1
 8003220:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003222:	f7fe ffbb 	bl	800219c <HAL_GetTick>
 8003226:	0003      	movs	r3, r0
 8003228:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800322c:	f7fe ffb6 	bl	800219c <HAL_GetTick>
 8003230:	0002      	movs	r2, r0
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b64      	cmp	r3, #100	@ 0x64
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e185      	b.n	800354a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800323e:	4b0b      	ldr	r3, [pc, #44]	@ (800326c <HAL_RCC_OscConfig+0x338>)
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	2380      	movs	r3, #128	@ 0x80
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	4013      	ands	r3, r2
 8003248:	d0f0      	beq.n	800322c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d10e      	bne.n	8003270 <HAL_RCC_OscConfig+0x33c>
 8003252:	4b03      	ldr	r3, [pc, #12]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 8003254:	6a1a      	ldr	r2, [r3, #32]
 8003256:	4b02      	ldr	r3, [pc, #8]	@ (8003260 <HAL_RCC_OscConfig+0x32c>)
 8003258:	2101      	movs	r1, #1
 800325a:	430a      	orrs	r2, r1
 800325c:	621a      	str	r2, [r3, #32]
 800325e:	e035      	b.n	80032cc <HAL_RCC_OscConfig+0x398>
 8003260:	40021000 	.word	0x40021000
 8003264:	fffeffff 	.word	0xfffeffff
 8003268:	fffbffff 	.word	0xfffbffff
 800326c:	40007000 	.word	0x40007000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10c      	bne.n	8003292 <HAL_RCC_OscConfig+0x35e>
 8003278:	4bb6      	ldr	r3, [pc, #728]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 800327a:	6a1a      	ldr	r2, [r3, #32]
 800327c:	4bb5      	ldr	r3, [pc, #724]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 800327e:	2101      	movs	r1, #1
 8003280:	438a      	bics	r2, r1
 8003282:	621a      	str	r2, [r3, #32]
 8003284:	4bb3      	ldr	r3, [pc, #716]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 8003286:	6a1a      	ldr	r2, [r3, #32]
 8003288:	4bb2      	ldr	r3, [pc, #712]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 800328a:	2104      	movs	r1, #4
 800328c:	438a      	bics	r2, r1
 800328e:	621a      	str	r2, [r3, #32]
 8003290:	e01c      	b.n	80032cc <HAL_RCC_OscConfig+0x398>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	2b05      	cmp	r3, #5
 8003298:	d10c      	bne.n	80032b4 <HAL_RCC_OscConfig+0x380>
 800329a:	4bae      	ldr	r3, [pc, #696]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 800329c:	6a1a      	ldr	r2, [r3, #32]
 800329e:	4bad      	ldr	r3, [pc, #692]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 80032a0:	2104      	movs	r1, #4
 80032a2:	430a      	orrs	r2, r1
 80032a4:	621a      	str	r2, [r3, #32]
 80032a6:	4bab      	ldr	r3, [pc, #684]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 80032a8:	6a1a      	ldr	r2, [r3, #32]
 80032aa:	4baa      	ldr	r3, [pc, #680]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 80032ac:	2101      	movs	r1, #1
 80032ae:	430a      	orrs	r2, r1
 80032b0:	621a      	str	r2, [r3, #32]
 80032b2:	e00b      	b.n	80032cc <HAL_RCC_OscConfig+0x398>
 80032b4:	4ba7      	ldr	r3, [pc, #668]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 80032b6:	6a1a      	ldr	r2, [r3, #32]
 80032b8:	4ba6      	ldr	r3, [pc, #664]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 80032ba:	2101      	movs	r1, #1
 80032bc:	438a      	bics	r2, r1
 80032be:	621a      	str	r2, [r3, #32]
 80032c0:	4ba4      	ldr	r3, [pc, #656]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 80032c2:	6a1a      	ldr	r2, [r3, #32]
 80032c4:	4ba3      	ldr	r3, [pc, #652]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 80032c6:	2104      	movs	r1, #4
 80032c8:	438a      	bics	r2, r1
 80032ca:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d014      	beq.n	80032fe <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032d4:	f7fe ff62 	bl	800219c <HAL_GetTick>
 80032d8:	0003      	movs	r3, r0
 80032da:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032dc:	e009      	b.n	80032f2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032de:	f7fe ff5d 	bl	800219c <HAL_GetTick>
 80032e2:	0002      	movs	r2, r0
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	4a9b      	ldr	r2, [pc, #620]	@ (8003558 <HAL_RCC_OscConfig+0x624>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e12b      	b.n	800354a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f2:	4b98      	ldr	r3, [pc, #608]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	2202      	movs	r2, #2
 80032f8:	4013      	ands	r3, r2
 80032fa:	d0f0      	beq.n	80032de <HAL_RCC_OscConfig+0x3aa>
 80032fc:	e013      	b.n	8003326 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032fe:	f7fe ff4d 	bl	800219c <HAL_GetTick>
 8003302:	0003      	movs	r3, r0
 8003304:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003306:	e009      	b.n	800331c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003308:	f7fe ff48 	bl	800219c <HAL_GetTick>
 800330c:	0002      	movs	r2, r0
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	4a91      	ldr	r2, [pc, #580]	@ (8003558 <HAL_RCC_OscConfig+0x624>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e116      	b.n	800354a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800331c:	4b8d      	ldr	r3, [pc, #564]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	2202      	movs	r2, #2
 8003322:	4013      	ands	r3, r2
 8003324:	d1f0      	bne.n	8003308 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003326:	231f      	movs	r3, #31
 8003328:	18fb      	adds	r3, r7, r3
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d105      	bne.n	800333c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003330:	4b88      	ldr	r3, [pc, #544]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 8003332:	69da      	ldr	r2, [r3, #28]
 8003334:	4b87      	ldr	r3, [pc, #540]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 8003336:	4989      	ldr	r1, [pc, #548]	@ (800355c <HAL_RCC_OscConfig+0x628>)
 8003338:	400a      	ands	r2, r1
 800333a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2210      	movs	r2, #16
 8003342:	4013      	ands	r3, r2
 8003344:	d063      	beq.n	800340e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d12a      	bne.n	80033a4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800334e:	4b81      	ldr	r3, [pc, #516]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 8003350:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003352:	4b80      	ldr	r3, [pc, #512]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 8003354:	2104      	movs	r1, #4
 8003356:	430a      	orrs	r2, r1
 8003358:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800335a:	4b7e      	ldr	r3, [pc, #504]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 800335c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800335e:	4b7d      	ldr	r3, [pc, #500]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 8003360:	2101      	movs	r1, #1
 8003362:	430a      	orrs	r2, r1
 8003364:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003366:	f7fe ff19 	bl	800219c <HAL_GetTick>
 800336a:	0003      	movs	r3, r0
 800336c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003370:	f7fe ff14 	bl	800219c <HAL_GetTick>
 8003374:	0002      	movs	r2, r0
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e0e3      	b.n	800354a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003382:	4b74      	ldr	r3, [pc, #464]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 8003384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003386:	2202      	movs	r2, #2
 8003388:	4013      	ands	r3, r2
 800338a:	d0f1      	beq.n	8003370 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800338c:	4b71      	ldr	r3, [pc, #452]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 800338e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003390:	22f8      	movs	r2, #248	@ 0xf8
 8003392:	4393      	bics	r3, r2
 8003394:	0019      	movs	r1, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	00da      	lsls	r2, r3, #3
 800339c:	4b6d      	ldr	r3, [pc, #436]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 800339e:	430a      	orrs	r2, r1
 80033a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80033a2:	e034      	b.n	800340e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	3305      	adds	r3, #5
 80033aa:	d111      	bne.n	80033d0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80033ac:	4b69      	ldr	r3, [pc, #420]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 80033ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033b0:	4b68      	ldr	r3, [pc, #416]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 80033b2:	2104      	movs	r1, #4
 80033b4:	438a      	bics	r2, r1
 80033b6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80033b8:	4b66      	ldr	r3, [pc, #408]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 80033ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033bc:	22f8      	movs	r2, #248	@ 0xf8
 80033be:	4393      	bics	r3, r2
 80033c0:	0019      	movs	r1, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	00da      	lsls	r2, r3, #3
 80033c8:	4b62      	ldr	r3, [pc, #392]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 80033ca:	430a      	orrs	r2, r1
 80033cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80033ce:	e01e      	b.n	800340e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80033d0:	4b60      	ldr	r3, [pc, #384]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 80033d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033d4:	4b5f      	ldr	r3, [pc, #380]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 80033d6:	2104      	movs	r1, #4
 80033d8:	430a      	orrs	r2, r1
 80033da:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80033dc:	4b5d      	ldr	r3, [pc, #372]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 80033de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033e0:	4b5c      	ldr	r3, [pc, #368]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 80033e2:	2101      	movs	r1, #1
 80033e4:	438a      	bics	r2, r1
 80033e6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e8:	f7fe fed8 	bl	800219c <HAL_GetTick>
 80033ec:	0003      	movs	r3, r0
 80033ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80033f0:	e008      	b.n	8003404 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80033f2:	f7fe fed3 	bl	800219c <HAL_GetTick>
 80033f6:	0002      	movs	r2, r0
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e0a2      	b.n	800354a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003404:	4b53      	ldr	r3, [pc, #332]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 8003406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003408:	2202      	movs	r2, #2
 800340a:	4013      	ands	r3, r2
 800340c:	d1f1      	bne.n	80033f2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d100      	bne.n	8003418 <HAL_RCC_OscConfig+0x4e4>
 8003416:	e097      	b.n	8003548 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003418:	4b4e      	ldr	r3, [pc, #312]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	220c      	movs	r2, #12
 800341e:	4013      	ands	r3, r2
 8003420:	2b08      	cmp	r3, #8
 8003422:	d100      	bne.n	8003426 <HAL_RCC_OscConfig+0x4f2>
 8003424:	e06b      	b.n	80034fe <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	2b02      	cmp	r3, #2
 800342c:	d14c      	bne.n	80034c8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800342e:	4b49      	ldr	r3, [pc, #292]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	4b48      	ldr	r3, [pc, #288]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 8003434:	494a      	ldr	r1, [pc, #296]	@ (8003560 <HAL_RCC_OscConfig+0x62c>)
 8003436:	400a      	ands	r2, r1
 8003438:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343a:	f7fe feaf 	bl	800219c <HAL_GetTick>
 800343e:	0003      	movs	r3, r0
 8003440:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003444:	f7fe feaa 	bl	800219c <HAL_GetTick>
 8003448:	0002      	movs	r2, r0
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e079      	b.n	800354a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003456:	4b3f      	ldr	r3, [pc, #252]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	2380      	movs	r3, #128	@ 0x80
 800345c:	049b      	lsls	r3, r3, #18
 800345e:	4013      	ands	r3, r2
 8003460:	d1f0      	bne.n	8003444 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003462:	4b3c      	ldr	r3, [pc, #240]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 8003464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003466:	220f      	movs	r2, #15
 8003468:	4393      	bics	r3, r2
 800346a:	0019      	movs	r1, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003470:	4b38      	ldr	r3, [pc, #224]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 8003472:	430a      	orrs	r2, r1
 8003474:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003476:	4b37      	ldr	r3, [pc, #220]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	4a3a      	ldr	r2, [pc, #232]	@ (8003564 <HAL_RCC_OscConfig+0x630>)
 800347c:	4013      	ands	r3, r2
 800347e:	0019      	movs	r1, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003488:	431a      	orrs	r2, r3
 800348a:	4b32      	ldr	r3, [pc, #200]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 800348c:	430a      	orrs	r2, r1
 800348e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003490:	4b30      	ldr	r3, [pc, #192]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	4b2f      	ldr	r3, [pc, #188]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 8003496:	2180      	movs	r1, #128	@ 0x80
 8003498:	0449      	lsls	r1, r1, #17
 800349a:	430a      	orrs	r2, r1
 800349c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349e:	f7fe fe7d 	bl	800219c <HAL_GetTick>
 80034a2:	0003      	movs	r3, r0
 80034a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034a8:	f7fe fe78 	bl	800219c <HAL_GetTick>
 80034ac:	0002      	movs	r2, r0
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e047      	b.n	800354a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034ba:	4b26      	ldr	r3, [pc, #152]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	2380      	movs	r3, #128	@ 0x80
 80034c0:	049b      	lsls	r3, r3, #18
 80034c2:	4013      	ands	r3, r2
 80034c4:	d0f0      	beq.n	80034a8 <HAL_RCC_OscConfig+0x574>
 80034c6:	e03f      	b.n	8003548 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c8:	4b22      	ldr	r3, [pc, #136]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	4b21      	ldr	r3, [pc, #132]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 80034ce:	4924      	ldr	r1, [pc, #144]	@ (8003560 <HAL_RCC_OscConfig+0x62c>)
 80034d0:	400a      	ands	r2, r1
 80034d2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d4:	f7fe fe62 	bl	800219c <HAL_GetTick>
 80034d8:	0003      	movs	r3, r0
 80034da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034dc:	e008      	b.n	80034f0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034de:	f7fe fe5d 	bl	800219c <HAL_GetTick>
 80034e2:	0002      	movs	r2, r0
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e02c      	b.n	800354a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034f0:	4b18      	ldr	r3, [pc, #96]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	2380      	movs	r3, #128	@ 0x80
 80034f6:	049b      	lsls	r3, r3, #18
 80034f8:	4013      	ands	r3, r2
 80034fa:	d1f0      	bne.n	80034de <HAL_RCC_OscConfig+0x5aa>
 80034fc:	e024      	b.n	8003548 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d101      	bne.n	800350a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e01f      	b.n	800354a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800350a:	4b12      	ldr	r3, [pc, #72]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003510:	4b10      	ldr	r3, [pc, #64]	@ (8003554 <HAL_RCC_OscConfig+0x620>)
 8003512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003514:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	2380      	movs	r3, #128	@ 0x80
 800351a:	025b      	lsls	r3, r3, #9
 800351c:	401a      	ands	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003522:	429a      	cmp	r2, r3
 8003524:	d10e      	bne.n	8003544 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	220f      	movs	r2, #15
 800352a:	401a      	ands	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003530:	429a      	cmp	r2, r3
 8003532:	d107      	bne.n	8003544 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	23f0      	movs	r3, #240	@ 0xf0
 8003538:	039b      	lsls	r3, r3, #14
 800353a:	401a      	ands	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003540:	429a      	cmp	r2, r3
 8003542:	d001      	beq.n	8003548 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e000      	b.n	800354a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	0018      	movs	r0, r3
 800354c:	46bd      	mov	sp, r7
 800354e:	b008      	add	sp, #32
 8003550:	bd80      	pop	{r7, pc}
 8003552:	46c0      	nop			@ (mov r8, r8)
 8003554:	40021000 	.word	0x40021000
 8003558:	00001388 	.word	0x00001388
 800355c:	efffffff 	.word	0xefffffff
 8003560:	feffffff 	.word	0xfeffffff
 8003564:	ffc2ffff 	.word	0xffc2ffff

08003568 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e0b3      	b.n	80036e4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800357c:	4b5b      	ldr	r3, [pc, #364]	@ (80036ec <HAL_RCC_ClockConfig+0x184>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2201      	movs	r2, #1
 8003582:	4013      	ands	r3, r2
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	429a      	cmp	r2, r3
 8003588:	d911      	bls.n	80035ae <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800358a:	4b58      	ldr	r3, [pc, #352]	@ (80036ec <HAL_RCC_ClockConfig+0x184>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2201      	movs	r2, #1
 8003590:	4393      	bics	r3, r2
 8003592:	0019      	movs	r1, r3
 8003594:	4b55      	ldr	r3, [pc, #340]	@ (80036ec <HAL_RCC_ClockConfig+0x184>)
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800359c:	4b53      	ldr	r3, [pc, #332]	@ (80036ec <HAL_RCC_ClockConfig+0x184>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2201      	movs	r2, #1
 80035a2:	4013      	ands	r3, r2
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d001      	beq.n	80035ae <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e09a      	b.n	80036e4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2202      	movs	r2, #2
 80035b4:	4013      	ands	r3, r2
 80035b6:	d015      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2204      	movs	r2, #4
 80035be:	4013      	ands	r3, r2
 80035c0:	d006      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80035c2:	4b4b      	ldr	r3, [pc, #300]	@ (80036f0 <HAL_RCC_ClockConfig+0x188>)
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	4b4a      	ldr	r3, [pc, #296]	@ (80036f0 <HAL_RCC_ClockConfig+0x188>)
 80035c8:	21e0      	movs	r1, #224	@ 0xe0
 80035ca:	00c9      	lsls	r1, r1, #3
 80035cc:	430a      	orrs	r2, r1
 80035ce:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035d0:	4b47      	ldr	r3, [pc, #284]	@ (80036f0 <HAL_RCC_ClockConfig+0x188>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	22f0      	movs	r2, #240	@ 0xf0
 80035d6:	4393      	bics	r3, r2
 80035d8:	0019      	movs	r1, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	4b44      	ldr	r3, [pc, #272]	@ (80036f0 <HAL_RCC_ClockConfig+0x188>)
 80035e0:	430a      	orrs	r2, r1
 80035e2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2201      	movs	r2, #1
 80035ea:	4013      	ands	r3, r2
 80035ec:	d040      	beq.n	8003670 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d107      	bne.n	8003606 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035f6:	4b3e      	ldr	r3, [pc, #248]	@ (80036f0 <HAL_RCC_ClockConfig+0x188>)
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	2380      	movs	r3, #128	@ 0x80
 80035fc:	029b      	lsls	r3, r3, #10
 80035fe:	4013      	ands	r3, r2
 8003600:	d114      	bne.n	800362c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e06e      	b.n	80036e4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b02      	cmp	r3, #2
 800360c:	d107      	bne.n	800361e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800360e:	4b38      	ldr	r3, [pc, #224]	@ (80036f0 <HAL_RCC_ClockConfig+0x188>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	2380      	movs	r3, #128	@ 0x80
 8003614:	049b      	lsls	r3, r3, #18
 8003616:	4013      	ands	r3, r2
 8003618:	d108      	bne.n	800362c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e062      	b.n	80036e4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800361e:	4b34      	ldr	r3, [pc, #208]	@ (80036f0 <HAL_RCC_ClockConfig+0x188>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2202      	movs	r2, #2
 8003624:	4013      	ands	r3, r2
 8003626:	d101      	bne.n	800362c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e05b      	b.n	80036e4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800362c:	4b30      	ldr	r3, [pc, #192]	@ (80036f0 <HAL_RCC_ClockConfig+0x188>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2203      	movs	r2, #3
 8003632:	4393      	bics	r3, r2
 8003634:	0019      	movs	r1, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	4b2d      	ldr	r3, [pc, #180]	@ (80036f0 <HAL_RCC_ClockConfig+0x188>)
 800363c:	430a      	orrs	r2, r1
 800363e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003640:	f7fe fdac 	bl	800219c <HAL_GetTick>
 8003644:	0003      	movs	r3, r0
 8003646:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003648:	e009      	b.n	800365e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800364a:	f7fe fda7 	bl	800219c <HAL_GetTick>
 800364e:	0002      	movs	r2, r0
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	4a27      	ldr	r2, [pc, #156]	@ (80036f4 <HAL_RCC_ClockConfig+0x18c>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d901      	bls.n	800365e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e042      	b.n	80036e4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800365e:	4b24      	ldr	r3, [pc, #144]	@ (80036f0 <HAL_RCC_ClockConfig+0x188>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	220c      	movs	r2, #12
 8003664:	401a      	ands	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	429a      	cmp	r2, r3
 800366e:	d1ec      	bne.n	800364a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003670:	4b1e      	ldr	r3, [pc, #120]	@ (80036ec <HAL_RCC_ClockConfig+0x184>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2201      	movs	r2, #1
 8003676:	4013      	ands	r3, r2
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	429a      	cmp	r2, r3
 800367c:	d211      	bcs.n	80036a2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800367e:	4b1b      	ldr	r3, [pc, #108]	@ (80036ec <HAL_RCC_ClockConfig+0x184>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2201      	movs	r2, #1
 8003684:	4393      	bics	r3, r2
 8003686:	0019      	movs	r1, r3
 8003688:	4b18      	ldr	r3, [pc, #96]	@ (80036ec <HAL_RCC_ClockConfig+0x184>)
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	430a      	orrs	r2, r1
 800368e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003690:	4b16      	ldr	r3, [pc, #88]	@ (80036ec <HAL_RCC_ClockConfig+0x184>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2201      	movs	r2, #1
 8003696:	4013      	ands	r3, r2
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	429a      	cmp	r2, r3
 800369c:	d001      	beq.n	80036a2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e020      	b.n	80036e4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2204      	movs	r2, #4
 80036a8:	4013      	ands	r3, r2
 80036aa:	d009      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80036ac:	4b10      	ldr	r3, [pc, #64]	@ (80036f0 <HAL_RCC_ClockConfig+0x188>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	4a11      	ldr	r2, [pc, #68]	@ (80036f8 <HAL_RCC_ClockConfig+0x190>)
 80036b2:	4013      	ands	r3, r2
 80036b4:	0019      	movs	r1, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	4b0d      	ldr	r3, [pc, #52]	@ (80036f0 <HAL_RCC_ClockConfig+0x188>)
 80036bc:	430a      	orrs	r2, r1
 80036be:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80036c0:	f000 f820 	bl	8003704 <HAL_RCC_GetSysClockFreq>
 80036c4:	0001      	movs	r1, r0
 80036c6:	4b0a      	ldr	r3, [pc, #40]	@ (80036f0 <HAL_RCC_ClockConfig+0x188>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	091b      	lsrs	r3, r3, #4
 80036cc:	220f      	movs	r2, #15
 80036ce:	4013      	ands	r3, r2
 80036d0:	4a0a      	ldr	r2, [pc, #40]	@ (80036fc <HAL_RCC_ClockConfig+0x194>)
 80036d2:	5cd3      	ldrb	r3, [r2, r3]
 80036d4:	000a      	movs	r2, r1
 80036d6:	40da      	lsrs	r2, r3
 80036d8:	4b09      	ldr	r3, [pc, #36]	@ (8003700 <HAL_RCC_ClockConfig+0x198>)
 80036da:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80036dc:	2003      	movs	r0, #3
 80036de:	f7fe fd17 	bl	8002110 <HAL_InitTick>
  
  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	0018      	movs	r0, r3
 80036e6:	46bd      	mov	sp, r7
 80036e8:	b004      	add	sp, #16
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	40022000 	.word	0x40022000
 80036f0:	40021000 	.word	0x40021000
 80036f4:	00001388 	.word	0x00001388
 80036f8:	fffff8ff 	.word	0xfffff8ff
 80036fc:	080050a4 	.word	0x080050a4
 8003700:	20000004 	.word	0x20000004

08003704 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	60fb      	str	r3, [r7, #12]
 800370e:	2300      	movs	r3, #0
 8003710:	60bb      	str	r3, [r7, #8]
 8003712:	2300      	movs	r3, #0
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	2300      	movs	r3, #0
 8003718:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800371a:	2300      	movs	r3, #0
 800371c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800371e:	4b20      	ldr	r3, [pc, #128]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	220c      	movs	r2, #12
 8003728:	4013      	ands	r3, r2
 800372a:	2b04      	cmp	r3, #4
 800372c:	d002      	beq.n	8003734 <HAL_RCC_GetSysClockFreq+0x30>
 800372e:	2b08      	cmp	r3, #8
 8003730:	d003      	beq.n	800373a <HAL_RCC_GetSysClockFreq+0x36>
 8003732:	e02c      	b.n	800378e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003734:	4b1b      	ldr	r3, [pc, #108]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003736:	613b      	str	r3, [r7, #16]
      break;
 8003738:	e02c      	b.n	8003794 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	0c9b      	lsrs	r3, r3, #18
 800373e:	220f      	movs	r2, #15
 8003740:	4013      	ands	r3, r2
 8003742:	4a19      	ldr	r2, [pc, #100]	@ (80037a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003744:	5cd3      	ldrb	r3, [r2, r3]
 8003746:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003748:	4b15      	ldr	r3, [pc, #84]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800374a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800374c:	220f      	movs	r2, #15
 800374e:	4013      	ands	r3, r2
 8003750:	4a16      	ldr	r2, [pc, #88]	@ (80037ac <HAL_RCC_GetSysClockFreq+0xa8>)
 8003752:	5cd3      	ldrb	r3, [r2, r3]
 8003754:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	2380      	movs	r3, #128	@ 0x80
 800375a:	025b      	lsls	r3, r3, #9
 800375c:	4013      	ands	r3, r2
 800375e:	d009      	beq.n	8003774 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003760:	68b9      	ldr	r1, [r7, #8]
 8003762:	4810      	ldr	r0, [pc, #64]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003764:	f7fc fcd8 	bl	8000118 <__udivsi3>
 8003768:	0003      	movs	r3, r0
 800376a:	001a      	movs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4353      	muls	r3, r2
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	e009      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003774:	6879      	ldr	r1, [r7, #4]
 8003776:	000a      	movs	r2, r1
 8003778:	0152      	lsls	r2, r2, #5
 800377a:	1a52      	subs	r2, r2, r1
 800377c:	0193      	lsls	r3, r2, #6
 800377e:	1a9b      	subs	r3, r3, r2
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	185b      	adds	r3, r3, r1
 8003784:	021b      	lsls	r3, r3, #8
 8003786:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	613b      	str	r3, [r7, #16]
      break;
 800378c:	e002      	b.n	8003794 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800378e:	4b05      	ldr	r3, [pc, #20]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003790:	613b      	str	r3, [r7, #16]
      break;
 8003792:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003794:	693b      	ldr	r3, [r7, #16]
}
 8003796:	0018      	movs	r0, r3
 8003798:	46bd      	mov	sp, r7
 800379a:	b006      	add	sp, #24
 800379c:	bd80      	pop	{r7, pc}
 800379e:	46c0      	nop			@ (mov r8, r8)
 80037a0:	40021000 	.word	0x40021000
 80037a4:	007a1200 	.word	0x007a1200
 80037a8:	080050b4 	.word	0x080050b4
 80037ac:	080050c4 	.word	0x080050c4

080037b0 <LL_EXTI_EnableIT_0_31>:
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80037b8:	4b04      	ldr	r3, [pc, #16]	@ (80037cc <LL_EXTI_EnableIT_0_31+0x1c>)
 80037ba:	6819      	ldr	r1, [r3, #0]
 80037bc:	4b03      	ldr	r3, [pc, #12]	@ (80037cc <LL_EXTI_EnableIT_0_31+0x1c>)
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	601a      	str	r2, [r3, #0]
}
 80037c4:	46c0      	nop			@ (mov r8, r8)
 80037c6:	46bd      	mov	sp, r7
 80037c8:	b002      	add	sp, #8
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40010400 	.word	0x40010400

080037d0 <LL_EXTI_DisableIT_0_31>:
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80037d8:	4b05      	ldr	r3, [pc, #20]	@ (80037f0 <LL_EXTI_DisableIT_0_31+0x20>)
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	43d9      	mvns	r1, r3
 80037e0:	4b03      	ldr	r3, [pc, #12]	@ (80037f0 <LL_EXTI_DisableIT_0_31+0x20>)
 80037e2:	400a      	ands	r2, r1
 80037e4:	601a      	str	r2, [r3, #0]
}
 80037e6:	46c0      	nop			@ (mov r8, r8)
 80037e8:	46bd      	mov	sp, r7
 80037ea:	b002      	add	sp, #8
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	46c0      	nop			@ (mov r8, r8)
 80037f0:	40010400 	.word	0x40010400

080037f4 <LL_EXTI_EnableEvent_0_31>:
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80037fc:	4b04      	ldr	r3, [pc, #16]	@ (8003810 <LL_EXTI_EnableEvent_0_31+0x1c>)
 80037fe:	6859      	ldr	r1, [r3, #4]
 8003800:	4b03      	ldr	r3, [pc, #12]	@ (8003810 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	430a      	orrs	r2, r1
 8003806:	605a      	str	r2, [r3, #4]
}
 8003808:	46c0      	nop			@ (mov r8, r8)
 800380a:	46bd      	mov	sp, r7
 800380c:	b002      	add	sp, #8
 800380e:	bd80      	pop	{r7, pc}
 8003810:	40010400 	.word	0x40010400

08003814 <LL_EXTI_DisableEvent_0_31>:
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800381c:	4b05      	ldr	r3, [pc, #20]	@ (8003834 <LL_EXTI_DisableEvent_0_31+0x20>)
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	43d9      	mvns	r1, r3
 8003824:	4b03      	ldr	r3, [pc, #12]	@ (8003834 <LL_EXTI_DisableEvent_0_31+0x20>)
 8003826:	400a      	ands	r2, r1
 8003828:	605a      	str	r2, [r3, #4]
}
 800382a:	46c0      	nop			@ (mov r8, r8)
 800382c:	46bd      	mov	sp, r7
 800382e:	b002      	add	sp, #8
 8003830:	bd80      	pop	{r7, pc}
 8003832:	46c0      	nop			@ (mov r8, r8)
 8003834:	40010400 	.word	0x40010400

08003838 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8003840:	4b04      	ldr	r3, [pc, #16]	@ (8003854 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8003842:	6899      	ldr	r1, [r3, #8]
 8003844:	4b03      	ldr	r3, [pc, #12]	@ (8003854 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	430a      	orrs	r2, r1
 800384a:	609a      	str	r2, [r3, #8]
}
 800384c:	46c0      	nop			@ (mov r8, r8)
 800384e:	46bd      	mov	sp, r7
 8003850:	b002      	add	sp, #8
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40010400 	.word	0x40010400

08003858 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8003860:	4b05      	ldr	r3, [pc, #20]	@ (8003878 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	43d9      	mvns	r1, r3
 8003868:	4b03      	ldr	r3, [pc, #12]	@ (8003878 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800386a:	400a      	ands	r2, r1
 800386c:	609a      	str	r2, [r3, #8]
}
 800386e:	46c0      	nop			@ (mov r8, r8)
 8003870:	46bd      	mov	sp, r7
 8003872:	b002      	add	sp, #8
 8003874:	bd80      	pop	{r7, pc}
 8003876:	46c0      	nop			@ (mov r8, r8)
 8003878:	40010400 	.word	0x40010400

0800387c <LL_EXTI_EnableFallingTrig_0_31>:
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8003884:	4b04      	ldr	r3, [pc, #16]	@ (8003898 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8003886:	68d9      	ldr	r1, [r3, #12]
 8003888:	4b03      	ldr	r3, [pc, #12]	@ (8003898 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	430a      	orrs	r2, r1
 800388e:	60da      	str	r2, [r3, #12]
}
 8003890:	46c0      	nop			@ (mov r8, r8)
 8003892:	46bd      	mov	sp, r7
 8003894:	b002      	add	sp, #8
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40010400 	.word	0x40010400

0800389c <LL_EXTI_DisableFallingTrig_0_31>:
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80038a4:	4b05      	ldr	r3, [pc, #20]	@ (80038bc <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80038a6:	68da      	ldr	r2, [r3, #12]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	43d9      	mvns	r1, r3
 80038ac:	4b03      	ldr	r3, [pc, #12]	@ (80038bc <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80038ae:	400a      	ands	r2, r1
 80038b0:	60da      	str	r2, [r3, #12]
}
 80038b2:	46c0      	nop			@ (mov r8, r8)
 80038b4:	46bd      	mov	sp, r7
 80038b6:	b002      	add	sp, #8
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	46c0      	nop			@ (mov r8, r8)
 80038bc:	40010400 	.word	0x40010400

080038c0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80038c8:	230f      	movs	r3, #15
 80038ca:	18fb      	adds	r3, r7, r3
 80038cc:	2200      	movs	r2, #0
 80038ce:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	791b      	ldrb	r3, [r3, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d100      	bne.n	80038da <LL_EXTI_Init+0x1a>
 80038d8:	e068      	b.n	80039ac <LL_EXTI_Init+0xec>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d100      	bne.n	80038e4 <LL_EXTI_Init+0x24>
 80038e2:	e06d      	b.n	80039c0 <LL_EXTI_Init+0x100>
    {
      switch (EXTI_InitStruct->Mode)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	795b      	ldrb	r3, [r3, #5]
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d01b      	beq.n	8003924 <LL_EXTI_Init+0x64>
 80038ec:	dc25      	bgt.n	800393a <LL_EXTI_Init+0x7a>
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d002      	beq.n	80038f8 <LL_EXTI_Init+0x38>
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d00b      	beq.n	800390e <LL_EXTI_Init+0x4e>
 80038f6:	e020      	b.n	800393a <LL_EXTI_Init+0x7a>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	0018      	movs	r0, r3
 80038fe:	f7ff ff89 	bl	8003814 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	0018      	movs	r0, r3
 8003908:	f7ff ff52 	bl	80037b0 <LL_EXTI_EnableIT_0_31>
          break;
 800390c:	e01a      	b.n	8003944 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	0018      	movs	r0, r3
 8003914:	f7ff ff5c 	bl	80037d0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	0018      	movs	r0, r3
 800391e:	f7ff ff69 	bl	80037f4 <LL_EXTI_EnableEvent_0_31>
          break;
 8003922:	e00f      	b.n	8003944 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	0018      	movs	r0, r3
 800392a:	f7ff ff41 	bl	80037b0 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	0018      	movs	r0, r3
 8003934:	f7ff ff5e 	bl	80037f4 <LL_EXTI_EnableEvent_0_31>
          break;
 8003938:	e004      	b.n	8003944 <LL_EXTI_Init+0x84>
        default:
          status = ERROR;
 800393a:	230f      	movs	r3, #15
 800393c:	18fb      	adds	r3, r7, r3
 800393e:	2201      	movs	r2, #1
 8003940:	701a      	strb	r2, [r3, #0]
          break;
 8003942:	46c0      	nop			@ (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	799b      	ldrb	r3, [r3, #6]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d039      	beq.n	80039c0 <LL_EXTI_Init+0x100>
      {
        switch (EXTI_InitStruct->Trigger)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	799b      	ldrb	r3, [r3, #6]
 8003950:	2b03      	cmp	r3, #3
 8003952:	d01b      	beq.n	800398c <LL_EXTI_Init+0xcc>
 8003954:	dc25      	bgt.n	80039a2 <LL_EXTI_Init+0xe2>
 8003956:	2b01      	cmp	r3, #1
 8003958:	d002      	beq.n	8003960 <LL_EXTI_Init+0xa0>
 800395a:	2b02      	cmp	r3, #2
 800395c:	d00b      	beq.n	8003976 <LL_EXTI_Init+0xb6>
 800395e:	e020      	b.n	80039a2 <LL_EXTI_Init+0xe2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	0018      	movs	r0, r3
 8003966:	f7ff ff99 	bl	800389c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	0018      	movs	r0, r3
 8003970:	f7ff ff62 	bl	8003838 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8003974:	e024      	b.n	80039c0 <LL_EXTI_Init+0x100>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	0018      	movs	r0, r3
 800397c:	f7ff ff6c 	bl	8003858 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	0018      	movs	r0, r3
 8003986:	f7ff ff79 	bl	800387c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800398a:	e019      	b.n	80039c0 <LL_EXTI_Init+0x100>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	0018      	movs	r0, r3
 8003992:	f7ff ff51 	bl	8003838 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	0018      	movs	r0, r3
 800399c:	f7ff ff6e 	bl	800387c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80039a0:	e00e      	b.n	80039c0 <LL_EXTI_Init+0x100>
          default:
            status = ERROR;
 80039a2:	230f      	movs	r3, #15
 80039a4:	18fb      	adds	r3, r7, r3
 80039a6:	2201      	movs	r2, #1
 80039a8:	701a      	strb	r2, [r3, #0]
            break;
 80039aa:	e009      	b.n	80039c0 <LL_EXTI_Init+0x100>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	0018      	movs	r0, r3
 80039b2:	f7ff ff0d 	bl	80037d0 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	0018      	movs	r0, r3
 80039bc:	f7ff ff2a 	bl	8003814 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 80039c0:	230f      	movs	r3, #15
 80039c2:	18fb      	adds	r3, r7, r3
 80039c4:	781b      	ldrb	r3, [r3, #0]
}
 80039c6:	0018      	movs	r0, r3
 80039c8:	46bd      	mov	sp, r7
 80039ca:	b004      	add	sp, #16
 80039cc:	bd80      	pop	{r7, pc}

080039ce <LL_GPIO_SetPinMode>:
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b084      	sub	sp, #16
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	60f8      	str	r0, [r7, #12]
 80039d6:	60b9      	str	r1, [r7, #8]
 80039d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6819      	ldr	r1, [r3, #0]
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	435b      	muls	r3, r3
 80039e2:	001a      	movs	r2, r3
 80039e4:	0013      	movs	r3, r2
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	189b      	adds	r3, r3, r2
 80039ea:	43db      	mvns	r3, r3
 80039ec:	400b      	ands	r3, r1
 80039ee:	001a      	movs	r2, r3
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	435b      	muls	r3, r3
 80039f4:	6879      	ldr	r1, [r7, #4]
 80039f6:	434b      	muls	r3, r1
 80039f8:	431a      	orrs	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	601a      	str	r2, [r3, #0]
}
 80039fe:	46c0      	nop			@ (mov r8, r8)
 8003a00:	46bd      	mov	sp, r7
 8003a02:	b004      	add	sp, #16
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <LL_GPIO_SetPinOutputType>:
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	43d2      	mvns	r2, r2
 8003a1a:	401a      	ands	r2, r3
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	434b      	muls	r3, r1
 8003a22:	431a      	orrs	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	605a      	str	r2, [r3, #4]
}
 8003a28:	46c0      	nop			@ (mov r8, r8)
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b004      	add	sp, #16
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <LL_GPIO_SetPinSpeed>:
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6899      	ldr	r1, [r3, #8]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	435b      	muls	r3, r3
 8003a44:	001a      	movs	r2, r3
 8003a46:	0013      	movs	r3, r2
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	189b      	adds	r3, r3, r2
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	400b      	ands	r3, r1
 8003a50:	001a      	movs	r2, r3
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	435b      	muls	r3, r3
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	434b      	muls	r3, r1
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	609a      	str	r2, [r3, #8]
}
 8003a60:	46c0      	nop			@ (mov r8, r8)
 8003a62:	46bd      	mov	sp, r7
 8003a64:	b004      	add	sp, #16
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <LL_GPIO_SetPinPull>:
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	68d9      	ldr	r1, [r3, #12]
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	435b      	muls	r3, r3
 8003a7c:	001a      	movs	r2, r3
 8003a7e:	0013      	movs	r3, r2
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	189b      	adds	r3, r3, r2
 8003a84:	43db      	mvns	r3, r3
 8003a86:	400b      	ands	r3, r1
 8003a88:	001a      	movs	r2, r3
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	435b      	muls	r3, r3
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	434b      	muls	r3, r1
 8003a92:	431a      	orrs	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	60da      	str	r2, [r3, #12]
}
 8003a98:	46c0      	nop			@ (mov r8, r8)
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	b004      	add	sp, #16
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <LL_GPIO_SetAFPin_0_7>:
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6a19      	ldr	r1, [r3, #32]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	435b      	muls	r3, r3
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	4353      	muls	r3, r2
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	435a      	muls	r2, r3
 8003abc:	0013      	movs	r3, r2
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	1a9b      	subs	r3, r3, r2
 8003ac2:	43db      	mvns	r3, r3
 8003ac4:	400b      	ands	r3, r1
 8003ac6:	001a      	movs	r2, r3
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	435b      	muls	r3, r3
 8003acc:	68b9      	ldr	r1, [r7, #8]
 8003ace:	434b      	muls	r3, r1
 8003ad0:	68b9      	ldr	r1, [r7, #8]
 8003ad2:	434b      	muls	r3, r1
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	434b      	muls	r3, r1
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	621a      	str	r2, [r3, #32]
}
 8003ade:	46c0      	nop			@ (mov r8, r8)
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	b004      	add	sp, #16
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <LL_GPIO_SetAFPin_8_15>:
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b084      	sub	sp, #16
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	60f8      	str	r0, [r7, #12]
 8003aee:	60b9      	str	r1, [r7, #8]
 8003af0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	0a1b      	lsrs	r3, r3, #8
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	0a12      	lsrs	r2, r2, #8
 8003afe:	4353      	muls	r3, r2
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	0a12      	lsrs	r2, r2, #8
 8003b04:	4353      	muls	r3, r2
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	0a12      	lsrs	r2, r2, #8
 8003b0a:	435a      	muls	r2, r3
 8003b0c:	0013      	movs	r3, r2
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	1a9b      	subs	r3, r3, r2
 8003b12:	43db      	mvns	r3, r3
 8003b14:	400b      	ands	r3, r1
 8003b16:	001a      	movs	r2, r3
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	0a1b      	lsrs	r3, r3, #8
 8003b1c:	68b9      	ldr	r1, [r7, #8]
 8003b1e:	0a09      	lsrs	r1, r1, #8
 8003b20:	434b      	muls	r3, r1
 8003b22:	68b9      	ldr	r1, [r7, #8]
 8003b24:	0a09      	lsrs	r1, r1, #8
 8003b26:	434b      	muls	r3, r1
 8003b28:	68b9      	ldr	r1, [r7, #8]
 8003b2a:	0a09      	lsrs	r1, r1, #8
 8003b2c:	434b      	muls	r3, r1
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	434b      	muls	r3, r1
 8003b32:	431a      	orrs	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003b38:	46c0      	nop			@ (mov r8, r8)
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	b004      	add	sp, #16
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003b4e:	e048      	b.n	8003be2 <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2101      	movs	r1, #1
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	4091      	lsls	r1, r2
 8003b5a:	000a      	movs	r2, r1
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d03a      	beq.n	8003bdc <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d003      	beq.n	8003b76 <LL_GPIO_Init+0x36>
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d10e      	bne.n	8003b94 <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	689a      	ldr	r2, [r3, #8]
 8003b7a:	68b9      	ldr	r1, [r7, #8]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	0018      	movs	r0, r3
 8003b80:	f7ff ff56 	bl	8003a30 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	6819      	ldr	r1, [r3, #0]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	68da      	ldr	r2, [r3, #12]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	0018      	movs	r0, r3
 8003b90:	f7ff ff39 	bl	8003a06 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	691a      	ldr	r2, [r3, #16]
 8003b98:	68b9      	ldr	r1, [r7, #8]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	0018      	movs	r0, r3
 8003b9e:	f7ff ff63 	bl	8003a68 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d111      	bne.n	8003bce <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2bff      	cmp	r3, #255	@ 0xff
 8003bae:	d807      	bhi.n	8003bc0 <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	695a      	ldr	r2, [r3, #20]
 8003bb4:	68b9      	ldr	r1, [r7, #8]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	0018      	movs	r0, r3
 8003bba:	f7ff ff71 	bl	8003aa0 <LL_GPIO_SetAFPin_0_7>
 8003bbe:	e006      	b.n	8003bce <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	695a      	ldr	r2, [r3, #20]
 8003bc4:	68b9      	ldr	r1, [r7, #8]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	0018      	movs	r0, r3
 8003bca:	f7ff ff8c 	bl	8003ae6 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	68b9      	ldr	r1, [r7, #8]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	f7ff fef9 	bl	80039ce <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	3301      	adds	r3, #1
 8003be0:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	40da      	lsrs	r2, r3
 8003bea:	1e13      	subs	r3, r2, #0
 8003bec:	d1b0      	bne.n	8003b50 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	b004      	add	sp, #16
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <LL_SPI_IsEnabled>:
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2240      	movs	r2, #64	@ 0x40
 8003c06:	4013      	ands	r3, r2
 8003c08:	2b40      	cmp	r3, #64	@ 0x40
 8003c0a:	d101      	bne.n	8003c10 <LL_SPI_IsEnabled+0x18>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e000      	b.n	8003c12 <LL_SPI_IsEnabled+0x1a>
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	0018      	movs	r0, r3
 8003c14:	46bd      	mov	sp, r7
 8003c16:	b002      	add	sp, #8
 8003c18:	bd80      	pop	{r7, pc}
	...

08003c1c <LL_SPI_SetRxFIFOThreshold>:
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	4a05      	ldr	r2, [pc, #20]	@ (8003c40 <LL_SPI_SetRxFIFOThreshold+0x24>)
 8003c2c:	401a      	ands	r2, r3
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	431a      	orrs	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	605a      	str	r2, [r3, #4]
}
 8003c36:	46c0      	nop			@ (mov r8, r8)
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	b002      	add	sp, #8
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	46c0      	nop			@ (mov r8, r8)
 8003c40:	ffffefff 	.word	0xffffefff

08003c44 <LL_SPI_SetCRCPolynomial>:
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	001a      	movs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	611a      	str	r2, [r3, #16]
}
 8003c58:	46c0      	nop			@ (mov r8, r8)
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	b002      	add	sp, #8
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003c6a:	230f      	movs	r3, #15
 8003c6c:	18fb      	adds	r3, r7, r3
 8003c6e:	2201      	movs	r2, #1
 8003c70:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	0018      	movs	r0, r3
 8003c76:	f7ff ffbf 	bl	8003bf8 <LL_SPI_IsEnabled>
 8003c7a:	1e03      	subs	r3, r0, #0
 8003c7c:	d148      	bne.n	8003d10 <LL_SPI_Init+0xb0>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a27      	ldr	r2, [pc, #156]	@ (8003d20 <LL_SPI_Init+0xc0>)
 8003c84:	401a      	ands	r2, r3
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	6819      	ldr	r1, [r3, #0]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	4319      	orrs	r1, r3
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	4319      	orrs	r1, r3
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	4319      	orrs	r1, r3
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	4319      	orrs	r1, r3
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	4319      	orrs	r1, r3
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	4319      	orrs	r1, r3
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	430b      	orrs	r3, r1
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	4a19      	ldr	r2, [pc, #100]	@ (8003d24 <LL_SPI_Init+0xc4>)
 8003cc0:	401a      	ands	r2, r3
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	6899      	ldr	r1, [r3, #8]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	0c1b      	lsrs	r3, r3, #16
 8003ccc:	430b      	orrs	r3, r1
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	2380      	movs	r3, #128	@ 0x80
 8003cda:	011b      	lsls	r3, r3, #4
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d206      	bcs.n	8003cee <LL_SPI_Init+0x8e>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 8003ce0:	2380      	movs	r3, #128	@ 0x80
 8003ce2:	015a      	lsls	r2, r3, #5
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	0011      	movs	r1, r2
 8003ce8:	0018      	movs	r0, r3
 8003cea:	f7ff ff97 	bl	8003c1c <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	6a1a      	ldr	r2, [r3, #32]
 8003cf2:	2380      	movs	r3, #128	@ 0x80
 8003cf4:	019b      	lsls	r3, r3, #6
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d106      	bne.n	8003d08 <LL_SPI_Init+0xa8>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	0011      	movs	r1, r2
 8003d02:	0018      	movs	r0, r3
 8003d04:	f7ff ff9e 	bl	8003c44 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8003d08:	230f      	movs	r3, #15
 8003d0a:	18fb      	adds	r3, r7, r3
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	701a      	strb	r2, [r3, #0]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 8003d10:	230f      	movs	r3, #15
 8003d12:	18fb      	adds	r3, r7, r3
 8003d14:	781b      	ldrb	r3, [r3, #0]
}
 8003d16:	0018      	movs	r0, r3
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	b004      	add	sp, #16
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	46c0      	nop			@ (mov r8, r8)
 8003d20:	ffff0040 	.word	0xffff0040
 8003d24:	fffff0fb 	.word	0xfffff0fb

08003d28 <LL_TIM_SetPrescaler>:
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003d38:	46c0      	nop			@ (mov r8, r8)
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	b002      	add	sp, #8
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <LL_TIM_SetAutoReload>:
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003d50:	46c0      	nop			@ (mov r8, r8)
 8003d52:	46bd      	mov	sp, r7
 8003d54:	b002      	add	sp, #8
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <LL_TIM_SetRepetitionCounter>:
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d68:	46c0      	nop			@ (mov r8, r8)
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	b002      	add	sp, #8
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <LL_TIM_OC_SetCompareCH1>:
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003d80:	46c0      	nop			@ (mov r8, r8)
 8003d82:	46bd      	mov	sp, r7
 8003d84:	b002      	add	sp, #8
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <LL_TIM_OC_SetCompareCH2>:
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003d98:	46c0      	nop			@ (mov r8, r8)
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	b002      	add	sp, #8
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <LL_TIM_OC_SetCompareCH3>:
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003db0:	46c0      	nop			@ (mov r8, r8)
 8003db2:	46bd      	mov	sp, r7
 8003db4:	b002      	add	sp, #8
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <LL_TIM_OC_SetCompareCH4>:
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003dc8:	46c0      	nop			@ (mov r8, r8)
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	b002      	add	sp, #8
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	615a      	str	r2, [r3, #20]
}
 8003de4:	46c0      	nop			@ (mov r8, r8)
 8003de6:	46bd      	mov	sp, r7
 8003de8:	b002      	add	sp, #8
 8003dea:	bd80      	pop	{r7, pc}

08003dec <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a30      	ldr	r2, [pc, #192]	@ (8003ec0 <LL_TIM_Init+0xd4>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d003      	beq.n	8003e0c <LL_TIM_Init+0x20>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a2f      	ldr	r2, [pc, #188]	@ (8003ec4 <LL_TIM_Init+0xd8>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d107      	bne.n	8003e1c <LL_TIM_Init+0x30>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2270      	movs	r2, #112	@ 0x70
 8003e10:	4393      	bics	r3, r2
 8003e12:	001a      	movs	r2, r3
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a28      	ldr	r2, [pc, #160]	@ (8003ec0 <LL_TIM_Init+0xd4>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d013      	beq.n	8003e4c <LL_TIM_Init+0x60>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a27      	ldr	r2, [pc, #156]	@ (8003ec4 <LL_TIM_Init+0xd8>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d00f      	beq.n	8003e4c <LL_TIM_Init+0x60>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a26      	ldr	r2, [pc, #152]	@ (8003ec8 <LL_TIM_Init+0xdc>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d00b      	beq.n	8003e4c <LL_TIM_Init+0x60>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a25      	ldr	r2, [pc, #148]	@ (8003ecc <LL_TIM_Init+0xe0>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d007      	beq.n	8003e4c <LL_TIM_Init+0x60>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a24      	ldr	r2, [pc, #144]	@ (8003ed0 <LL_TIM_Init+0xe4>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d003      	beq.n	8003e4c <LL_TIM_Init+0x60>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a23      	ldr	r2, [pc, #140]	@ (8003ed4 <LL_TIM_Init+0xe8>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d106      	bne.n	8003e5a <LL_TIM_Init+0x6e>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4a22      	ldr	r2, [pc, #136]	@ (8003ed8 <LL_TIM_Init+0xec>)
 8003e50:	401a      	ands	r2, r3
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	0011      	movs	r1, r2
 8003e68:	0018      	movs	r0, r3
 8003e6a:	f7ff ff69 	bl	8003d40 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	001a      	movs	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	0011      	movs	r1, r2
 8003e78:	0018      	movs	r0, r3
 8003e7a:	f7ff ff55 	bl	8003d28 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a0f      	ldr	r2, [pc, #60]	@ (8003ec0 <LL_TIM_Init+0xd4>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00b      	beq.n	8003e9e <LL_TIM_Init+0xb2>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a10      	ldr	r2, [pc, #64]	@ (8003ecc <LL_TIM_Init+0xe0>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d007      	beq.n	8003e9e <LL_TIM_Init+0xb2>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a0f      	ldr	r2, [pc, #60]	@ (8003ed0 <LL_TIM_Init+0xe4>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d003      	beq.n	8003e9e <LL_TIM_Init+0xb2>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a0e      	ldr	r2, [pc, #56]	@ (8003ed4 <LL_TIM_Init+0xe8>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d106      	bne.n	8003eac <LL_TIM_Init+0xc0>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	691a      	ldr	r2, [r3, #16]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	0011      	movs	r1, r2
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	f7ff ff56 	bl	8003d58 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	0018      	movs	r0, r3
 8003eb0:	f7ff ff8e 	bl	8003dd0 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	b004      	add	sp, #16
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	46c0      	nop			@ (mov r8, r8)
 8003ec0:	40012c00 	.word	0x40012c00
 8003ec4:	40000400 	.word	0x40000400
 8003ec8:	40002000 	.word	0x40002000
 8003ecc:	40014000 	.word	0x40014000
 8003ed0:	40014400 	.word	0x40014400
 8003ed4:	40014800 	.word	0x40014800
 8003ed8:	fffffcff 	.word	0xfffffcff

08003edc <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8003edc:	b590      	push	{r4, r7, lr}
 8003ede:	b087      	sub	sp, #28
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8003ee8:	2317      	movs	r3, #23
 8003eea:	18fb      	adds	r3, r7, r3
 8003eec:	2201      	movs	r2, #1
 8003eee:	701a      	strb	r2, [r3, #0]

  switch (Channel)
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	2380      	movs	r3, #128	@ 0x80
 8003ef4:	015b      	lsls	r3, r3, #5
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d036      	beq.n	8003f68 <LL_TIM_OC_Init+0x8c>
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	2380      	movs	r3, #128	@ 0x80
 8003efe:	015b      	lsls	r3, r3, #5
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d83c      	bhi.n	8003f7e <LL_TIM_OC_Init+0xa2>
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	2380      	movs	r3, #128	@ 0x80
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d021      	beq.n	8003f52 <LL_TIM_OC_Init+0x76>
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	2380      	movs	r3, #128	@ 0x80
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d832      	bhi.n	8003f7e <LL_TIM_OC_Init+0xa2>
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d003      	beq.n	8003f26 <LL_TIM_OC_Init+0x4a>
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	2b10      	cmp	r3, #16
 8003f22:	d00b      	beq.n	8003f3c <LL_TIM_OC_Init+0x60>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8003f24:	e02b      	b.n	8003f7e <LL_TIM_OC_Init+0xa2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8003f26:	2317      	movs	r3, #23
 8003f28:	18fc      	adds	r4, r7, r3
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	0011      	movs	r1, r2
 8003f30:	0018      	movs	r0, r3
 8003f32:	f000 f879 	bl	8004028 <OC1Config>
 8003f36:	0003      	movs	r3, r0
 8003f38:	7023      	strb	r3, [r4, #0]
      break;
 8003f3a:	e021      	b.n	8003f80 <LL_TIM_OC_Init+0xa4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003f3c:	2317      	movs	r3, #23
 8003f3e:	18fc      	adds	r4, r7, r3
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	0011      	movs	r1, r2
 8003f46:	0018      	movs	r0, r3
 8003f48:	f000 f8f2 	bl	8004130 <OC2Config>
 8003f4c:	0003      	movs	r3, r0
 8003f4e:	7023      	strb	r3, [r4, #0]
      break;
 8003f50:	e016      	b.n	8003f80 <LL_TIM_OC_Init+0xa4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003f52:	2317      	movs	r3, #23
 8003f54:	18fc      	adds	r4, r7, r3
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	0011      	movs	r1, r2
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	f000 f971 	bl	8004244 <OC3Config>
 8003f62:	0003      	movs	r3, r0
 8003f64:	7023      	strb	r3, [r4, #0]
      break;
 8003f66:	e00b      	b.n	8003f80 <LL_TIM_OC_Init+0xa4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003f68:	2317      	movs	r3, #23
 8003f6a:	18fc      	adds	r4, r7, r3
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	0011      	movs	r1, r2
 8003f72:	0018      	movs	r0, r3
 8003f74:	f000 f9f0 	bl	8004358 <OC4Config>
 8003f78:	0003      	movs	r3, r0
 8003f7a:	7023      	strb	r3, [r4, #0]
      break;
 8003f7c:	e000      	b.n	8003f80 <LL_TIM_OC_Init+0xa4>
      break;
 8003f7e:	46c0      	nop			@ (mov r8, r8)
  }

  return result;
 8003f80:	2317      	movs	r3, #23
 8003f82:	18fb      	adds	r3, r7, r3
 8003f84:	781b      	ldrb	r3, [r3, #0]
}
 8003f86:	0018      	movs	r0, r3
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	b007      	add	sp, #28
 8003f8c:	bd90      	pop	{r4, r7, pc}
	...

08003f90 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, const LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	22ff      	movs	r2, #255	@ 0xff
 8003fa2:	4393      	bics	r3, r2
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	7b12      	ldrb	r2, [r2, #12]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4a18      	ldr	r2, [pc, #96]	@ (8004010 <LL_TIM_BDTR_Init+0x80>)
 8003fb0:	401a      	ands	r2, r3
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	4a15      	ldr	r2, [pc, #84]	@ (8004014 <LL_TIM_BDTR_Init+0x84>)
 8003fbe:	401a      	ands	r2, r3
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	4a13      	ldr	r2, [pc, #76]	@ (8004018 <LL_TIM_BDTR_Init+0x88>)
 8003fcc:	401a      	ands	r2, r3
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	4a10      	ldr	r2, [pc, #64]	@ (800401c <LL_TIM_BDTR_Init+0x8c>)
 8003fda:	4013      	ands	r3, r2
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	89d2      	ldrh	r2, [r2, #14]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4a0e      	ldr	r2, [pc, #56]	@ (8004020 <LL_TIM_BDTR_Init+0x90>)
 8003fe8:	401a      	ands	r2, r3
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	4a0b      	ldr	r2, [pc, #44]	@ (8004024 <LL_TIM_BDTR_Init+0x94>)
 8003ff6:	401a      	ands	r2, r3
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	645a      	str	r2, [r3, #68]	@ 0x44

  return SUCCESS;
 8004006:	2300      	movs	r3, #0
}
 8004008:	0018      	movs	r0, r3
 800400a:	46bd      	mov	sp, r7
 800400c:	b004      	add	sp, #16
 800400e:	bd80      	pop	{r7, pc}
 8004010:	fffffcff 	.word	0xfffffcff
 8004014:	fffffbff 	.word	0xfffffbff
 8004018:	fffff7ff 	.word	0xfffff7ff
 800401c:	ffffefff 	.word	0xffffefff
 8004020:	ffffdfff 	.word	0xffffdfff
 8004024:	ffffbfff 	.word	0xffffbfff

08004028 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	2201      	movs	r2, #1
 8004038:	4393      	bics	r3, r2
 800403a:	001a      	movs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2203      	movs	r2, #3
 8004056:	4393      	bics	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2270      	movs	r2, #112	@ 0x70
 800405e:	4393      	bics	r3, r2
 8004060:	001a      	movs	r2, r3
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4313      	orrs	r3, r2
 8004068:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	2202      	movs	r2, #2
 800406e:	4393      	bics	r3, r2
 8004070:	001a      	movs	r2, r3
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	4313      	orrs	r3, r2
 8004078:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	2201      	movs	r2, #1
 800407e:	4393      	bics	r3, r2
 8004080:	001a      	movs	r2, r3
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	4313      	orrs	r3, r2
 8004088:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a22      	ldr	r2, [pc, #136]	@ (8004118 <OC1Config+0xf0>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d00b      	beq.n	80040aa <OC1Config+0x82>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a21      	ldr	r2, [pc, #132]	@ (800411c <OC1Config+0xf4>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d007      	beq.n	80040aa <OC1Config+0x82>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a20      	ldr	r2, [pc, #128]	@ (8004120 <OC1Config+0xf8>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d003      	beq.n	80040aa <OC1Config+0x82>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a1f      	ldr	r2, [pc, #124]	@ (8004124 <OC1Config+0xfc>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d120      	bne.n	80040ec <OC1Config+0xc4>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	2208      	movs	r2, #8
 80040ae:	4393      	bics	r3, r2
 80040b0:	001a      	movs	r2, r3
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4313      	orrs	r3, r2
 80040ba:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	2204      	movs	r2, #4
 80040c0:	4393      	bics	r3, r2
 80040c2:	001a      	movs	r2, r3
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4313      	orrs	r3, r2
 80040cc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	4a15      	ldr	r2, [pc, #84]	@ (8004128 <OC1Config+0x100>)
 80040d2:	401a      	ands	r2, r3
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	4313      	orrs	r3, r2
 80040da:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	4a13      	ldr	r2, [pc, #76]	@ (800412c <OC1Config+0x104>)
 80040e0:	401a      	ands	r2, r3
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	4313      	orrs	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	68da      	ldr	r2, [r3, #12]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	0011      	movs	r1, r2
 8004100:	0018      	movs	r0, r3
 8004102:	f7ff fe35 	bl	8003d70 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800410c:	2300      	movs	r3, #0
}
 800410e:	0018      	movs	r0, r3
 8004110:	46bd      	mov	sp, r7
 8004112:	b006      	add	sp, #24
 8004114:	bd80      	pop	{r7, pc}
 8004116:	46c0      	nop			@ (mov r8, r8)
 8004118:	40012c00 	.word	0x40012c00
 800411c:	40014000 	.word	0x40014000
 8004120:	40014400 	.word	0x40014400
 8004124:	40014800 	.word	0x40014800
 8004128:	fffffeff 	.word	0xfffffeff
 800412c:	fffffdff 	.word	0xfffffdff

08004130 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	2210      	movs	r2, #16
 8004140:	4393      	bics	r3, r2
 8004142:	001a      	movs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4a31      	ldr	r2, [pc, #196]	@ (8004224 <OC2Config+0xf4>)
 800415e:	4013      	ands	r3, r2
 8004160:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	4a30      	ldr	r2, [pc, #192]	@ (8004228 <OC2Config+0xf8>)
 8004166:	401a      	ands	r2, r3
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	021b      	lsls	r3, r3, #8
 800416e:	4313      	orrs	r3, r2
 8004170:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	2220      	movs	r2, #32
 8004176:	4393      	bics	r3, r2
 8004178:	001a      	movs	r2, r3
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	011b      	lsls	r3, r3, #4
 8004180:	4313      	orrs	r3, r2
 8004182:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	2210      	movs	r2, #16
 8004188:	4393      	bics	r3, r2
 800418a:	001a      	movs	r2, r3
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	4313      	orrs	r3, r2
 8004194:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a24      	ldr	r2, [pc, #144]	@ (800422c <OC2Config+0xfc>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d00b      	beq.n	80041b6 <OC2Config+0x86>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a23      	ldr	r2, [pc, #140]	@ (8004230 <OC2Config+0x100>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d007      	beq.n	80041b6 <OC2Config+0x86>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a22      	ldr	r2, [pc, #136]	@ (8004234 <OC2Config+0x104>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d003      	beq.n	80041b6 <OC2Config+0x86>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a21      	ldr	r2, [pc, #132]	@ (8004238 <OC2Config+0x108>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d121      	bne.n	80041fa <OC2Config+0xca>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	2280      	movs	r2, #128	@ 0x80
 80041ba:	4393      	bics	r3, r2
 80041bc:	001a      	movs	r2, r3
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	019b      	lsls	r3, r3, #6
 80041c4:	4313      	orrs	r3, r2
 80041c6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	2240      	movs	r2, #64	@ 0x40
 80041cc:	4393      	bics	r3, r2
 80041ce:	001a      	movs	r2, r3
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	019b      	lsls	r3, r3, #6
 80041d6:	4313      	orrs	r3, r2
 80041d8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	4a17      	ldr	r2, [pc, #92]	@ (800423c <OC2Config+0x10c>)
 80041de:	401a      	ands	r2, r3
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4313      	orrs	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	4a14      	ldr	r2, [pc, #80]	@ (8004240 <OC2Config+0x110>)
 80041ee:	401a      	ands	r2, r3
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	4313      	orrs	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	68da      	ldr	r2, [r3, #12]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	0011      	movs	r1, r2
 800420e:	0018      	movs	r0, r3
 8004210:	f7ff fdba 	bl	8003d88 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800421a:	2300      	movs	r3, #0
}
 800421c:	0018      	movs	r0, r3
 800421e:	46bd      	mov	sp, r7
 8004220:	b006      	add	sp, #24
 8004222:	bd80      	pop	{r7, pc}
 8004224:	fffffcff 	.word	0xfffffcff
 8004228:	ffff8fff 	.word	0xffff8fff
 800422c:	40012c00 	.word	0x40012c00
 8004230:	40014000 	.word	0x40014000
 8004234:	40014400 	.word	0x40014400
 8004238:	40014800 	.word	0x40014800
 800423c:	fffffbff 	.word	0xfffffbff
 8004240:	fffff7ff 	.word	0xfffff7ff

08004244 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	4a37      	ldr	r2, [pc, #220]	@ (8004330 <OC3Config+0xec>)
 8004254:	401a      	ands	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2203      	movs	r2, #3
 8004270:	4393      	bics	r3, r2
 8004272:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2270      	movs	r2, #112	@ 0x70
 8004278:	4393      	bics	r3, r2
 800427a:	001a      	movs	r2, r3
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4313      	orrs	r3, r2
 8004282:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	4a2b      	ldr	r2, [pc, #172]	@ (8004334 <OC3Config+0xf0>)
 8004288:	401a      	ands	r2, r3
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	021b      	lsls	r3, r3, #8
 8004290:	4313      	orrs	r3, r2
 8004292:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	4a26      	ldr	r2, [pc, #152]	@ (8004330 <OC3Config+0xec>)
 8004298:	401a      	ands	r2, r3
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	021b      	lsls	r3, r3, #8
 80042a0:	4313      	orrs	r3, r2
 80042a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a24      	ldr	r2, [pc, #144]	@ (8004338 <OC3Config+0xf4>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d00b      	beq.n	80042c4 <OC3Config+0x80>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a23      	ldr	r2, [pc, #140]	@ (800433c <OC3Config+0xf8>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d007      	beq.n	80042c4 <OC3Config+0x80>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a22      	ldr	r2, [pc, #136]	@ (8004340 <OC3Config+0xfc>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d003      	beq.n	80042c4 <OC3Config+0x80>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a21      	ldr	r2, [pc, #132]	@ (8004344 <OC3Config+0x100>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d11f      	bne.n	8004304 <OC3Config+0xc0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	4a20      	ldr	r2, [pc, #128]	@ (8004348 <OC3Config+0x104>)
 80042c8:	401a      	ands	r2, r3
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	029b      	lsls	r3, r3, #10
 80042d0:	4313      	orrs	r3, r2
 80042d2:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	4a1d      	ldr	r2, [pc, #116]	@ (800434c <OC3Config+0x108>)
 80042d8:	401a      	ands	r2, r3
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	029b      	lsls	r3, r3, #10
 80042e0:	4313      	orrs	r3, r2
 80042e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	4a1a      	ldr	r2, [pc, #104]	@ (8004350 <OC3Config+0x10c>)
 80042e8:	401a      	ands	r2, r3
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	011b      	lsls	r3, r3, #4
 80042f0:	4313      	orrs	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	4a17      	ldr	r2, [pc, #92]	@ (8004354 <OC3Config+0x110>)
 80042f8:	401a      	ands	r2, r3
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	015b      	lsls	r3, r3, #5
 8004300:	4313      	orrs	r3, r2
 8004302:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	68da      	ldr	r2, [r3, #12]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	0011      	movs	r1, r2
 8004318:	0018      	movs	r0, r3
 800431a:	f7ff fd41 	bl	8003da0 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004324:	2300      	movs	r3, #0
}
 8004326:	0018      	movs	r0, r3
 8004328:	46bd      	mov	sp, r7
 800432a:	b006      	add	sp, #24
 800432c:	bd80      	pop	{r7, pc}
 800432e:	46c0      	nop			@ (mov r8, r8)
 8004330:	fffffeff 	.word	0xfffffeff
 8004334:	fffffdff 	.word	0xfffffdff
 8004338:	40012c00 	.word	0x40012c00
 800433c:	40014000 	.word	0x40014000
 8004340:	40014400 	.word	0x40014400
 8004344:	40014800 	.word	0x40014800
 8004348:	fffff7ff 	.word	0xfffff7ff
 800434c:	fffffbff 	.word	0xfffffbff
 8004350:	ffffefff 	.word	0xffffefff
 8004354:	ffffdfff 	.word	0xffffdfff

08004358 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	4a2b      	ldr	r2, [pc, #172]	@ (8004414 <OC4Config+0xbc>)
 8004368:	401a      	ands	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4a25      	ldr	r2, [pc, #148]	@ (8004418 <OC4Config+0xc0>)
 8004384:	4013      	ands	r3, r2
 8004386:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4a24      	ldr	r2, [pc, #144]	@ (800441c <OC4Config+0xc4>)
 800438c:	401a      	ands	r2, r3
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	021b      	lsls	r3, r3, #8
 8004394:	4313      	orrs	r3, r2
 8004396:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	4a21      	ldr	r2, [pc, #132]	@ (8004420 <OC4Config+0xc8>)
 800439c:	401a      	ands	r2, r3
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	031b      	lsls	r3, r3, #12
 80043a4:	4313      	orrs	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	4a1a      	ldr	r2, [pc, #104]	@ (8004414 <OC4Config+0xbc>)
 80043ac:	401a      	ands	r2, r3
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	031b      	lsls	r3, r3, #12
 80043b4:	4313      	orrs	r3, r2
 80043b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a1a      	ldr	r2, [pc, #104]	@ (8004424 <OC4Config+0xcc>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d00b      	beq.n	80043d8 <OC4Config+0x80>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a19      	ldr	r2, [pc, #100]	@ (8004428 <OC4Config+0xd0>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d007      	beq.n	80043d8 <OC4Config+0x80>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a18      	ldr	r2, [pc, #96]	@ (800442c <OC4Config+0xd4>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d003      	beq.n	80043d8 <OC4Config+0x80>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a17      	ldr	r2, [pc, #92]	@ (8004430 <OC4Config+0xd8>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d107      	bne.n	80043e8 <OC4Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	4a16      	ldr	r2, [pc, #88]	@ (8004434 <OC4Config+0xdc>)
 80043dc:	401a      	ands	r2, r3
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	019b      	lsls	r3, r3, #6
 80043e4:	4313      	orrs	r3, r2
 80043e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	68da      	ldr	r2, [r3, #12]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	0011      	movs	r1, r2
 80043fc:	0018      	movs	r0, r3
 80043fe:	f7ff fcdb 	bl	8003db8 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004408:	2300      	movs	r3, #0
}
 800440a:	0018      	movs	r0, r3
 800440c:	46bd      	mov	sp, r7
 800440e:	b006      	add	sp, #24
 8004410:	bd80      	pop	{r7, pc}
 8004412:	46c0      	nop			@ (mov r8, r8)
 8004414:	ffffefff 	.word	0xffffefff
 8004418:	fffffcff 	.word	0xfffffcff
 800441c:	ffff8fff 	.word	0xffff8fff
 8004420:	ffffdfff 	.word	0xffffdfff
 8004424:	40012c00 	.word	0x40012c00
 8004428:	40014000 	.word	0x40014000
 800442c:	40014400 	.word	0x40014400
 8004430:	40014800 	.word	0x40014800
 8004434:	ffffbfff 	.word	0xffffbfff

08004438 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8004440:	4b0d      	ldr	r3, [pc, #52]	@ (8004478 <LL_mDelay+0x40>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8004446:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	3301      	adds	r3, #1
 800444c:	d00c      	beq.n	8004468 <LL_mDelay+0x30>
  {
    Delay++;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	3301      	adds	r3, #1
 8004452:	607b      	str	r3, [r7, #4]
 8004454:	e008      	b.n	8004468 <LL_mDelay+0x30>
  }

  while (Delay)
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8004456:	4b08      	ldr	r3, [pc, #32]	@ (8004478 <LL_mDelay+0x40>)
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	2380      	movs	r3, #128	@ 0x80
 800445c:	025b      	lsls	r3, r3, #9
 800445e:	4013      	ands	r3, r2
 8004460:	d002      	beq.n	8004468 <LL_mDelay+0x30>
    {
      Delay--;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	3b01      	subs	r3, #1
 8004466:	607b      	str	r3, [r7, #4]
  while (Delay)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1f3      	bne.n	8004456 <LL_mDelay+0x1e>
    }
  }
}
 800446e:	46c0      	nop			@ (mov r8, r8)
 8004470:	46c0      	nop			@ (mov r8, r8)
 8004472:	46bd      	mov	sp, r7
 8004474:	b004      	add	sp, #16
 8004476:	bd80      	pop	{r7, pc}
 8004478:	e000e010 	.word	0xe000e010

0800447c <memset>:
 800447c:	0003      	movs	r3, r0
 800447e:	1882      	adds	r2, r0, r2
 8004480:	4293      	cmp	r3, r2
 8004482:	d100      	bne.n	8004486 <memset+0xa>
 8004484:	4770      	bx	lr
 8004486:	7019      	strb	r1, [r3, #0]
 8004488:	3301      	adds	r3, #1
 800448a:	e7f9      	b.n	8004480 <memset+0x4>

0800448c <strchr>:
 800448c:	b2c9      	uxtb	r1, r1
 800448e:	7803      	ldrb	r3, [r0, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d004      	beq.n	800449e <strchr+0x12>
 8004494:	428b      	cmp	r3, r1
 8004496:	d100      	bne.n	800449a <strchr+0xe>
 8004498:	4770      	bx	lr
 800449a:	3001      	adds	r0, #1
 800449c:	e7f7      	b.n	800448e <strchr+0x2>
 800449e:	424b      	negs	r3, r1
 80044a0:	4159      	adcs	r1, r3
 80044a2:	4249      	negs	r1, r1
 80044a4:	4008      	ands	r0, r1
 80044a6:	e7f7      	b.n	8004498 <strchr+0xc>

080044a8 <__libc_init_array>:
 80044a8:	b570      	push	{r4, r5, r6, lr}
 80044aa:	2600      	movs	r6, #0
 80044ac:	4c0c      	ldr	r4, [pc, #48]	@ (80044e0 <__libc_init_array+0x38>)
 80044ae:	4d0d      	ldr	r5, [pc, #52]	@ (80044e4 <__libc_init_array+0x3c>)
 80044b0:	1b64      	subs	r4, r4, r5
 80044b2:	10a4      	asrs	r4, r4, #2
 80044b4:	42a6      	cmp	r6, r4
 80044b6:	d109      	bne.n	80044cc <__libc_init_array+0x24>
 80044b8:	2600      	movs	r6, #0
 80044ba:	f000 f823 	bl	8004504 <_init>
 80044be:	4c0a      	ldr	r4, [pc, #40]	@ (80044e8 <__libc_init_array+0x40>)
 80044c0:	4d0a      	ldr	r5, [pc, #40]	@ (80044ec <__libc_init_array+0x44>)
 80044c2:	1b64      	subs	r4, r4, r5
 80044c4:	10a4      	asrs	r4, r4, #2
 80044c6:	42a6      	cmp	r6, r4
 80044c8:	d105      	bne.n	80044d6 <__libc_init_array+0x2e>
 80044ca:	bd70      	pop	{r4, r5, r6, pc}
 80044cc:	00b3      	lsls	r3, r6, #2
 80044ce:	58eb      	ldr	r3, [r5, r3]
 80044d0:	4798      	blx	r3
 80044d2:	3601      	adds	r6, #1
 80044d4:	e7ee      	b.n	80044b4 <__libc_init_array+0xc>
 80044d6:	00b3      	lsls	r3, r6, #2
 80044d8:	58eb      	ldr	r3, [r5, r3]
 80044da:	4798      	blx	r3
 80044dc:	3601      	adds	r6, #1
 80044de:	e7f2      	b.n	80044c6 <__libc_init_array+0x1e>
 80044e0:	080050d4 	.word	0x080050d4
 80044e4:	080050d4 	.word	0x080050d4
 80044e8:	080050d8 	.word	0x080050d8
 80044ec:	080050d4 	.word	0x080050d4

080044f0 <memcpy>:
 80044f0:	2300      	movs	r3, #0
 80044f2:	b510      	push	{r4, lr}
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d100      	bne.n	80044fa <memcpy+0xa>
 80044f8:	bd10      	pop	{r4, pc}
 80044fa:	5ccc      	ldrb	r4, [r1, r3]
 80044fc:	54c4      	strb	r4, [r0, r3]
 80044fe:	3301      	adds	r3, #1
 8004500:	e7f8      	b.n	80044f4 <memcpy+0x4>
	...

08004504 <_init>:
 8004504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004506:	46c0      	nop			@ (mov r8, r8)
 8004508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800450a:	bc08      	pop	{r3}
 800450c:	469e      	mov	lr, r3
 800450e:	4770      	bx	lr

08004510 <_fini>:
 8004510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004512:	46c0      	nop			@ (mov r8, r8)
 8004514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004516:	bc08      	pop	{r3}
 8004518:	469e      	mov	lr, r3
 800451a:	4770      	bx	lr
